{"task_id": "hamming_distance", "prompt": "def hamming_distance(N: int, S: str, T: str) -> int:\n    \"\"\"\n    You are given a positive integer N and two strings S and T, each of length N and consisting of lowercase English letters.\n    Find the Hamming distance between S and T. That is, return the number of positions i (1-indexed) where S and T differ.\n\n    Constraints:\n      - 1 \u2264 N \u2264 100\n      - S and T are strings of length N containing only lowercase English letters.\n    \"\"\"", "test": "def check(candidate):\n    assert candidate(6, 'abcarc', 'agcahc') == 2\n    assert candidate(7, 'atcoder', 'contest') == 7\n    assert candidate(8, 'chokudai', 'chokudai') == 0\n    assert hamming_distance(10, 'vexknuampx', 'vzxikuamlx') == 4","entry_point": "hamming_distance"}
{"task_id": "doors_in_the_center", "prompt": "def doors_in_the_center(N: int) -> str:\n    \"\"\"\n    Doors in the Center\n\n    Find a length-N string that satisfies all of the following conditions:\n    - Each character is '-' or '='.\n    - It is a palindrome.\n    - It contains exactly one or exactly two '='s. If it contains two '='s, they are adjacent.\n\n    Such a string is unique.\n    \"\"\"", "test": "def check(candidate):\n    assert candidate(4) == '-==-'\n    assert candidate(7) == '---=---'\n    assert candidate(1) == '=' \n    assert candidate(3) == '-=-' \n    assert candidate(9) == '----=----' ","entry_point": "doors_in_the_center"}
{"task_id": "full_house", "prompt": "def full_house(cards: list[int]) -> str:\n    \"\"\"\n    We have seven cards. Each card has an integer written on it.\n    Determine whether it is possible to choose five of them so that the chosen cards form a full house.\n\n    A set of five cards is called a full house if and only if the following conditions are satisfied:\n    - For different integers x and y, there are three cards with x and two cards with y.\n\n    Constraints:\n      - Each card's number is an integer between 1 and 13 (inclusive).\n      - The input is a list of seven integers.\n    \"\"\"", "test": "def check(candidate):\n    assert candidate([1, 4, 1, 4, 2, 1, 3]) == \"Yes\" \n    assert candidate([11, 12, 13, 10, 13, 12, 11]) == \"No\" \n    assert full_house([7, 7, 7, 7, 7, 7, 7]) == \"No\"\n    assert candidate([13, 13, 1, 1, 7, 4, 13]) == \"Yes\"","entry_point": "full_house"}
{"task_id": "ticket_gate_log", "prompt": "def ticket_gate_log(S: str) -> int:\n    \"\"\"\n    Takahashi aggregated usage records from ticket gates. However, he accidentally erased some records of entering and exiting stations.\n    He is trying to restore the erased records.\n\n    You are given a string S consisting of 'i' and 'o'. We want to insert zero or more characters at arbitrary positions in S so that the resulting string satisfies the following conditions:\n    - Its length is even.\n    - Every odd-numbered (1st, 3rd, ...) character is 'i'.\n    - Every even-numbered (2nd, 4th, ...) character is 'o'.\n\n    Find the minimum number of characters that need to be inserted to satisfy these conditions.\n    \"\"\"", "test": "def check(candidate):\n    assert candidate(\"ioi\") == 1\n    assert candidate(\"iioo\") == 2\n    assert candidate(\"io\") == 0","entry_point": "ticket_gate_log"}