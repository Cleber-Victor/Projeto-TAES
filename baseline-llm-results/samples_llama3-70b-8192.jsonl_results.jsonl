{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers, threshold):\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    temp = ''\n    open_count = 0\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            open_count += 1\n        else:\n            open_count -= 1\n        temp += char\n        if open_count == 0:\n            result.append(temp)\n            temp = ''\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = statistics.mean(numbers)\n    return sum(abs(num - mean_val) for num in numbers) / len(numbers)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers, delimeter):\n    return [val for pair in zip(numbers, numbers[1:]) for val in (pair[0], delimeter)] + numbers[-1:] if numbers else []\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                max_level = max(max_level, current_level)\n            else:\n                current_level -= 1\n        result.append(max_level)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers):\n    product = 1\n    sum = 0\n    for num in numbers:\n        product *= num\n        sum += num\n    return sum, product\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers):\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        if num > max_num:\n            max_num = num\n        result.append(max_num)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:len(string)-i][::-1]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(c.lower() for c in string))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    music_string = music_string.split()\n    beats = []\n    for note in music_string:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "num_dict = {\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n\ndef sort_numbers(numbers: str) -> str:\n    nums = numbers.split()\n    nums.sort(key=lambda x: num_dict[x])\n    return ' '.join(nums)", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    return min([(numbers[i], numbers[j]) for i in range(len(numbers)) for j in range(i+1, len(numbers)) if numbers[i] < numbers[j]], key=lambda x: x[1] - x[0])\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(n - min_num) / (max_num - min_num) for n in numbers]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values):\n    return [val for val in values if isinstance(val, int)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/26", "completion": "from collections import OrderedDict\ndef remove_duplicates(numbers):\n    return list(OrderedDict((x, True) for x in numbers if numbers.count(x) == 1))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()", "result": "passed", "passed": true}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings):\n    return ''.join(strings)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [i for i in l if i > 0]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "import math\nimport scipy.optimize as opt\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    return opt.newton(poly, 0, args=(xs,))\n", "result": "failed: 'numpy.float64' object is not iterable", "passed": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l):\n    third_elements = sorted([x for i, x in enumerate(l) if i % 3 == 0])\n    result = []\n    third_index = 0\n    for i, x in enumerate(l):\n        if i % 3 == 0:\n            result.append(third_elements[third_index])\n            third_index += 1\n        else:\n            result.append(x)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    evens = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    return [evens[i // 2] if i % 2 == 0 else l[i] for i in range(len(l))]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "result": "passed", "passed": true}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n        if count == n:\n            return b\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l)-2):\n        if i > 0 and l[i] == l[i-1]:\n            continue\n        left, right = i+1, len(l)-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left +=1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    s = set()\n    for i in l:\n        if -i in s and i != 0:\n            return True\n        s.add(i)\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x, base):\n    convertString = \"0123456789\"\n    if x < base:\n        return convertString[x]\n    else:\n        return change_base(x // base, base) + convertString[x % base]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\") for ch in s])", "result": "failed: closing parenthesis ']' does not match opening parenthesis '(' (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    return ''.join([char for char in text if char.lower() not in 'aeiou'])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l, t):\n    return all(i < t for i in l)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return sorted(list(set(l1) & set(l2)))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\" and len(stack) == 0:\n            return False\n        elif bracket == \")\" and len(stack) > 0:\n            stack.pop()\n    return len(stack) == 0\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return xs[1:] \n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(2, n):\n            a, b, c = b, c, a + b + c\n        return c\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    count = sum(1 for char in s[:-1] if char in 'aeiou')\n    if s.endswith('y'):\n        count += 1\n    return count\n", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x = str(x)\n    n = len(x)\n    shift = shift % n\n    return x[-shift:] + x[:-shift]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(i) for i in s if i.isupper())\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    apples, oranges = map(int, s.replace('and', ',').replace('apples', ',').replace('oranges', ',').split(',')[1::2])\n    return n - apples - oranges\n", "result": "failed: invalid literal for int() with base 10: ' '", "passed": false}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [(val, i) for i, val in enumerate(arr) if val % 2 == 0]\n    return min(even_nodes, default=[]) if even_nodes else []\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    for i in sorted(count, reverse=True):\n        if count[i] >= i:\n            return i\n    return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n lst = lst.copy()\n result = []\n while lst:\n  result.append(min(lst))\n  lst.remove(min(lst))\n  if lst:\n   result.append(max(lst))\n   lst.remove(max(lst))\n return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "import math\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n-1,-1,-1):\n        for j in range(i,n):\n            if i==j:\n                dp[i][j] = 0\n            elif arr[i]==arr[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    return lst2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef is_multiply_prime(a):\n    factors = prime_factors(a)\n    prime_count = sum(1 for factor in set(factors) if is_prime(factor))\n    return prime_count == 3\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    if n <= 0 or x < 0:\n        return False\n    root = round(math.pow(x, 1 / n))\n    return n ** root == x\n", "result": "failed: This prints if this assert fails 2 (also good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    a = abs(a)\n    cube_root = round(a ** (1. / 3))\n    return cube_root ** 3 == a\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for d in num if d in prime_digits)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    grades_output = []\n    for grade in grades:\n        if grade == 4.0:\n            grades_output.append('A+')\n        elif grade > 3.7:\n            grades_output.append('A')\n        elif grade > 3.3:\n            grades_output.append('A-')\n        elif grade > 3.0:\n            grades_output.append('B+')\n        elif grade > 2.7:\n            grades_output.append('B')\n        elif grade > 2.3:\n            grades_output.append('B-')\n        elif grade > 2.0:\n            grades_output.append('C+')\n        elif grade > 1.7:\n            grades_output.append('C')\n        elif grade > 1.3:\n            grades_output.append('C-')\n        elif grade > 1.0:\n            grades_output.append('D+')\n        elif grade > 0.7:\n            grades_output.append('D')\n        elif grade > 0.0:\n            grades_output.append('D-')\n        else:\n            grades_output.append('E')\n    return grades_output\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    count = 9 * (10 ** (n - 1) - 10 ** (n - 2))\n    if n > 1:\n        count += 2 * (10 ** (n - 1) - 1)\n    else:\n        count += 1\n    return count\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(i for idx, i in enumerate(lst) if idx % 2 != 0 and i % 2 == 0)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x], key=lambda x: (x[0], -x[1]))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    new_array = array.copy()\n    if not new_array:\n        return new_array\n    sum_first_last = new_array[0] + new_array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(new_array, reverse=True)\n    else:\n        return sorted(new_array)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for v in s:\n        c = ord(v)\n        if c >= 65 and c <= 90:\n            result += chr(((c - 65 + 4) % 26) + 65)\n        elif c >= 97 and c <= 122:\n            result += chr(((c - 97 + 4) % 26) + 97)\n        else:\n            result += v\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    if len(unique_lst) < 2:\n        return None\n    return unique_lst[1]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    return sum(sentence.strip().startswith('I') for sentence in sentences if sentence.strip())\n", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "`\ndef encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            if char.isupper():\n                encoded_message += chr((ord(char) - 65 + 2) % 26 + 65)\n            else:\n                encoded_message += chr((ord(char) - 97 + 2) % 26 + 97)\n        else:\n            encoded_message += char.swapcase()\n    return encoded_message\n`", "result": "failed: invalid syntax (<string>, line 16)", "passed": false}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    max_prime = max(primes) if primes else 0\n    return sum(int(digit) for digit in str(max_prime))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = [key for key in dict if isinstance(key, str)]\n    if not keys:\n        return False\n    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)\n", "result": "failed: Third test error: True", "passed": false}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num) and num < n:\n            primes.append(num)\n        num += 1\n    return primes\n", "result": "timed out", "passed": false}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    return -int(round(-float(value)))\n", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    return [n] + [n + 2*i for i in range(1, n)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.replace(',', ' ').split()", "result": "passed", "passed": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    return max([i for i in range(x, y + 1) if i % 2 == 0]) if any(i % 2 == 0 for i in range(x, y + 1)) else -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m: return -1\n    avg = round(sum(range(n, m + 1)) / (m - n + 1))\n    return bin(avg)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_even_digit(n):\n        while n > 0:\n            if n % 10 % 2 == 0:\n                return False\n            n //= 10\n        return True\n    return sorted([i for i in x if has_even_digit(i)])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr = sorted([i for i in arr if 1 <= i <= 9])\n    arr = arr[::-1]\n    return [num_to_word[i] for i in arr]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [i if i % 2 else math.factorial(i) for i in range(1, n + 1)]\n", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    return sum(digit_sum(num) > 0 for num in arr)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    return arr == sorted(arr)[len(arr) - max(range(len(arr)), key=lambda i: arr[i:]):] or arr == []\n", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odds_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    evens_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if odds_in_lst1 <= evens_in_lst2 else \"NO\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    from collections import Counter\n    counter = Counter(test.split())\n    max_count = max(counter.values(), default=0)\n    return {k: v for k, v in counter.items() if v == max_count}\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    s = ''.join(i for i in s if i not in c)\n    return (s, s == s[::-1])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f\"the number of odd elements {sum(digit in '13579' for digit in s)}n the str{sum(digit in '13579' for digit in s)}ng {sum(digit in '13579' for digit in s)} of the {sum(digit in '13579' for digit in s)}nput.\" for s in lst]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    return min(sum(nums[i:j]) for i in range(len(nums)) for j in range(i+1, len(nums)+1))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    return sum(math.ceil(sum(row)/capacity) for row in grid)\n", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted((bin(x).count('1'), x) for x in arr)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    vowels = 'aeiou'\n    words = s.split()\n    result = []\n    for word in words:\n        count = sum(1 for char in word.lower() if char not in vowels)\n        if count == n:\n            result.append(word)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    from collections import Counter\n    c1, c2 = Counter(lst[0]), Counter(lst[1])\n    if (c1['('] + c2['(']) == (c1[')'] + c2[')']):\n        return 'Yes'\n    return 'No'\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum([i for n, i in enumerate(lst) if n % 2 == 0 and i % 2 != 0])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(num for num in arr[:k] if 10 > num or num < 100)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz.append(n)\n    return sorted([x for x in collatz if x % 2 != 0])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n\ndef valid_date(date):\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        else:\n            if day < 1 or day > 29:\n                return False\n        return True\n    except ValueError:\n        return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return len([c for c in txt if c.islower() and ord(c) % 2 != 0])\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return lst == sorted(lst, key=lambda x: (x, -lst.count(x)))\n", "result": "failed: This prints if this assert fails 5 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        return \"YES\" if is_prime(length) else \"NO\"\n    else:\n        return \"NO\"\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    prod = 1\n    total = 0\n    for num in arr:\n        prod *= 1 if num > 0 else -1 if num < 0 else 0\n        total += abs(num)\n    return prod * total\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "from heapq import heappop, heappush\n\ndef minPath(grid, k):\n    n = len(grid)\n    d = [(0, i, j) for i in range(n) for j in range(n)]\n    p = {(i, j): [] for i in range(n) for j in range(n)}\n    p[0, 0] = [grid[0][0]]\n    q = [(0, 0, 0)]\n    dx = [1, 0, -1, 0]\n    dy = [0, 1, 0, -1]\n    while q:\n        s, x, y = heappop(q)\n        if len(p[x, y]) == k:\n            return p[x, y]\n        for i in range(4):\n            nx, ny = x + dx[i], y + dy[i]\n            if 0 <= nx < n and 0 <= ny < n:\n                if (nx, ny) not in p or p[nx, ny][:-1] == p[x, y]:\n                    p[nx, ny] = p[x, y] + [grid[nx][ny]]\n                    heappush(q, (s - grid[nx][ny], nx, ny))\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    memo = {1: 3}\n    def trib(m):\n        if m in memo:\n            return memo[m]\n        if m % 2 == 0:\n            memo[m] = 1 + m / 2\n        else:\n            memo[m] = trib(m - 1) + trib(m - 2) + trib(m + 1)\n        return memo[m]\n    return [1] + [trib(i) for i in range(1, n + 1)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            return 0\n        product *= int(digit)\n    return product\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(s):\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 1:\n                stack.pop()\n                return True\n            stack.pop()\n    return False\n", "result": "failed: pop from empty list", "passed": false}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(i**2 for i in map(lambda x: math.ceil(x), lst))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    words = txt.split()\n    if not words:\n        return False\n    last_word = words[-1]\n    if not last_word:\n        return False\n    return last_word[-1].isalpha() and len(last_word) == 1", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1,0,-1):\n        if arr[i]<=arr[i-1]:\n            return i\n    return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    neg = [x for x in lst if x < 0]\n    pos = [x for x in lst if x > 0]\n    return (max(neg) if neg else None, min(pos) if pos else None)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    a = float(a.replace(',', '.')) if isinstance(a, str) else a\n    b = float(b.replace(',', '.')) if isinstance(b, str) else b\n    if a < b:\n        return type(b)(b)\n    elif a > b:\n        return type(a)(a)\n    else:\n        return None\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    n //= 2\n    for a in range(1, n+1):\n        for b in range(a, n+1):\n            for c in range(b, n+1):\n                for d in range(c, n+1):\n                    if a + b + c + d == n:\n                        return True\n    return False\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    while \"__\" in text:\n        text = text.replace(\"__\", \"_\")\n    while \"___\" in text:\n        text = text.replace(\"___\", \"_-\")\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    return text\n", "result": "failed: This prints if this assert fails 3 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.rsplit('.', 1)\n    if not name[0].isalpha():\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    if not name:\n        return 'No'\n    return 'Yes'\n", "result": "failed: string index out of range", "passed": false}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(i**2 if idx % 3 == 0 and idx % 4 != 0 else i**3 if idx % 4 == 0 else i for idx, i in enumerate(lst))\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    return Fraction(int(x.split(\"/\")[0]), int(x.split(\"/\")[1])) * Fraction(int(n.split(\"/\")[0]), int(n.split(\"/\")[1])).denominator == 1\n", "result": "failed: test1", "passed": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return [x for _, x in sorted((sum(int(digit) for digit in str(abs(n))), i, n) for i, n in enumerate(nums))]\n", "result": "failed: too many values to unpack (expected 2)", "passed": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return sum(10 < abs(n) and len(str(abs(n))) > 1 and int(str(abs(n))[0]) % 2 != 0 and int(str(abs(n))[-1]) % 2 != 0 for n in nums)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [(i * i - i + 1) for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 > idx2: idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([i for i in lst if len(i) % 2 == 0])\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i>=0 and i%2)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    return [abs(a-b) if a != b else 0 for a,b in zip(game,guess)]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))\n    return f\"{class_name}.{strongest_extension}\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = str(abs(num))\n    even = sum(1 for digit in num if int(digit) % 2 == 0)\n    odd = sum(1 for digit in num if int(digit) % 2 != 0)\n    return even, odd\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max(words, key=lambda x: (len(set(x)), x))\n", "result": "failed: t2", "passed": false}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    r = ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    return r if any(c.isalpha() for c in s) else r[::-1]\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text: return None\n    return hashlib.md5(text.encode()).hexdigest()\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]\n", "result": "failed: Test 1", "passed": false}
