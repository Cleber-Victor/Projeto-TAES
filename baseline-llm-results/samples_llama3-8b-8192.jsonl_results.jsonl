{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i-1] <= threshold:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    groups = []\n    stack = []\n    temp = ''\n    \n    for char in paren_string:\n        if char == '(':\n            if not stack:\n                stack.append(temp)\n                temp = ''\n            else:\n                temp += '('\n        elif char == ')':\n            temp += ')'\n            if stack:\n                stack[-1] += temp\n                temp = ''\n        else:\n            continue\n    \n    temp = ''\n    for char in paren_string:\n        if char == '(':\n            if not temp:\n                temp = '('\n        elif char == ')':\n            temp += ')'\n            if not temp: return []\n        else:\n            if temp: return []\n            temp += char\n        if char == ')' and temp[-1] == '(':\n            groups.append(temp[:-1])\n            temp = ''\n    if temp: groups.append(temp)\n    \n    return groups", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)", "result": "passed", "passed": true}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "result": "passed", "passed": true}
{"task_id": "HumanEval/5", "completion": "result = [*(a + [delimeter] + b for a, b in zip([numbers[0]], numbers[1:]))] if numbers else []", "result": "failed: name 'numbers' is not defined", "passed": false}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> list[int]:\n    result = []\n    nest_level = 0\n    temp_nest = 0\n    for char in paren_string:\n        if char == '(':\n            temp_nest += 1\n            nest_level = max(nest_level, temp_nest)\n        elif char == ')':\n            temp_nest -= 1\n        if char != ' ':\n            result.append(nest_level)\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/7", "completion": "list(map(lambda s: s, filter(lambda s: substring in s, strings)))", "result": "failed: name 'strings' is not defined", "passed": false}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return total_sum, total_product", "result": "passed", "passed": true}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(max(num, result[-1]))\n    return result", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(s: str) -> str:\n    orig = s\n    rev = s[::-1]\n    for i in range(len(s)):\n        if s.startswith(rev[i:]):\n            return orig + rev[i:]\n    return orig + rev", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "result": "passed", "passed": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a) if a > 0 else 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[i:] for i in range(len(string)+1)]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/15", "completion": "\"s = ' '.join(str(i) for i in range(n+1))\\n\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.casefold()))", "result": "passed", "passed": true}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    output = []\n    beats = 0\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            beats = 4\n        elif music_string[i] == '|':\n            beats = 2\n        elif music_string[i] == '.':\n            beats = 1\n        else:\n            output.append(beats)\n            beats = 0\n        i += 1\n    if beats != 0:\n        output.append(beats)\n    return output", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    return len([s for s in [string[i:i+len(substring)] for i in range(len(string)-len(substring)+1)] if s == substring])", "result": "passed", "passed": true}
{"task_id": "HumanEval/19", "completion": "from typing import List\nfrom collections import OrderedDict\n\ndef sort_numbers(numbers: str) -> str:\n    num_to_word = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, \n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    words = numbers.split()\n    word_nums = [num_to_word[word] for word in words]\n    sorted_nums = sorted(word_nums)\n    sorted_words = [list(num_to_word.keys())[list(num_to_word.values()).index(num)] for num in sorted_nums]\n    return ' '.join(sorted_words)", "result": "passed", "passed": true}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = ()\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "result": "passed", "passed": true}
{"task_id": "HumanEval/21", "completion": "min_val = min(numbers)\nmax_val = max(numbers)\nreturn [(x - min_val) / (max_val - min_val) for x in numbers]", "result": "failed: 'return' outside function (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)", "result": "passed", "passed": true}
{"task_id": "HumanEval/24", "completion": "for i in range(n-1,0,-1):", "result": "failed: expected an indented block after 'for' statement on line 8 (<string>, line 11)", "passed": false}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    result = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            result.append(i)\n    if n > 1:\n        result.append(n)\n    result = result[:] if not result else result\n    return [i for i in result for _ in range(result.count(i))]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/26", "completion": "class Solution:\n    def remove_duplicates(self, numbers: List[int]) -> List[int]:\n        seen = set()\n        result = []\n        for num in numbers:\n            if num not in seen:\n                seen.add(num)\n                result.append(num)\n        return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/27", "completion": "\"string.capitalize().swapcase()\"\\", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/28", "completion": "\"return''.join(strings)\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [i for i in l if i > 0]", "result": "passed", "passed": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/32", "completion": "from scipy.optimize import bisect\nimport math\n\ndef poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    if len(xs) % 2 == 1:\n        raise ValueError(\"List xs has odd number of coefficients. It should have even.\")\n    largest_non_zero_coeff = max([coeff for coeff in xs if abs(coeff) > 1e-9])\n    bound = [x for x in [0, largest_non_zero_coeff] if poly(xs, x) * poly(xs, x) < 0][0]\n    return bisect(lambda x: poly(xs, x), 0, bound)\n", "result": "failed: list index out of range", "passed": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return [i if i % 3 else sorted([x for x in l if x % 3 == 0])[i % 3] for i, x in enumerate(l)]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return list(set(l))", "result": "passed", "passed": true}
{"task_id": "HumanEval/35", "completion": "max(l)", "result": "failed: name 'l' is not defined", "passed": false}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            str_i = str(i)\n            if '7' in str_i:\n                count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    return [i if i%2 else sorted([i for i in l if i%2])[j//2] for j, i in enumerate(l)]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups of length 3 or less\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse the permutation in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[1:-1] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef fib(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\ndef prime_fib(n: int) -> int:\n    num = 1\n    while True:\n        num = fib(num)\n        if is_prime(num):\n            if n <= 0:\n                return num\n            n -= 1\n", "result": "timed out", "passed": false}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return sum((i*(i-1)) // 2 for i in range(1, n+1))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [i+1 for i in l]", "result": "passed", "passed": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    convertString = \"0123456789ABC\"\n    result = \"\"\n    while x > 0:\n        result = convertString[x % base] + result\n        x = x // base\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h", "result": "passed", "passed": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n <= 0:\n        return 0\n    fib4_n_0, fib4_n_1, fib4_n_2, fib4_n_3 = 0, 0, 2, 0\n    for _ in range(4, n+1):\n        fib4_n_0, fib4_n_1, fib4_n_2, fib4_n_3 = fib4_n_1, fib4_n_2, fib4_n_3, fib4_n_0 + fib4_n_1 + fib4_n_2\n    return fib4_n_3\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n//2]\n    else:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2", "result": "passed", "passed": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(n, p-2, p) * n % p", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) -  ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])", "result": "passed", "passed": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l, t):\n    return all(i < t for i in l)", "result": "passed", "passed": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int: \n    return x + y", "result": "passed", "passed": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 1, 1\n    for _ in range(2, n+1):\n        a, b = b, a+b\n    return b", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    return all(b1+b2 for b1,b2 in zip(brackets,brackets[1:]), brackets[0] in '<' and brackets[-1] in '>') if len(brackets) % 2 != 1 else False", "result": "failed: Generator expression must be parenthesized (<string>, line 17)", "passed": false}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    return (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n            all(l[i] >= l[i+1] for i in range(len(l)-1)))", "result": "passed", "passed": true}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1 & set2))", "result": "passed", "passed": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            i = 2\n    return n", "result": "passed", "passed": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return sum(range(1, n+1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "result": "passed", "passed": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i * xs[i] for i in range(1, len(xs))]", "result": "passed", "passed": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(2, n):\n        a, b, c = b, c, a + b + c\n    return c", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    for char in s:\n        if char.lower() in 'aeiou':\n            count += 1\n    return count", "result": "failed: Test 3", "passed": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    str_x = str(x)[::-1]\n    shift %= len(str_x)\n    return str_x[shift:] + str_x[:shift]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "result": "passed", "passed": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    words=s.split()\n    count_orange=0\n    count_apple=0\n    i=0\n    while i<len(words):\n        if words[i].lower()=='oranges':\n            count_orange=int(words[i+1])\n            i=i+2\n        elif words[i].lower()=='apples':\n            count_apple=int(words[i+1])\n            i=i+2\n        i=i+1\n    return n-count_apple-count_orange", "result": "failed: invalid literal for int() with base 10: 'and'", "passed": false}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [(x, i) for i, x in enumerate(arr) if x % 2 == 0]\n    if even_nodes:\n        return [min(x for x, _ in even_nodes), even_nodes[0][1]]\n    else:\n        return []", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    counts = {}\n    for num in lst:\n        if num not in counts:\n            counts[num] = 1\n        else:\n            counts[num] += 1\n    max_val = -1\n    for num, count in counts.items():\n        if num > max_val and count >= num:\n            max_val = num\n    return max_val if max_val != -1 else -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst): \n    retL = []\n    while len(lst) > 0:\n        retL.append(min(lst))\n        lst.remove(min(lst))\n        if len(lst) > 0:\n            retL.append(max(lst))\n            lst.remove(max(lst))\n    return retL", "result": "passed", "passed": true}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w): \n    return all(x == y for x, y in zip(q, q[::-1])) and sum(q) <= w", "result": "passed", "passed": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    arr = ['*'] + arr + ['*']\n    dp = [[False for _ in range(n + 1)] for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        dp[i][i] = True\n    for i in range(1, n):\n        if arr[i] == arr[i + 1]:\n            dp[i][i + 1] = True\n        else:\n            dp[i][i + 1] = False\n\n    for length in range(3, n + 1):\n        for i in range(1, n + 1 - length + 1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = dp[i + 1][j - 1] or dp[i][j - 1] or dp[i + 1][j]\n\n    min_changes = n\n    for i in range(1, n + 1):\n        if not dp[0][i]:\n            min_changes = min(min_changes, i)\n    return n - min_changes", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2): \n    def sum_chars(lst):\n        return sum(len(s) for s in lst)\n    return lst1 if sum_chars(lst1) < sum_chars(lst2) else lst2 if sum_chars(lst2) < sum_chars(lst1) else lst1", "result": "passed", "passed": true}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, 8):  # 7 is the square root of 100\n        if a % i == 0 and is_prime(i):\n            b = a // i\n            if is_prime(b):\n                c = b // (a // b)\n                if is_prime(c):\n                    return True\n\n    return False", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n): \n    return round(x**0.5) ** n == x", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/77", "completion": "`lambda a: a**0.33333%1==0`", "result": "failed: invalid syntax (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_dict = {'0': 0, '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 0, '7': 1, '8': 1, '9': 1, 'A': 1, 'B': 1, 'C': 0, 'D': 1, 'E': 0, 'F': 0}\n    return sum(hex_dict[digit] for digit in num)", "result": "failed: First test error: 2", "passed": false}
{"task_id": "HumanEval/79", "completion": "bin(int(\"db\" + str(decimal) + \"db\", 36))[3:-3]", "result": "failed: name 'decimal' is not defined", "passed": false}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if len(set(s[i:i+3])) < 3:\n            return False\n    return True", "result": "failed: abcd", "passed": false}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    length = len(string)\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(length)", "result": "passed", "passed": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    start_one = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            start_one += 1\n    return start_one", "result": "passed", "passed": true}
{"task_id": "HumanEval/84", "completion": "bin(sum(int(c) for c in bin(N)[2:]))[2:]", "result": "failed: name 'N' is not defined", "passed": false}
{"task_id": "HumanEval/85", "completion": "def add(lst): \n    return sum(i for i in lst[1::2] if i % 2 == 0)", "result": "passed", "passed": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(c) for c in word) for word in s.split())", "result": "failed: sequence item 0: expected str instance, list found", "passed": false}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = [(i, j) for i, row in enumerate(lst) if x in row for j, value in reversed(list(enumerate(row)))]\n    result.sort()\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if len(array) < 1:\n        return []\n    if sum(array[0], array[-1]) % 2 == 0:\n        array.sort(reverse=True)\n    else:\n        array.sort()\n    return array.copy()", "result": "failed: 'int' object is not iterable", "passed": false}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + 2 * 2) % 26 + ascii_offset)\n        else:\n            result += char\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst = set(sorted(lst))\n    new_lst = [i for i in lst if lst.count(i) > 1]\n    if len(new_lst) < 1:\n        return None\n    return min([i for i in lst if i > min(new_lst)])", "result": "failed: 'set' object has no attribute 'count'", "passed": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    S += '.'\n    count = 0\n    sentence = ''\n    for char in S:\n        if char in '.?!':\n            if sentence.capitalize().startswith('I'):\n                count += 1\n            sentence = ''\n        else:\n            sentence += char\n    return count", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z): \n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x+y == z or x+z == y or y+z == x)", "result": "passed", "passed": true}
{"task_id": "HumanEval/93", "completion": "def encode(message): \n    vowels = 'aeiouAEIOU' \n    coded_message = '' \n    for char in message: \n        if char in vowels: \n            index = vowels.index(char) \n            coded_message += chr((index + 2) % 26 + ord('a')) \n        elif char.isalpha(): \n            coded_message += char.swapcase() \n        else: \n            coded_message += char \n    return coded_message", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = 0\n    for i in lst:\n        if is_prime(i):\n            if i > max_prime:\n                max_prime = i\n    return sum(int(digit) for digit in str(max_prime))", "result": "failed: name 'is_prime' is not defined", "passed": false}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    keys = [(k, k.islower() or k.isupper()) for k in dict.keys()]\n    upper = [k for k, is_upper in keys if is_upper]\n    lower = [k for k, is_upper in keys if not is_upper]\n    return len(lower) == 0 or len(upper) == 0", "result": "failed: Second test error: True", "passed": false}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/97", "completion": "lambda a, b: (a % 10) * (b % 10)", "result": "failed: First test error: None", "passed": false}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i, c in enumerate(s):\n        if c.upper() in 'AEIOU' and i % 2 == 0:\n            count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value): return round(float(value))", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    result = [n]\n    i = 1\n    current = n\n    while len(result) < n:\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 2\n        result.append(current)\n    return result", "result": "failed: Test 4", "passed": false}
{"task_id": "HumanEval/101", "completion": "def words_string(s):", "result": "failed: expected an indented block after function definition on line 11 (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    numbers = list(range(x, y+1))\n    max_even = -1\n    for num in numbers:\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m - n + 1))\n    return bin(avg)[2:]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([num for num in x if not any(int(digit) % 2 == 0 for digit in str(num))])", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    digits = [str(d) for d in arr if 1 <= d <= 9]\n    return [numeral for numeral in ['Zero', *range(1, 10)] for d in sorted(digits) if d == str(numeral[:-1] or 0)[::-1]][::-1]\n", "result": "failed: 'int' object is not subscriptable", "passed": false}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result", "result": "failed: name 'math' is not defined", "passed": false}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        s = str(i)\n        if s == s[::-1]:\n            if int(s) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)", "result": "passed", "passed": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for num in arr:\n        if type(num) == int:\n            s = str(abs(num))\n            if sum(int(d) for d in s) > 0:\n                count += 1\n    return count", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    if n == 0: return True\n    arr.sort()\n    shifted = arr[-1:]\n    for i in range(n-2,-1,-1):\n        shifted.insert(0,arr[i])\n    return shifted == arr", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_count = 0\n    for num in lst1:\n        if num % 2 != 0:\n            odd_count += 1\n    for num in lst2:\n        if num % 2 != 0:\n            odd_count -= 1\n    if odd_count <= 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/111", "completion": "def histogram(test):", "result": "failed: expected an indented block after function definition on line 15 (<string>, line 16)", "passed": false}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    s = ''.join(filter(lambda x: x not in c, s))\n    return s, s == s[::-1]", "result": "passed", "passed": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f\"the number of odd elements {n}n the str{n}ng {n} of the {n}nput.\" for n in [str(int(i) for i in x)[::2].count(str(int(i) % 2)) for x in lst]]\n", "result": "failed: name 'i' is not defined", "passed": false}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum if min_sum != float('inf') else 0", "result": "passed", "passed": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    rows, cols = len(grid), len(grid[0])\n    total_water = sum(sum(row) for row in grid)\n    return -(-total_water // capacity)\n", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "result": "passed", "passed": true}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.isalpha() and char.lower() not in 'aeiou':\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result", "result": "passed", "passed": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    for i in reversed(range(len(word))):\n        if word[i].lower() in 'aeiou':\n            if all(not c.lower() in 'aeiou' for c in word[:i]):\n                return word[i]\n    return ''", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s1, s2 = lst\n    stack = []\n    for c in s1:\n        if c == '(':\n            stack.append('(')\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    for c in s2:\n        if c == ')':\n            if not stack:\n                return 'No'\n            stack.pop()\n        else:\n            stack.append('(')\n    if stack:\n        return 'No'\n    return 'Yes'", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/121", "completion": "lambda lst: sum(i for i in lst[1::2] if i % 2 != 0)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(i for i in arr[:k] if len(str(i)) <= 2)", "result": "passed", "passed": true}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    def collatz(num):\n        sequence = [num]\n        while num != 1:\n            if num % 2 == 0:\n                num //= 2\n            else:\n                num = 3 * num + 1\n            sequence.append(num)\n        return [x for x in sequence if x % 2 != 0 and x != 1]\n\n    return sorted(collatz(n))", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    from datetime import datetime\n    try:\n        datetime.strptime(date, '%m-%d-%Y')\n        month, day, year = map(int, date.split('-'))\n        if year < 1:\n            return False\n        if month < 1 or month > 12:\n            return False\n        if (month in [1, 3, 5, 7, 8, 10, 12] and day > 31) or (month in [4, 6, 9, 11] and day > 30) or (month == 2 and day > 29):\n            return False\n        return True\n    except ValueError:\n        return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if not words and ',' in txt:\n        return [i for i in txt.replace(',', '') if i.islower()]\n    return words", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    if len(lst) != len(set(lst)):\n        return False\n    return True", "result": "failed: This prints if this assert fails 7 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/127", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    if start < end:\n        length = end - start\n        if is_prime(length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    return \"NO\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = 1\n    for num in arr:\n        signs *= 1 if num >= 0 else -1\n    return sum(abs(num) for num in arr) * signs", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    def dfs(i, j, path, total):\n        global res, temp\n        if total > k:\n            return\n        if total == k:\n            if not temp or temp > path:\n                temp = path\n                res = temp[:]\n            return\n        if path:\n            if path[-1] > temp[-1]:\n                return\n        for x, y in [(i - 1, j), (i, j - 1), (i + 1, j), (i, j + 1)]:\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]):\n                dfs(x, y, path + [grid[x][y]], total + 1)\n\n    res = []\n    temp = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(i, j, [grid[i][j]], 1)\n    return res if k == 0 else temp", "result": "failed: name 'temp' is not defined", "passed": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [1, 3]\n    seq = [1, 3]\n    for _ in range(2, n + 1):\n        if _ % 2 == 0:\n            seq.append(1 + _ / 2)\n        else:\n            seq.append(seq[-2] + seq[-1] + (seq[-3] if _ >= 3 else 0))\n    return seq", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/131", "completion": "lambda n: functools.reduce(lambda x, y: x * y, [i for i in str(n) if int(i) % 2 != 0] or [0])", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(s): return any(a in s and b in s for a,b in [('[', ']'), ('!', '!')])", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum(math.ceil(i)**2 for i in lst)", "result": "passed", "passed": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt): \n    if not txt: \n        return False \n    last_char = txt[-1] \n    return last_char.isalpha() and txt[-2:].lstrip() == txt[-2:]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr): \n    for i in reversed(range(len(arr))); \n        if arr[i-1] < arr[i]; \n            return i-1; \n    return -1", "result": "failed: invalid syntax (<string>, line 13)", "passed": false}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negatives = [i for i in lst if i < 0]\n    positives = [i for i in lst if i > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)", "result": "passed", "passed": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = float(a.replace(',', '.')) if ',' in a else a\n        b = float(b.replace(',', '.')) if ',' in b else b\n    elif isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    elif isinstance(b, str):\n        b = float(b.replace(',', '.'))\n    if a > b:\n        return a\n    elif a < b:\n        return b\n    else:\n        return None", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for a in range(2, n, 2):\n        for b in range(a, n, 2):\n            for c in range(b, n, 2):\n                for d in range(c, n, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n): \n    factorial = 1 \n    for i in range(1, n+1): \n        for j in range(1, i+1): \n            factorial *= j \n    return factorial", "result": "passed", "passed": true}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text += \"_\"\n    new_text = \"\"\n    i = 0\n    while i < len(text):\n        if text[i] == \" \":\n            if len(text)-i > 2 and text[i:i+3] == \"__-\":\n                new_text += \"-\"\n                i += 3\n            else:\n                new_text += \"_\"\n                i += 1\n        else:\n            new_text += text[i]\n            i += 1\n    return new_text[:-1]", "result": "failed: This prints if this assert fails 4 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not re.match(r'^[a-zA-Z]+', parts[0]):\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'", "result": "passed", "passed": true}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(lambda x: x**2 if i%3==0 and not i%4 else x**3 if i%4==0 and not i%3 else x for i,x in enumerate(lst))", "result": "failed: unsupported operand type(s) for +: 'int' and 'function'", "passed": false}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    new_sentence = \"\"\n    words = sentence.split()\n    for word in words:\n        if is_prime(len(word)):\n            new_sentence += word + \" \"\n    return new_sentence.strip()\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "result": "passed", "passed": true}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):", "result": "failed: expected an indented block after function definition on line 14 (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums): \n    return sorted((sum(int(digit)), i) for i, num in enumerate(nums) if num)", "result": "failed: name 'digit' is not defined", "passed": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    return sum(1 for num in nums if num > 10 and num % 10 % 2 != 0 and num // 10 % 10 % 2 != 0)", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "planet_list = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']", "result": "failed: object of type 'NoneType' has no len()", "passed": false}
{"task_id": "HumanEval/149", "completion": "lambda lst:sorted([x for x in set(lst) if len(x)%2==0])", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "result": "passed", "passed": true}
{"task_id": "HumanEval/151", "completion": "lambda lst: sum(i**2 for i in lst if isinstance(i, int) and i > 0)", "result": "failed: This prints if this assert fails 1 (good for debugging!)", "passed": false}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    return [abs(g-gi) if g!=gi else 0 for g,gi in zip(game,guess)]", "result": "passed", "passed": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest = max(extensions, key=lambda ext: (sum(1 for c in ext if c.isupper()), sum(1 for c in ext if c.islower)))\n    return f\"{class_name}.{strongest}\"", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        b_rotated = b[i:] + b[:i]\n        if b_rotated in a:\n            return True\n    return False", "result": "passed", "passed": true}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = str(abs(num))\n    even = sum(1 for digit in num if int(digit)%2 == 0)\n    odd = len(num) - even\n    return (even, odd)", "result": "passed", "passed": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"M\", \"CM\", \"D\", \"CD\",\n        \"C\", \"XC\", \"L\", \"XL\",\n        \"X\", \"IX\", \"V\", \"IV\",\n        \"I\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num.lower()", "result": "passed", "passed": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)", "result": "passed", "passed": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = ''\n    max_len = 0\n    for word in words:\n        if len(set(word)) > max_len:\n            max_word = word\n            max_len = len(set(word))\n        elif len(set(word)) == max_len:\n            if word < max_word:\n                max_word = word\n    return max_word", "result": "passed", "passed": true}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    eaten = number + min(remaining, need - number)\n    remaining -= eaten - number\n    return [eaten, remaining]", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for op, num in zip(operator, operand[1:]):\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n    return result", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    result = []\n    for char in s:\n        if char.isalpha():\n            result.append(char.swapcase())\n        else:\n            result.append(char)\n    return ''.join(result) if any(c.isalpha() for c in result) else result[::-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "result": "passed", "passed": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    even_digits = [i for i in range(a, b+1) if str(i).isdigit() and int(str(i)[-1]) % 2 == 0]\n    return sorted(even_digits)", "result": "failed: Test 1", "passed": false}
