{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n  for i in range(len(numbers)):\n    for j in range(i + 1, len(numbers)):\n      if abs(numbers[i] - numbers[j]) < threshold:\n        return True\n  return False \n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n  result = []\n  current_group = ''\n  open_count = 0\n  for char in paren_string:\n    if char == '(':\n      open_count += 1\n      current_group += char\n    elif char == ')':\n      if open_count > 0:\n        open_count -= 1\n        current_group += char\n        if open_count == 0:\n          result.append(current_group)\n          current_group = ''\n  return result \n"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n  return number - int(number) \n"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n  balance = 0\n  for operation in operations:\n    balance += operation\n    if balance < 0:\n      return True\n  return False  \n"}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n  mean = sum(numbers) / len(numbers)\n  return sum(abs(x - mean) for x in numbers) / len(numbers) \n"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n  return [n for i, n in enumerate(numbers) for _ in range(i == 0, 2, 1) for _ in range(2) if not _ or i < len(numbers) - 1]\n\n\n"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n  groups = paren_string.split()\n  result = []\n  for group in groups:\n    max_depth = 0\n    current_depth = 0\n    for char in group:\n      if char == '(':\n        current_depth += 1\n        max_depth = max(max_depth, current_depth)\n      elif char == ')':\n        current_depth -= 1\n    result.append(max_depth)\n  return result \n"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n  return [s for s in strings if substring in s] \n"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n  sum = 0\n  product = 1\n  for number in numbers:\n    sum += number\n    product *= number\n  return (sum, product) \n"}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    output = []\n    max_so_far = numbers[0]\n    for number in numbers:\n        output.append(max_so_far)\n        max_so_far = max(max_so_far, number)\n    return output\n"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n  i = len(string)\n  while i > 0:\n    if is_palindrome(string[i:]):\n      return string + string[i:][::-1]\n    i -= 1\n  return string \n"}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n  result = []\n  for i in range(len(a)):\n    if a[i] == b[i]:\n      result.append('0')\n    else:\n      result.append('1')\n  return ''.join(result) \n"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n  if not strings:\n    return None\n  longest_str = strings[0]\n  for string in strings:\n    if len(string) > len(longest_str):\n      longest_str = string\n  return longest_str \n"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n  while b:\n    a, b = b, a % b\n  return a  \n"}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n  return [string[:i] for i in range(1, len(string) + 1)] \n"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n  return ' '.join(map(str, range(n + 1)))  \n"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n  return len(set(string.lower())) \n"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n  return [4 if n == 'o' else 2 if n == 'o|' else 1 if n == '.|' else 0 for n in music_string] \n"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n  count = 0\n  i = 0\n  while i <= len(string) - len(substring):\n    if string[i:i + len(substring)] == substring:\n      count += 1\n      i += len(substring)\n    else:\n      i += 1\n  return count  \n"}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n  nums = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n  return ' '.join([num for num in numbers.split() if num in nums]) \n"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n  numbers.sort()\n  return (numbers[0], numbers[1]) \n"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n  min_val = min(numbers)\n  max_val = max(numbers)\n  return [(x - min_val) / (max_val - min_val) for x in numbers] \n"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n  return [v for v in values if isinstance(v, int)]\n"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n  return len(string) \n"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n  for i in range(n//2, 0, -1):\n    if n % i == 0:\n      return i \n"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n  factors = []\n  i = 2\n  while i * i <= n:\n    if n % i:\n      i += 1\n    else:\n      n //= i\n      factors.append(i)\n  if n > 1:\n    factors.append(n)\n  return factors \n"}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n  seen = set()\n  result = []\n  for number in numbers:\n    if number not in seen:\n      seen.add(number)\n      result.append(number)\n  return result \n"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n  return ''.join([c.upper() if c.islower() else c.lower() for c in string])\n"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n  return \"\".join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n  return [s for s in strings if s.startswith(prefix)] \n"}
{"task_id": "HumanEval/30", "completion": "return [x for x in l if x > 0] \n"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True \n"}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    for x in range(-100, 100):\n        if abs(poly(xs, x)) < 1e-6:\n            return x \n"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n  l_sorted=[]\n  for i in range(len(l)):\n    if i%3==0:\n      l_sorted.append(sorted(l[i:i+3]))\n    else:\n      l_sorted.append(l[i])\n  return l_sorted[0]   \n"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n  return sorted(set(l))\n"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n  return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n  count = 0\n  for i in range(1, n):\n    if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n      count += 1\n  return count \n"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n  return [l[i] if i % 2 else sorted(l[i] for i in range(len(l)) if i % 2 == 0)[0] for i in range(len(l))]  \n"}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n  groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n  groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n  return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n  groups = [s[i:i+3] for i in range(0, len(s), 3)]\n  groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n  return \"\".join(groups)  \n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n  a = 1\n  b = 2\n  count = 0\n  while count < n:\n    if is_prime(a):\n      count += 1\n    a, b = b, a + b\n  return a\n\ndef is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True \n"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n  for i in range(len(l)):\n    for j in range(i + 1, len(l)):\n      for k in range(j + 1, len(l)):\n        if l[i] + l[j] + l[k] == 0:\n          return True\n  return False  \n"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n  return n * (n - 1) // 2  \n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n  return [x + 1 for x in l] \n"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n  seen = set()\n  for x in l:\n    y = -x\n    if y in seen:\n      return True\n    seen.add(x)\n  return False  \n"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n  if x == 0:\n    return '0'\n  digits = ''\n  while x > 0:\n    digit = x % base\n    digits = str(digit) + digits\n    x //= base\n  return digits  \n"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n  return (a * h) / 2\n"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n   if n == 0:\n    return 0\n  elif n == 1:\n    return 0\n  elif n == 2:\n    return 2\n  elif n == 3:\n    return 0\n  else:\n    a = 0\n    b = 0\n    c = 2\n    d = 0\n    for i in range(4, n+1):\n      temp = a + b + c + d\n      a = b\n      b = c\n      c = d\n      d = temp\n    return d \n"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n  l.sort()\n  n = len(l)\n  if n % 2 == 0:\n    return (l[n//2 - 1] + l[n//2])/2\n  else:\n    return l[n//2] \n"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n  return text == text[::-1] \n"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n  return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n  return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n  return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s]) \n"}
{"task_id": "HumanEval/51", "completion": " def remove_vowels(text):\n  return ''.join([char for char in text if char not in 'aeiouAEIOU']) \n "}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n  return all(x < t for x in l) \n"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n  return x + y \n"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n  return set(s0) == set(s1)  \n"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n  if n == 1:\n    return 1\n  elif n == 2:\n    return 1\n  else:\n    return fib(n-1) + fib(n-2) \n"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n  stack = []\n  for bracket in brackets:\n    if bracket == \"<\":\n      stack.append(bracket)\n    elif bracket == \">\":\n      if not stack:\n        return False\n      stack.pop()\n  return not stack \n"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n  increasing = decreasing = True\n  for i in range(1, len(l)):\n    if l[i] < l[i-1]:\n      increasing = False\n    if l[i] > l[i-1]:\n      decreasing = False\n  return increasing or decreasing \n"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n  return sorted(set(l1) & set(l2)) \n"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n  i = 2\n  while i * i <= n:\n    if n % i:\n      i += 1\n    else:\n      n //= i\n  return n  \n"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n  return (n * (n + 1)) // 2 \n"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n  stack = []\n  for bracket in brackets:\n    if bracket == '(':\n      stack.append(bracket)\n    elif bracket == ')':\n      if not stack:\n        return False\n      stack.pop()\n  return not stack \n"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n  return [i * j for i, j in enumerate(xs[1:])]  \n"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n  if n == 0 or n == 1:\n    return 0\n  elif n == 2:\n    return 1\n  else:\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3) \n"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n  count = 0\n  if s[-1] == 'y' and s[-1].lower() == 'y':\n    count += 1\n  for char in s:\n    if char.lower() in 'aeiou':\n      count += 1\n  return count \n"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n  digits = str(x)\n  n = len(digits)\n  shift %= n\n  return digits[-shift:] + digits[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n  return sum([ord(c) for c in s if 'A' <= c <= 'Z']) \n"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n  apples = int(s.split(\" apples and \")[0])\n  oranges = int(s.split(\" oranges\")[0].split(\" and \")[1])\n  return n - apples - oranges \n"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n  if not arr:\n    return []\n  min_even = float('inf')\n  index = len(arr)\n  for i, num in enumerate(arr):\n    if num % 2 == 0 and num < min_even:\n      min_even = num\n      index = i\n  return [min_even, index] if min_even != float('inf') else [] \n"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n  counts = {}\n  for num in lst:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n  for num in lst:\n    if counts[num] >= num and num > 0:\n      return num\n  return -1 \n"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n  sorted_lst = []\n  while lst:\n    min_val = min(lst)\n    lst.remove(min_val)\n    sorted_lst.append(min_val)\n    if lst:\n      max_val = max(lst)\n      lst.remove(max_val)\n      sorted_lst.append(max_val)\n  return sorted_lst \n"}
{"task_id": "HumanEval/71", "completion": "import math\ndef triangle_area(a, b, c):\n  if (a + b > c) and (a + c > b) and (b + c > a):\n    return round(math.sqrt(s*(s-a)*(s-b)*(s-c)),2)\n  else:\n    return -1 \n  \n  \ns = (a+b+c)/2  \n"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n  return q == q[::-1] and sum(q) <= w \n"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n  n = len(arr)\n  l, r = 0, n-1\n  changes = 0\n  while l < r:\n    if arr[l] != arr[r]:\n      changes += 1\n    l += 1\n    r -= 1\n  return changes \n"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n  t1 = sum(len(x) for x in lst1)\n  t2 = sum(len(x) for x in lst2)\n  if t1 < t2:\n    return lst1\n  elif t2 < t1:\n    return lst2\n  else:\n    return lst1  \n"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n  def is_prime(n):\n    if n <= 1:\n      return False\n    for i in range(2, int(n**0.5) + 1):\n      if n % i == 0:\n        return False\n    return True\n  count = 0\n  for i in range(2, int(a**0.5)+1):\n    if is_prime(i) and a % i == 0:\n      for j in range(2, int(a//i)**0.5 + 1):\n        if is_prime(j) and (a//i) % j == 0:\n          count += 1\n  return count == 2\n"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n  return n**int(x**0.5) == x\n"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n  return int(a**(1/3))**3 == a \n"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n  count = 0\n  for i in num:\n    if i in '2357BD' :\n      count += 1\n  return count \n"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n  return \"db\" + bin(decimal)[2:].zfill(8) + \"db\" \n"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n  if len(s) < 3:\n    return False\n  for i in range(len(s)-2):\n    if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n      return False\n  return True \n"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n  return ['A+' if g == 4.0 else 'A' if g > 3.7 else 'A-' if g > 3.3 else 'B+' if g > 3.0 else 'B' if g > 2.7 else 'B-' if g > 2.3 else 'C+' if g > 2.0 else 'C' if g > 1.7 else 'C-' if g > 1.3 else 'D+' if g > 0.7 else 'D' if g > 0.0 else 'E' for g in grades]\n"}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n  length = len(string)\n  if length <= 1:\n    return False\n  for i in range(2, int(length**0.5) + 1):\n    if length % i == 0:\n      return False\n  return True \n"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n  count = 0\n  for i in range(10**n - 1):\n    if str(i)[0] == '1' or str(i)[-1] == '1':\n      count += 1\n  return count\n"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n  b = bin(N)[2:]\n  return str(sum([int(i) for i in b])) \n"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n  sum = 0\n  for i in range(1, len(lst), 2):\n    if lst[i] % 2 == 0:\n      sum += lst[i]\n  return sum \n"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n  return ' '.join([\"\".join(sorted(word)) for word in s.split()])  \n"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n  res = []\n  for i in range(len(lst)):\n    for j in range(len(lst[i]) - 1, -1, -1):\n      if lst[i][j] == x:\n        res.append((i, j))\n  res.sort(key=lambda x: x[0])\n  return res \n"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n  if (array[0] + array[-1]) % 2 == 0:\n    return sorted(array, reverse=True)\n  else:\n    return sorted(array) \n"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n  result = ''\n  for char in s:\n    if char.isalpha():\n      start = ord('a') if char.islower() else ord('A')\n      shifted_char = chr((ord(char) - start + 4) % 26 + start)\n    else:\n      shifted_char = char\n    result += shifted_char\n  return result  \n"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n  if len(lst) < 2:\n    return None\n  s = sorted(lst)\n  return s[1] \n"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n  return sum(1 for sentence in S.split('.|?|!') if sentence.strip().startswith(\"I\")) \n"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n  return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y) \n"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n  result = []\n  for char in message:\n    if char.isalpha():\n      if char in 'aeiouAEIOU':\n        shifted_char = chr((ord(char) - ord('a' if char.islower() else 'A') + 2) % 26 + ord('a' if char.islower() else 'A'))\n      else:\n        shifted_char = char\n      result.append(shifted_char.swapcase())\n    else:\n      result.append(char)\n  return ''.join(result)   \n"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n  def is_prime(n):\n    if n <= 1:\n      return False\n    for i in range(2, int(n**0.5) + 1):\n      if n % i == 0:\n        return False\n    return True\n  max_prime = -1\n  for num in lst:\n    if is_prime(num) and num > max_prime:\n      max_prime = num\n  sum_of_digits = 0\n  for digit in str(max_prime):\n    sum_of_digits += int(digit)\n  return sum_of_digits \n"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n  if not dict:\n    return False\n  case = dict.keys()[0].islower()\n  for key in dict:\n    if case != key.islower():\n      return False\n  return True  \n"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n  if n <= 1:\n    return []\n  primes = []\n  for i in range(2, n):\n    is_prime = True\n    for j in range(2, int(i**0.5) + 1):\n      if i % j == 0:\n        is_prime = False\n        break\n    if is_prime:\n      primes.append(i)\n  return primes \n"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n  return (a % 10) * (b % 10) \n"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n  count = 0\n  for i in range(len(s)):\n    if i % 2 == 0 and s[i] in 'AEIUO':\n      count += 1\n  return count \n"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n  return int(round(float(value), 0))\n"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n  stones = [n]\n  i = n\n  while i <= n + 2 * (n % 2):\n    i += 2 if n % 2 == 0 else 2\n    stones.append(i)\n  return stones \n"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n  return s.split(\",\").split()  \n"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n  for i in range(x, y+1):\n    if i % 2 == 0 and (y - i) == 0 or i == y:\n      return i\n  return -1 \n"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n  if n > m:\n    return -1\n  return bin(round(sum(range(n, m + 1)) / (m - n + 1))) \n"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n  return sorted([i for i in x if all(int(d) % 2 != 0 for d in str(i))]) \n"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n  arr = sorted([x for x in arr if 1 <= x <= 9])\n  arr.reverse()\n  return [str(x) for x in arr]\n"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n  return [1 if i == 1 else sum(range(1, i + 1)) if i % 2 else factorial(i) for i in range(1, n + 1)]\n  \ndef factorial(i):\n  if i == 0:\n    return 1\n  return i * factorial(i - 1) \n"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n  even = 0\n  odd = 0\n  for i in range(1, n + 1):\n    if str(i) == str(i)[::-1] and i % 2 == 0:\n      even += 1\n    elif str(i) == str(i)[::-1] and i % 2 != 0:\n      odd += 1\n  return (even, odd) \n"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n  count = 0\n  for num in arr:\n    sum_of_digits = 0\n    for digit in str(abs(num)):\n      sum_of_digits += int(digit)\n    if sum_of_digits > 0:\n      count += 1\n  return count \n"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n  if len(arr) == 0:\n    return True\n  n = len(arr)\n  for i in range(n):\n    temp = arr[i]\n    for j in range(i + 1, n):\n      if temp > arr[j]:\n        return False\n  return True \n"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n  for i in range(len(lst1)):\n    if lst1[i] % 2 != 0:\n      for j in range(len(lst2)):\n        if lst2[j] % 2 == 0:\n          lst1[i], lst2[j] = lst2[j], lst1[i]\n          return \"YES\"\n  return \"NO\"  \n"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n  result = {}\n  for word in test.split():\n    if word in result:\n      result[word] += 1\n    else:\n      result[word] = 1\n  max_count = max(result.values())\n  return {word: count for word, count in result.items() if count == max_count} \n"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n  result = ''.join([x for x in s if x not in c])\n  return result, result == result[::-1] \n"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n  return [\"the number of odd elements \" + str(sum([1 for x in s if int(x) % 2 != 0])) + \"n the str\" + str(sum([1 for x in s if int(x) % 2 != 0])) + \"ng \" + str(sum([1 for x in s if int(x) % 2 != 0])) + \" of the \" + str(sum([1 for x in s if int(x) % 2 != 0])) + \"nput.\" for s in lst] \n"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n  min_sum = nums[0]\n  current_sum = nums[0]\n  for i in range(1, len(nums)):\n    current_sum = min(nums[i], current_sum + nums[i])\n    min_sum = min(min_sum, current_sum)\n  return min_sum \n"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n  rows = len(grid)\n  cols = len(grid[0])\n  total_fills = 0\n  for row in range(rows):\n    for col in range(cols):\n      if grid[row][col]:\n        total_fills += 1\n  return math.ceil(total_fills / capacity) \n"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n  return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x))\n"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n  vowels = 'aeiouAEIOU'\n  words = s.split()\n  result = []\n  for word in words:\n    consonant_count = 0\n    for letter in word:\n      if letter not in vowels:\n        consonant_count += 1\n    if consonant_count == n:\n      result.append(word)\n  return result  \n"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n  vowels = 'aeiouAEIOU'\n  for i in range(len(word) - 2, -1, -1):\n    if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n      return word[i]\n  return '' \n"}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n  open_count = 0\n  for char in lst[0] + lst[1]:\n    if char == '(':\n      open_count += 1\n    elif char == ')':\n      open_count -= 1\n    if open_count < 0:\n      return 'No'\n  return 'Yes' if open_count == 0 else 'No' \n"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n  return sorted(arr)[-k:] \n"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n  sum = 0\n  for i in range(1, len(lst), 2):\n    if lst[i] % 2 != 0:\n      sum += lst[i]\n  return sum  \n"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n  total = 0\n  for i in range(k):\n    if 10 <= arr[i] <= 99:\n      total += arr[i]\n  return total \n"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n  res = []\n  while n != 1:\n    if n % 2 != 0:\n      res.append(n)\n    if n % 2 == 0:\n      n //= 2\n    else:\n      n = 3 * n + 1\n  if n == 1:\n    res.append(1)\n  res.sort()\n  return res  \n"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n  if not date:\n    return False\n  try:\n    month, day, year = map(int, date.split('-'))\n  except:\n    return False\n  if month < 1 or month > 12:\n    return False\n  if month in (1, 3, 5, 7, 8, 10, 12) and day < 1 or day > 31:\n    return False\n  elif month in (4, 6, 9, 11) and day < 1 or day > 30:\n    return False\n  elif month == 2 and day < 1 or day > 29:\n    return False\n  return True\n"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n  if \" \" in txt:\n    return txt.split()\n  elif \",\" in txt:\n    return txt.split(\",\")\n  else:\n    return sum(1 for i in range(ord('a'), ord('z')+1) if (i-ord('a'))%2!=0 and txt.lower().count(chr(i))) \n"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n  for i in range(len(lst)-1):\n    if lst[i] > lst[i+1]:\n      return False\n    if i > 0 and lst[i-1] == lst[i] and lst[i] == lst[i+1]:\n      return False\n  return True \n"}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n  start = max(interval1[0], interval2[0])\n  end = min(interval1[1], interval2[1])\n  if start <= end:\n    length = end - start + 1\n    def is_prime(n):\n      if n <= 1:\n        return False\n      for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n          return False\n      return True\n    return \"YES\" if is_prime(length) else \"NO\"\n  return \"NO\" \n"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n  if not arr:\n    return None\n  prod = 1\n  sum = 0\n  for x in arr:\n    if x > 0:\n      prod *= 1\n    elif x < 0:\n      prod *= -1\n    else:\n      prod *= 0\n    sum += abs(x)\n  return sum * prod \n"}
{"task_id": "HumanEval/129", "completion": "import itertools\n\ndef minPath(grid, k):\n  n = len(grid)\n  paths = []\n  for start_row in range(n):\n    for start_col in range(n):\n      for path in itertools.combinations(grid[row][col] for row in range(n) for col in range(n), k):\n        paths.append(path)\n  paths.sort()\n  return paths[0] \n"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n  a = [3, 1, 2]\n  for i in range(3, n+1):\n    if i % 2 == 0:\n      a.append(1 + i / 2)\n    else:\n      a.append(a[i-1] + a[i-2] + a[i-3])\n  return a\n"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n  product = 1\n  found_odd = False\n  while n > 0:\n    digit = n % 10\n    if digit % 2 != 0:\n      product *= digit\n      found_odd = True\n    n //= 10\n  return product if found_odd else 0\n"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n  count = 0\n  for char in string:\n    if char == '[':\n      count += 1\n    elif char == ']':\n      count -= 1\n    if count < 0:\n      return True\n  return False  \n"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n  return sum([round(x, up=True)**2 for x in lst]) \n"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n  return txt.strip().endswith(chr(ord('a') <= ord(txt[-1]) <= ord('z') or ord('A') <= ord(txt[-1]) <= ord('Z'))) and txt.rstrip(' ') != txt  \n"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n  for i in range(1, len(arr)):\n    if arr[i] < arr[i-1]:\n      return i\n  return -1\n"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n  largest_neg = None\n  smallest_pos = None\n  for num in lst:\n    if num < 0 and largest_neg is None or num > largest_neg:\n      largest_neg = num\n    if num > 0 and smallest_pos is None or num < smallest_pos:\n      smallest_pos = num\n  return (largest_neg, smallest_pos) \n"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n  if a == b:\n    return None\n  if isinstance(a, str) and isinstance(b, float):\n    return max(float(a.replace(\",\", \".\")), b)\n  if isinstance(a, float) and isinstance(b, str):\n    return max(a, float(b.replace(\",\", \".\")))\n  if isinstance(a, str) and isinstance(b, str):\n    return max(float(a.replace(\",\", \".\")), float(b.replace(\",\", \".\")))\n  return max(a, b) \n"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n  for i in range(2, n//2 + 1, 2):\n    for j in range(i, (n-i)//2 + 1, 2):\n      for k in range(j, (n-i-j)//2 + 1, 2):\n        if i + j + k + (n - i - j - k) == n:\n          return True\n  return False\n"}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n  result = 1\n  for i in range(1, n + 1):\n    result *= factorial(i)\n  return result\n\ndef factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1) \n"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n  result = []\n  i = 0\n  while i < len(text):\n    if text[i] == ' ':\n      if i + 1 < len(text) and text[i + 1] == ' ' and i + 2 < len(text) and text[i + 2] == ' ':\n        result.append('-') \n        i += 3\n      else:\n        result.append('_')\n        i += 1\n    else:\n      result.append(text[i])\n      i += 1  \n  return ''.join(result) \n"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n  if file_name.count('.') != 1:\n    return 'No'\n  parts = file_name.split('.')\n  if not parts[0] or not parts[0][0].isalpha():\n    return 'No'\n  if parts[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n  if file_name.count('0123456789') > 3:\n    return 'No'\n  return 'Yes' \n"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n  for i in range(len(lst)):\n    if i % 3 == 0:\n      lst[i] **= 2\n    if i % 4 == 0 and i % 3 != 0:\n      lst[i] **= 3\n  return sum(lst) \n"}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n  words = sentence.split()\n  prime_words = []\n  for word in words:\n    if all(word % i for i in range(2, int(word**0.5) + 1)):\n      prime_words.append(word)\n  return \" \".join(prime_words) \n"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n  x_num = int(x.split('/')[0])\n  x_den = int(x.split('/')[1])\n  n_num = int(n.split('/')[0])\n  n_den = int(n.split('/')[1])\n  return (x_num * n_den) % (x_den * n_num) == 0 \n"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n  return sorted(nums, key=lambda x: sum(int(digit) for digit in str(abs(x))), key=lambda x: nums.index(x))\n"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n  count = 0\n  for num in nums:\n    if num > 10:\n      num_str = str(abs(num))\n      if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n        count += 1\n  return count \n"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n  a = [(i*i - i + 1) for i in range(1, n+1)]\n  count = 0\n  for i in range(n-2):\n    for j in range(i+1, n-1):\n      for k in range(j+1, n):\n        if (a[i] + a[j] + a[k]) % 3 == 0:\n          count += 1\n  return count \n"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n  planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  if planet1 in planets and planet2 in planets:\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n      return tuple(planets[index1+1:index2])\n    else:\n      return tuple(planets[index2+1:index1])\n  else:\n    return () \n"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n  return sorted([x for x in lst if len(x) % 2 == 0], key=lambda word: (len(word), word))  \n"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n  if n > 1:\n    for i in range(2, int(n**0.5) + 1):\n      if (n % i) == 0:\n        return y\n    return x\n  else:\n    return y \n"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n  sum = 0\n  for x in lst:\n    if isinstance(x, int) and x > 0 and x%2 != 0:\n      sum += x**2\n  return sum  \n"}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n  return [abs(g-s) for g,s in zip(guess,game)]\n"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n  strongest_extension = ''\n  max_strength = float('-inf')\n  for extension in extensions:\n    cap = sum(1 for c in extension if c.isupper())\n    sm = sum(1 for c in extension if c.islower())\n    strength = cap - sm\n    if strength > max_strength:\n      max_strength = strength\n      strongest_extension = extension\n  return f'{class_name}.{strongest_extension}'  \n"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n  for i in range(len(b)):\n    if b[i:] + b[:i] in a:\n      return True\n  return False \n"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n  even_count = 0\n  odd_count = 0\n  for digit in str(abs(num)):\n    if int(digit) % 2 == 0:\n      even_count += 1\n    else:\n      odd_count += 1\n  return (even_count, odd_count) \n"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n  roman_values = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i']\n  int_values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n  roman_number = ''\n  i = 0\n  while number > 0:\n    for _ in range(number // int_values[i]):\n      roman_number += roman_values[i]\n      number -= int_values[i]\n    i += 1\n  return roman_number.lower()\n"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n  return (a**2 + b**2 == c**2) \n"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n  max_unique = 0\n  result = \"\"\n  for word in words:\n    unique_count = len(set(word))\n    if unique_count > max_unique:\n      max_unique = unique_count\n      result = word\n  return result  \n"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n  total_eaten = number + min(need, remaining)\n  left = remaining - min(need, remaining)\n  return [total_eaten, left] \n"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n  expression = str(operand[0])\n  for i in range(len(operator)):\n    expression += operator[i] + str(operand[i+1])\n  return eval(expression) \n"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n  if not s.isalpha():\n    return s[::-1]\n  result = []\n  for char in s:\n    if char.isalpha():\n      result.append(char.swapcase())\n    else:\n      result.append(char)\n  return ''.join(result) \n"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n  if text == \"\":\n    return None\n  return hashlib.md5(text.encode()).hexdigest() \n"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n  return sorted([num for num in range(a, b+1) if num % 2 == 0]) \n"}
