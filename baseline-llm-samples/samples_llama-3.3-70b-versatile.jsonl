{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] <= threshold:\n            return True\n    return False\n\ndef main():\n    print(has_close_elements([1.0, 2.0, 3.0], 0.5))  # False\n    print(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # True\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    current_group = \"\"\n    balance = 0\n    for char in paren_string:\n        current_group += char\n        if char == \"(\":\n            balance += 1\n        elif char == \")\":\n            balance -= 1\n        if balance == 0:\n            groups.append(current_group)\n            current_group = \"\"\n    return groups\n\nprint(separate_paren_groups('( ) (( )) (( )( ))'))"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\ndef main():\n    print(below_zero([1, 2, 3])) \n    print(below_zero([1, 2, -4, 5]))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/4", "completion": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = statistics.mean(numbers)\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    return sum(absolute_deviations) / len(numbers)\n\ndef main():\n    numbers = [1.0, 2.0, 3.0, 4.0]\n    print(mean_absolute_deviation(numbers))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result\n\ndef main():\n    print(intersperse([], 4))\n    print(intersperse([1, 2, 3], 4))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    \n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        \n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        \n        result.append(max_depth)\n    \n    return result\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n\nprint(filter_by_substring([], 'a'))\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))"}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nimport math\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = sum(numbers)\n    product_result = math.prod(numbers) if numbers else 1\n    return sum_result, product_result\n\nprint(sum_product([]))\nprint(sum_product([1, 2, 3, 4]))"}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))"}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join('0' if x == y else '1' for x, y in zip(a, b))"}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\n\nprint(longest([]))\nprint(longest(['a', 'b', 'c']))\nprint(longest(['a', 'bb', 'ccc']))"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]\n\nprint(all_prefixes('abc'))"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.casefold()))"}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1,\n    }\n    music_list = music_string.split()\n    beats = []\n    i = 0\n    while i < len(music_list):\n        if music_list[i] == 'o' and i < len(music_list) - 1 and music_list[i + 1] == '|':\n            beats.append(notes['o|'])\n            i += 2\n        elif music_list[i] == '.' and i < len(music_list) - 1 and music_list[i + 1] == '|':\n            beats.append(notes['.|'])\n            i += 2\n        else:\n            beats.append(notes['o'])\n            i += 1\n    return beats\n\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)"}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\nimport itertools\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = ()\n\n    for pair in itertools.combinations(numbers, 2):\n        diff = abs(pair[0] - pair[1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = tuple(sorted(pair))\n\n    return closest_pair\n\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))"}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(n - min_val) / (max_val - min_val) for n in numbers]\n\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))"}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n\ndef main():\n    print(filter_integers(['a', 3.14, 5]))\n    print(filter_integers([1, 2, 3, 'abc', {}, []]))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\nprint(factorize(8))  # [2, 2, 2]\nprint(factorize(25))  # [5, 5]\nprint(factorize(70))  # [2, 5, 7]"}
{"task_id": "HumanEval/26", "completion": "from typing import List\nfrom collections import OrderedDict\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = OrderedDict()\n    for num in numbers:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return [num for num in numbers if count[num] == 1]\n\nprint(remove_duplicates([1, 2, 3, 2, 4])) "}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(char.upper() if char.islower() else char.lower() for char in string)"}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    result = \"\"\n    for string in strings:\n        result += string\n    return result\n\ndef concatenate_alt(strings: List[str]) -> str:\n    return \"\".join(strings)\n\n# Test cases\nprint(concatenate([])) \nprint(concatenate(['a', 'b', 'c']))\nprint(concatenate_alt([])) \nprint(concatenate_alt(['a', 'b', 'c']))"}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n\nprint(get_positive([-1, 2, -4, 5, 6]))\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))"}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(not is_prime(6))\nprint(is_prime(101))\nprint(is_prime(11))\nprint(is_prime(13441))\nprint(is_prime(61))\nprint(not is_prime(4))\nprint(not is_prime(1))"}
{"task_id": "HumanEval/32", "completion": "import math\nimport numpy as np\nfrom scipy.optimize import fsolve\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    if len(xs) % 2 == 1:\n        raise ValueError(\"Number of coefficients must be even\")\n    if xs[-1] == 0:\n        return \"No solution\"\n    return fsolve(poly, -1, args=(xs,))[0]"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    values_at_third_indices = [l[i] for i in third_indices]\n    sorted_values = sorted(values_at_third_indices)\n    result = l[:]\n    for i, value in zip(third_indices, sorted_values):\n        result[i] = value\n    return result\n\ndef main():\n    print(sort_third([1, 2, 3]))\n    print(sort_third([5, 6, 3, 4, 8, 9, 2]))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n\nprint(max_element([1, 2, 3]))\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list) -> list:\n    even = sorted([l[i] for i in range(0, len(l), 2)])\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result"}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                if l[i] != l[left] and l[left] != l[right] and l[i] != l[right]:\n                    return True\n                else:\n                    left += 1\n                    right -= 1\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen and -num != num:\n            return True\n        seen.add(num)\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(map(str, digits[::-1]))"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n < 0:\n        return -1\n    elif n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n//2]\n    else:\n        return (sorted_l[n//2 - 1] + sorted_l[n//2]) / 2"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    text = text.lower()\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(i < t for i in l)"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))\nprint(same_chars('abcd', 'dddddddabc'))\nprint(same_chars('dddddddabc', 'abcd'))\nprint(same_chars('eabcd', 'dddddddabc'))\nprint(same_chars('abcd', 'dddddddabce'))\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef main():\n    print(fib(10))  # 55\n    print(fib(1))   # 1\n    print(fib(8))   # 21\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int) -> int:\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    max_prime = None\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            if max_prime is None or i > max_prime:\n                max_prime = i\n    return max_prime\n\ndef largest_prime_factor_optimized(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nprint(largest_prime_factor(13195))\nprint(largest_prime_factor(2048))\nprint(largest_prime_factor_optimized(13195))\nprint(largest_prime_factor_optimized(2048))"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i * x for i, x in enumerate(xs[1:], 1)]"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\ndef fibfib_memo(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def fib(n):\n        if n not in memo:\n            memo[n] = fib(n-1) + fib(n-2) + fib(n-3)\n        return memo[n]\n    return fib(n)"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    count = 0\n    vowels = 'aeiouAEIOU'\n    for i, char in enumerate(s):\n        if char in vowels:\n            count += 1\n        elif char.lower() == 'y' and i == len(s) - 1:\n            count += 1\n    return count\n\nprint(vowels_count(\"abcde\"))\nprint(vowels_count(\"ACEDY\"))\nprint(vowels_count(\"aeiou\"))\nprint(vowels_count(\"AEIOU\"))\nprint(vowels_count(\"aAEIOUY\"))\nprint(vowels_count(\"bcd\"))"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    return x_str[-shift:] + x_str[:-shift]\n\nprint(circular_shift(12, 1)) \nprint(circular_shift(12, 2))"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    apples = int(s.split(' apples')[0])\n    oranges = int(s.split(' and ')[1].split(' oranges')[0])\n    return n - apples - oranges"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_nodes = [(node, index) for index, node in enumerate(arr) if node % 2 == 0]\n    if not even_nodes:\n        return []\n    min_even_node = min(even_nodes, key=lambda x: (x[0], x[1]))\n    return [min_even_node[0], min_even_node[1]]\n\ndef main():\n    print(pluck([4,2,3]))  # [2, 1]\n    print(pluck([1,2,3]))  # [2, 1]\n    print(pluck([]))       # []\n    print(pluck([5, 0, 3, 0, 4, 2]))  # [0, 1]\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    result = -1\n    for num, count in freq.items():\n        if count >= num:\n            result = max(result, num)\n    return result"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_list = []\n    remaining = lst[:]\n    asc = True\n    while remaining:\n        if asc:\n            next_val = min(remaining)\n        else:\n            next_val = max(remaining)\n        sorted_list.append(next_val)\n        remaining.remove(next_val)\n        asc = not asc\n    return sorted_list\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n\nprint(smallest_change([1,2,3,5,4,7,9,6]))\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))\nprint(smallest_change([1, 2, 3, 2, 1]))"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    return lst1 if sum1 <= sum2 else lst2"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False\n\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(10))  # False"}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return x == 1\n    p = round(math.log(x, n))\n    return n ** p == x\n\ndef main():\n    print(is_simple_power(1, 4)) \n    print(is_simple_power(2, 2)) \n    print(is_simple_power(8, 2)) \n    print(is_simple_power(3, 2)) \n    print(is_simple_power(3, 1)) \n    print(is_simple_power(5, 3))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    x = round(abs(a) ** (1/3))\n    return x ** 3 == abs(a) or (-x) ** 3 == a"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count\n\nprint(hex_key(\"AB\"))  # 1\nprint(hex_key(\"1077E\"))  # 2\nprint(hex_key(\"ABED1A33\"))  # 4\nprint(hex_key(\"123456789ABCDEF0\"))  # 6\nprint(hex_key(\"2020\"))  # 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n\ndef main():\n    print(decimal_to_binary(15))   # returns \"db1111db\"\n    print(decimal_to_binary(32))   # returns \"db100000db\"\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n\ndef main():\n    print(is_happy('a')) \n    print(is_happy('aa')) \n    print(is_happy('abcd')) \n    print(is_happy('aabb')) \n    print(is_happy('adb')) \n    print(is_happy('xyy')) \n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Example usage\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n\nprint(prime_length('Hello')) \nprint(prime_length('abcdcba')) \nprint(prime_length('kittens')) \nprint(prime_length('orange'))"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    def count_start_with_1(n):\n        return 9 * (10 ** (n - 1))\n\n    def count_end_with_1(n):\n        return 10 ** (n - 1) - (10 ** (n - 2)) if n > 1 else 1\n\n    def count_start_and_end_with_1(n):\n        return 8 * (10 ** (n - 2)) if n > 1 else 0\n\n    total_count = count_start_with_1(n) + count_end_with_1(n) - count_start_and_end_with_1(n)\n    return total_count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]\n    total_sum = sum(int(digit) for digit in binary)\n    return bin(total_sum)[2:]\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_at_odd = [num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 == 0]\n    return sum(even_at_odd)"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word, key=lambda x: (x.isalpha(), not x.isupper(), x))) if word.strip('!?.:,;') else ''.join(sorted(word)) for word in s.split(' '))\n\ndef main():\n    print(anti_shuffle('Hi'))\n    print(anti_shuffle('hello'))\n    print(anti_shuffle('Hello World!!!'))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coordinates = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]\n    sorted_coordinates = sorted(coordinates, key=lambda x: (x[0], -x[1]))\n    return sorted_coordinates"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if sum(array[:1] + array[-1:]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + 4) % 26 + ascii_offset)\n        else:\n            result += char\n    return result"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    unique_lst = sorted(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    return unique_lst[1]"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    return sum(1 for sentence in sentences if sentence.strip() and sentence.strip().startswith('I'))\n\nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                if char.islower():\n                    if char == 'y':\n                        result += chr(ord(char) - 24)\n                    elif char == 'z':\n                        result += chr(ord(char) - 24)\n                    else:\n                        result += chr(ord(char) + 2)\n                else:\n                    if char == 'Y':\n                        result += chr(ord(char) - 24)\n                    elif char == 'Z':\n                        result += chr(ord(char) - 24)\n                    else:\n                        result += chr(ord(char) + 2)\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result\n\nprint(encode('test'))\nprint(encode('This is a message'))"}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    max_prime = max((num for num in lst if is_prime(num)), default=None)\n    if max_prime is None:\n        return 0\n    return sum_of_digits(max_prime)\n\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nprint(skjkasdkd([0,81,12,3,1,21]))\nprint(skjkasdkd([0,8,1,2,1,7]))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    if not d:\n        return False\n    if all(isinstance(k, str) and k.islower() for k in d):\n        return True\n    if all(isinstance(k, str) and k.isupper() for k in d):\n        return True\n    return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) \nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) \nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) \nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) \nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))"}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nprint(count_up_to(5)) \nprint(count_up_to(11)) \nprint(count_up_to(0)) \nprint(count_up_to(20)) \nprint(count_up_to(1)) \nprint(count_up_to(18))"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    vowels = 'AEIOU'\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count\n\nprint(count_upper('aBCdEf'))  # returns 1\nprint(count_upper('abcdefg'))  # returns 0\nprint(count_upper('dBBE'))  # returns 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num - int(num) == 0.5:\n        return int(num) + 1 if num > 0 else int(num) - 1\n    return round(num)\n\nprint(closest_integer(\"10\"))\nprint(closest_integer(\"15.3\"))\nprint(closest_integer(\"14.5\"))\nprint(closest_integer(\"-14.5\"))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    while len(pile) < n:\n        if n % 2 == 0:\n            n += 2\n            pile.append(n)\n        else:\n            n += 2\n            pile.append(n)\n    return pile\n\nprint(make_a_pile(3))"}
{"task_id": "HumanEval/101", "completion": "import re\n\ndef words_string(s):\n    return re.findall(r'\\w+', s)\n\nprint(words_string(\"Hi, my name is John\")) \nprint(words_string(\"One, two, three, four, five, six\"))"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if y < x:\n        return -1\n    return max((i for i in range(x, y + 1) if i % 2 == 0), default=-1)"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    return bin(round(avg))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(digit) % 2 == 0 for digit in str(n))\n\n    result = [num for num in x if not has_even_digit(num)]\n    return sorted(result)\n\nprint(unique_digits([15, 33, 1422, 1]))\nprint(unique_digits([152, 323, 1422, 10]))"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [x for x in arr if 1 <= x <= 9]\n    arr.sort()\n    arr = arr[::-1]\n    return [names[x - 1] for x in arr]\n\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nprint(by_length(arr))\narr = []\nprint(by_length(arr))\narr = [1, -1, 55]\nprint(by_length(arr))"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(x):\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    def sum_to_i(x):\n        return sum(range(1, x + 1))\n\n    return [factorial(i) if i % 2 == 0 else sum_to_i(i) for i in range(1, n + 1)]\n\nprint(f(5))"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n\nprint(even_odd_palindrome(3))\nprint(even_odd_palindrome(12))"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n).replace('-', ''))\n\n    return sum(1 for num in arr if sum_of_digits(abs(num)) > 0 if num >= 0 else sum_of_digits(abs(num)) - abs(int(str(num)[0])) > 0)\n\ndef main():\n    print(count_nums([]) == 0)\n    print(count_nums([-1, 11, -11]) == 1)\n    print(count_nums([1, 1, 2]) == 3)\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return True\n    return False"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_in_lst2 = [num for num in lst2 if num % 2 == 0]\n    odd_in_lst1 = [num for num in lst1 if num % 2 != 0]\n    if len(odd_in_lst1) <= len(even_in_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))"}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    test = test.split()\n    letter_count = {}\n    for letter in test:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    max_count = max(letter_count.values())\n    return {k: v for k, v in letter_count.items() if v == max_count}\n\nprint(histogram('a b c') == {'a': 1, 'b': 1, 'c': 1})\nprint(histogram('a b b a') == {'a': 2, 'b': 2})\nprint(histogram('a b c a b') == {'a': 2, 'b': 2})\nprint(histogram('b b b b a') == {'b': 4})\nprint(histogram('') == {})"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return [f'the number of odd elements {sum(int(digit) % 2 for digit in string)}n the str{sum(int(digit) % 2 for digit in string)}ng {sum(int(digit) % 2 for digit in string)} of the {sum(int(digit) % 2 for digit in string)}nput.' for string in lst]\n\nprint(odd_count(['1234567']))\nprint(odd_count(['3',\"11111111\"]))"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            min_sum = min(min_sum, sum(nums[i:j+1]))\n    return min_sum\n\ndef minSubArraySum2(nums):\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            min_sum = min(min_sum, current_sum)\n    return min_sum\n\ndef minSubArraySum3(nums):\n    min_sum = nums[0]\n    current_sum = nums[0]\n    for i in range(1, len(nums)):\n        current_sum = min(nums[i], current_sum + nums[i])\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\n# Test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # 1\nprint(minSubArraySum([-1, -2, -3]))  # -6\nprint(minSubArraySum2([2, 3, 4, 1, 2, 4]))  # 1\nprint(minSubArraySum2([-1, -2, -3]))  # -6\nprint(minSubArraySum3([2, 3, 4, 1, 2, 4]))  # 1\nprint(minSubArraySum3([-1, -2, -3]))  # -6"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total = 0\n    for row in grid:\n        total += sum(row)\n    return math.ceil(total / capacity)"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1') if x >= 0 else bin(abs(x)).count('1'), abs(x)))"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    def count_consonants(word):\n        vowels = 'aeiouAEIOU'\n        return sum(1 for char in word if char not in vowels)\n\n    return [word for word in s.split() if count_consonants(word) == n]\n\nprint(select_words(\"Mary had a little lamb\", 4)) \nprint(select_words(\"Mary had a little lamb\", 3)) \nprint(select_words(\"simple white space\", 2)) \nprint(select_words(\"Hello world\", 4)) \nprint(select_words(\"Uncle sam\", 3))"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and i < len(word) - 1 and word[i+1] not in vowels:\n            return word[i]\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n\nprint(get_closest_vowel(\"yogurt\"))  # \"u\"\nprint(get_closest_vowel(\"FULL\"))  # \"U\"\nprint(get_closest_vowel(\"quick\"))  # \"\"\nprint(get_closest_vowel(\"ab\"))  # \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            elif c == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(sorted(arr, reverse=True)[:k])\n\ndef main():\n    print(maximum([-3, -4, 5], 3))  # Output: [-3, -4, 5]\n    print(maximum([4, -4, 4], 2))   # Output: [4, 4]\n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 1 and lst[i] % 2 == 1)"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    def collatz(n):\n        sequence = [n]\n        while n != 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                n = 3 * n + 1\n            sequence.append(n)\n        return sequence\n\n    sequence = collatz(n)\n    odd_numbers = sorted([num for num in sequence if num % 2 != 0])\n    return odd_numbers\n\ndef main():\n    print(get_odd_collatz(5))  # prints: [1, 5]\n    print(get_odd_collatz(10)) # prints: [1]\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n\ndef valid_date(date):\n    try:\n        if len(date) != 10:\n            return False\n        if date[2] != '-' or date[5] != '-':\n            return False\n        month, day, year = int(date[:2]), int(date[3:5]), int(date[6:])\n        if month < 1 or month > 12:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day < 1 or day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        datetime(year, month, day)\n        return True\n    except ValueError:\n        return False\n\nprint(valid_date('03-11-2000'))  # True\nprint(valid_date('15-01-2012'))  # False\nprint(valid_date('04-0-2040'))   # False\nprint(valid_date('06-04-2020'))   # True\nprint(valid_date('06/04/2020'))    # False"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for i, c in enumerate(txt):\n            if c.islower() and i % 2 != 0:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    for num in set(lst):\n        if lst.count(num) > 2:\n            return False\n    return True\n\nprint(is_sorted([5])) \nprint(is_sorted([1, 2, 3, 4, 5])) \nprint(is_sorted([1, 3, 2, 4, 5])) \nprint(is_sorted([1, 2, 3, 4, 5, 6])) \nprint(is_sorted([1, 2, 3, 4, 5, 6, 7])) \nprint(is_sorted([1, 3, 2, 4, 5, 6, 7])) \nprint(is_sorted([1, 2, 2, 3, 3, 4])) \nprint(is_sorted([1, 2, 2, 2, 3, 4]))"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        if is_prime(end - start + 1):\n            return \"YES\"\n    return \"NO\"\n\nprint(intersection((1, 2), (2, 3))) \nprint(intersection((-1, 1), (0, 4))) \nprint(intersection((-3, -1), (-5, 5)))"}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num < 0:\n            sign *= -1\n        magnitude_sum += abs(num)\n    return sign * magnitude_sum\n\nprint(prod_signs([1, 2, 2, -4]) == -9)\nprint(prod_signs([0, 1]) == 1)\nprint(prod_signs([]) is None)"}
{"task_id": "HumanEval/129", "completion": "from collections import deque\nfrom itertools import product\n\ndef minPath(grid, k):\n    n, m = len(grid), len(grid[0])\n    dir = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    queue = deque([(x, y) for x in range(n) for y in range(m)])\n    visited = set()\n\n    res = []\n    def dfs(x, y, path):\n        nonlocal res\n        if len(path) == k:\n            if not res or path < res:\n                res = path[:]\n            return\n        for dx, dy in dir:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m:\n                dfs(nx, ny, path + [grid[nx][ny]])\n\n    for x in range(n):\n        for y in range(m):\n            dfs(x, y, [grid[x][y]])\n\n    return res\n\ndef minPath_bfs(grid, k):\n    n, m = len(grid), len(grid[0])\n    dir = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    paths = []\n    for i in range(n):\n        for j in range(m):\n            queue = deque([(i, j, [grid[i][j]])])\n            while queue:\n                x, y, path = queue.popleft()\n                if len(path) == k:\n                    paths.append(path)\n                elif len(path) < k:\n                    for dx, dy in dir:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < n and 0 <= ny < m:\n                            queue.append((nx, ny, path + [grid[nx][ny]]))\n    return min(paths)\n\nprint(minPath_bfs([[1,2,3], [4,5,6], [7,8,9]], 3))\nprint(minPath_bfs([[5,9,3], [4,1,6], [7,8,2]], 1))"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    def calculate_tri(number, memo):\n        if number == 1:\n            return 3\n        if number % 2 == 0:\n            return 1 + number / 2\n        if number in memo:\n            return memo[number]\n        result = calculate_tri(number - 1, memo) + calculate_tri(number - 2, memo) + calculate_tri(number + 1, memo)\n        memo[number] = result\n        return result\n\n    memo = {}\n    return [calculate_tri(i, memo) for i in range(1, n + 2)]\n\ndef tri(n):\n    sequence = [0, 3]\n    for i in range(2, n + 2):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            if i + 1 > len(sequence):\n                sequence.extend([0]*(i+2-len(sequence)))\n            sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\n    return sequence[1:]\n\nprint(tri(3))"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n        else:\n            if product == 1:\n                product = 0\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            if stack:\n                return True\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n    return False"}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(i)**2 for i in lst])\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if txt[-1].isalpha() and len(txt.split()) > 2:\n        if txt.split()[-1] == txt.split()[-1][-1]:\n            return True\n    if txt[-1].isalpha() and txt.split()[-1] == txt[-1]:\n        return True\n    return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\nprint(can_arrange([1,2,4,3,5]))\nprint(can_arrange([1,2,3]))"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_integers = [i for i in lst if i < 0]\n    positive_integers = [i for i in lst if i > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return largest_negative, smallest_positive\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7])) \nprint(largest_smallest_integers([])) \nprint(largest_smallest_integers([0]))"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n        a = float(a)\n    elif isinstance(a, int):\n        a = float(a)\n        \n    if isinstance(b, str):\n        b = b.replace(',', '.')\n        b = float(b)\n    elif isinstance(b, int):\n        b = float(b)\n        \n    if a > b:\n        if isinstance(a, float):\n            return str(a).replace('.', ',') if ',' in str(a) or ',' in str(b) else a\n        elif isinstance(a, int):\n            return int(a)\n    elif a < b:\n        if isinstance(b, float):\n            return str(b).replace('.', ',') if ',' in str(a) or ',' in str(b) else b\n        elif isinstance(b, int):\n            return int(b)\n    return None"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for a in range(2, n, 2):\n        for b in range(2, n, 2):\n            for c in range(2, n, 2):\n                for d in range(2, n, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False\n\ndef is_equal_to_sum_even_optimized(n):\n    for a in range(2, n//4 + 1, 2):\n        for b in range(a, (n-a)//3 + 1, 2):\n            for c in range(b, (n-a-b)//2 + 1, 2):\n                d = n - a - b - c\n                if d >= c and d % 2 == 0:\n                    return True\n    return False\n\nprint(is_equal_to_sum_even(4)) \nprint(is_equal_to_sum_even(6)) \nprint(is_equal_to_sum_even(8))"}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    text = text.replace(' ', '_')\n    return re.sub('_+', lambda m: '-' if len(m.group(0)) > 2 else '_', text)\n\nprint(fix_spaces(\"Example\")) \nprint(fix_spaces(\"Example 1\")) \nprint(fix_spaces(\" Example 2\")) \nprint(fix_spaces(\" Example   3\"))"}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    dot_count = file_name.count('.')\n    if dot_count != 1:\n        return 'No'\n\n    parts = file_name.split('.')\n    if not parts[0] or not parts[0][0].isalpha():\n        return 'No'\n\n    digits = sum(c.isdigit() for c in file_name)\n    if digits > 3:\n        return 'No'\n\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'\n\nprint(file_name_check(\"example.txt\")) \nprint(file_name_check(\"1example.dll\"))"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            new_lst.append(lst[i]**2)\n        elif i % 4 == 0:\n            new_lst.append(lst[i]**3)\n        else:\n            new_lst.append(lst[i])\n    return sum(new_lst)\n\nprint(sum_squares([1,2,3])) \nprint(sum_squares([])) \nprint(sum_squares([-1,-5,2,-1,-5]))"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\nprint(words_in_sentence(\"This is a test\"))\nprint(words_in_sentence(\"lets go for swimming\"))"}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    frac_x = Fraction(x)\n    frac_n = Fraction(n)\n    return (frac_x * frac_n).denominator == 1"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_of_digits(x):\n        return sum(int(i) for i in str(abs(x)))\n\n    return sorted(enumerate(nums), key=lambda x: (sum_of_digits(x[1]), x[0]))\n\ndef order_by_points(nums):\n    return [x[1] for x in sorted(enumerate(nums), key=lambda x: (sum(int(i) for i in str(abs(x[1]))), x[0]))]\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if len(str_num) > 0 and str_num[0] in '13579' and str_num[-1] in '13579':\n                count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) \nprint(specialFilter([33, -2, -3, 45, 21, 109]))"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\nprint(get_max_triples(5))"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n    if i1 > i2:\n        i1, i2 = i2, i1\n    return planets[i1+1:i2]\n\ndef main():\n    print(bf(\"Jupiter\", \"Neptune\")) \n    print(bf(\"Earth\", \"Mercury\")) \n    print(bf(\"Mercury\", \"Uranus\")) \n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    return sorted([s for s in lst if len(s) % 2 == 0], key=lambda x: (len(x), x))"}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    return x if is_prime(n) else y\n\nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum([x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0])\n\nprint(double_the_difference([1, 3, 2, 0])) \nprint(double_the_difference([-1, -2, 0])) \nprint(double_the_difference([9, -2])) \nprint(double_the_difference([0])) \nprint(double_the_difference([]))"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(a - b) for a, b in zip(game, guess)]\n\nprint(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\nprint(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def calculate_strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f'{class_name}.{strongest_extension}'\n\ndef main():\n    print(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])) \n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    b_len = len(b)\n    for i in range(b_len):\n        rotation = b[i:] + b[:i]\n        if rotation in a:\n            return True\n    return False\n\ndef cycpattern_check1(a, b):\n    b_len = len(b)\n    for i in range(b_len):\n        rotation = b[i:] + b[:i]\n        if rotation in a:\n            return True\n    return False\n\nprint(cycpattern_check(\"abcd\",\"abd\")) \nprint(cycpattern_check(\"hello\",\"ell\")) \nprint(cycpattern_check(\"whassup\",\"psus\")) \nprint(cycpattern_check(\"abab\",\"baa\")) \nprint(cycpattern_check(\"efef\",\"eeff\")) \nprint(cycpattern_check(\"himenss\",\"simen\"))"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even = 0\n    odd = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\nprint(even_odd_count(-12)) \nprint(even_odd_count(123))"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(num):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\nprint(right_angle_triangle(3, 4, 5)) \nprint(right_angle_triangle(1, 2, 3))"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    def unique_count(word):\n        return len(set(word))\n\n    max_unique = 0\n    max_word = \"\"\n\n    for word in words:\n        count = unique_count(word)\n        if count > max_unique:\n            max_unique = count\n            max_word = word\n        elif count == max_unique and word < max_word:\n            max_word = word\n\n    return max_word\n\nprint(find_max([\"name\", \"of\", \"string\"])) \nprint(find_max([\"name\", \"enam\", \"game\"])) \nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number\n    if remaining >= need:\n        total_eaten += need\n        remaining -= need\n    else:\n        total_eaten += remaining\n        remaining = 0\n    return [total_eaten, remaining]\n\ndef main():\n    print(eat(5, 6, 10))  # -> [11, 4]\n    print(eat(4, 8, 9))   # -> [12, 1]\n    print(eat(1, 10, 10)) # -> [11, 0]\n    print(eat(2, 11, 5)) # -> [7, 0]\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i + 1])\n    return eval(expression)\n\ndef main():\n    operator = ['+', '*', '-']\n    operand = [2, 3, 4, 5]\n    print(do_algebra(operator, operand))\n\nif __name__ == \"__main__\":\n    main()"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)"}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == '':\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [i for i in range(start, end+1) if i % 2 == 0]"}
