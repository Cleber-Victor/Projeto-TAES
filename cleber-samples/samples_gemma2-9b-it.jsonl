{"task_id": "hamming_distance", "completion": "def hamming_distance(N: int, S: str, T: str) -> int:\n  distance = 0\n  for i in range(N):\n    if S[i] != T[i]:\n      distance += 1\n  return distance \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n  if N % 2 == 0:\n    return ('=' * 2 + '-' * (N - 2)).center(N, '-')\n  else:\n    return ('=' + '-' * (N - 1)).center(N, '-') \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n  if N % 2 == 0:\n    return ('=' * 2 + '-' * (N - 2)).center(N, '-')\n  else:\n    return ('=' + '-' * (N - 1)).center(N, '-')  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n  if N % 2 == 0:\n    return '-=' * (N // 2)\n  else:\n    return '-=' + '-' * (N - 1) \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "full_house", "completion": "from collections import Counter\n\ndef full_house(cards: list[int]) -> str:\n  counts = Counter(cards)\n  return \"Yes\" if len(counts) == 2 and (3 in counts.values()) else \"No\" \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "full_house", "completion": "from collections import Counter\n\ndef full_house(cards: list[int]) -> str:\n  counts = Counter(cards)\n  return \"Yes\" if len(counts) == 2 and 3 in counts.values() and 2 in counts.values() else \"No\" \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "full_house", "completion": "from collections import Counter\n\ndef full_house(cards: list[int]) -> str:\n  counts = Counter(cards)\n  return \"Yes\" if len(counts) == 2 and 3 in counts.values() and 2 in counts.values() else \"No\" \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n  i = 0\n  o = 0\n  for c in S:\n    if c == 'i':\n      i += 1\n    else:\n      o += 1\n  return abs(i - o)  + (len(S) % 2) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n  i = 0\n  o = 0\n  for c in S:\n    if c == 'i':\n      i += 1\n    else:\n      o += 1\n  return abs(i - o) + (2 - (i + o) % 2) \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n  i = 0\n  o = 0\n  for c in S:\n    if c == 'i':\n      i += 1\n    else:\n      o += 1\n  return abs(i - o) + (2 - (i + o) % 2) \n", "attempt_no": 3, "passed_tests": false}
