{"task_id": "hamming_distance", "completion": "def hamming_distance(N: int, S: str, T: str) -> int:\n    return sum(1 for a, b in zip(S, T) if a != b)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n    if N % 2 == 0:\n        return '-' * (N // 2 - 1) + '==' + '-' * (N // 2 - 1)\n    else:\n        return '-' * (N // 2) + '=' + '-' * (N // 2)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "full_house", "completion": "def full_house(cards: list[int]) -> str:\n    counts = {}\n    for card in cards:\n        if card in counts:\n            counts[card] += 1\n        else:\n            counts[card] = 1\n\n    found = False\n    for i in counts:\n        for j in counts:\n            if i != j and counts[i] >= 3 and counts[j] >= 2:\n                found = True\n\n    if found:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    cards = [1, 2, 2, 3, 3, 3, 4]\n    print(full_house(cards))\n    cards = [1, 2, 2, 3, 3, 4, 4]\n    print(full_house(cards))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "full_house", "completion": "def full_house(cards: list[int]) -> str:\n    counts = {}\n    for card in cards:\n        if card in counts:\n            counts[card] += 1\n        else:\n            counts[card] = 1\n\n    three_of_a_kind = False\n    pair = False\n    for count in counts.values():\n        if count >= 3:\n            three_of_a_kind = True\n        elif count >= 2:\n            pair = True\n\n    if three_of_a_kind and pair:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef main():\n    cards = [1, 2, 2, 3, 3, 3, 4]\n    print(full_house(cards))\n    cards = [1, 2, 2, 3, 3, 4, 4]\n    print(full_house(cards))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "full_house", "completion": "def full_house(cards: list[int]) -> str:\n    counts = {}\n    for card in cards:\n        if card in counts:\n            counts[card] += 1\n        else:\n            counts[card] = 1\n\n    three_of_a_kind = False\n    pair = False\n    for count in counts.values():\n        if count >= 3:\n            three_of_a_kind = True\n        if count >= 2:\n            pair = True\n\n    if three_of_a_kind and pair:\n        return \"YES\"\n    else:\n        for card in counts:\n            if counts[card] >= 3:\n                new_counts = counts.copy()\n                new_counts[card] -= 3\n                new_counts2 = {}\n                for c in cards:\n                    if c != card:\n                        if c in new_counts2:\n                            new_counts2[c] += 1\n                        else:\n                            new_counts2[c] = 1\n                pair_in_new = False\n                for count in new_counts2.values():\n                    if count >= 2:\n                        pair_in_new = True\n                if pair_in_new:\n                    return \"YES\"\n    return \"NO\"\n\ndef main():\n    cards = [1, 2, 2, 3, 3, 3, 4]\n    print(full_house(cards))\n    cards = [1, 2, 2, 3, 3, 4, 4]\n    print(full_house(cards))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n    c = 0\n    for i in range(len(S)):\n        if i % 2 == 0 and S[i] != 'i':\n            c += 1\n        if i % 2 == 1 and S[i] != 'o':\n            c += 1\n    if (len(S) + c) % 2 != 0:\n        c += 1\n    return c\n", "attempt_no": 1, "passed_tests": true}
