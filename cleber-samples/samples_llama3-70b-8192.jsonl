{"task_id": "hamming_distance", "completion": "def hamming_distance(N, S, T):\n    return sum(c1 != c2 for c1, c2 in zip(S, T))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n    if N == 1:\n        return '='\n    elif N == 2:\n        return '=='\n    else:\n        if N % 2 == 0:\n            return '=' + '-' * (N // 2 - 1) + '=' + '-' * (N // 2 - 1)\n        else:\n            return '=' + '-' * (N // 2) + '-' * (N // 2)", "attempt_no": 1, "passed_tests": false}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n    if N == 1:\n        return '='\n    elif N == 2:\n        return '=='\n    else:\n        if N % 2 == 0:\n            return '-' * (N // 2 - 1) + '==' + '-' * (N // 2 - 1)\n        else:\n            return '=' + '-' * (N // 2) + '-' * (N // 2)", "attempt_no": 2, "passed_tests": false}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n    if N == 1:\n        return '='\n    elif N == 2:\n        return '=='\n    else:\n        if N % 2 == 0:\n            return '-' * (N // 2 - 1) + '==' + '-' * (N // 2 - 1)\n        else:\n            return '-' * ((N - 1) // 2) + '=' + '-' * ((N - 1) // 2)", "attempt_no": 3, "passed_tests": true}
{"task_id": "full_house", "completion": "def full_house(cards):\n    count = {}\n    for card in cards:\n        if card in count:\n            count[card] += 1\n        else:\n            count[card] = 1\n    values = list(count.values())\n    values.sort()\n    return \"Yes\" if values == [2, 3] or values == [3, 2] else \"No\"\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "full_house", "completion": "def full_house(cards):\n    count = {}\n    for card in cards:\n        if card in count:\n            count[card] += 1\n        else:\n            count[card] = 1\n    values = list(count.values())\n    values.sort()\n    return \"Yes\" if (values.count(2) == 1 and values.count(3) == 1) or (values.count(2) == 1 and values.count(4) == 0) else \"No\"\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n    i,o,count = 0,0,0\n    for c in S:\n        if c == 'i':\n            i += 1\n        else:\n            o += 1\n    if len(S) % 2 == 0:\n        count = abs(i-o)\n    else:\n        count = abs(i-o)+1\n    return (count + 1) // 2\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n    res = 0\n    for i in range(len(S)%2, len(S), 2):\n        if S[i-1:i+1] != 'io':\n            res += 1\n    if len(S) % 2 != 0:\n        res += 1\n    return res\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n    res = 0\n    for i in range(len(S)):\n        if (i % 2 == 0 and S[i] != 'i') or (i % 2 == 1 and S[i] != 'o'):\n            res += 1\n    if len(S) % 2 == 1:\n        res += 1\n    return res\n", "attempt_no": 3, "passed_tests": true}
