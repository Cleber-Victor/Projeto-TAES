{"task_id": "hamming_distance", "completion": "def hamming_distance(N: int, S: str, T: str) -> int:\n    return sum(el1 != el2 for el1, el2 in zip(S, T))", "attempt_no": 1, "passed_tests": false}
{"task_id": "hamming_distance", "completion": "def hamming_distance(N: int, S: str, T: str) -> int:\n    return sum(el1 != el2 for el1, el2 in zip(S, T))", "attempt_no": 2, "passed_tests": false}
{"task_id": "hamming_distance", "completion": "def hamming_distance(N: int, S: str, T: str) -> int:\n    return sum(el1 != el2 for el1, el2 in zip(S, T))", "attempt_no": 3, "passed_tests": false}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n    if N == 1:\n        return '='\n    if N % 2 == 0:\n        return ('='*(N//2-1) + '-' + '='*(N//2-1))[::-1]\n    else:\n        return ('='*(N//2) + '-' + '='*(N//2))[::-1]", "attempt_no": 1, "passed_tests": false}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n    if N == 1:\n        return '='\n    if N % 2 == 0:\n        return ('='*(N//2-1) + '-' + '='*(N//2-1))[::-1] if N >= 3 else '='\n    else:\n        return ('='*(N//2) + '-' + '='*(N//2))[::-1]", "attempt_no": 2, "passed_tests": false}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n    if N == 1:\n        return '='\n    if N % 2 == 0:\n        return '='*(N//2-1) + '-' + '='*(N//2-1)\n    else:\n        return '='*(N//2) + '-' + '='*(N//2)", "attempt_no": 3, "passed_tests": false}
{"task_id": "full_house_3", "completion": "def full_house(cards: list[int]) -> str:\n    count = {}\n    for card in cards:\n        if card in count:\n            count[card] += 1\n        else:\n            count[card] = 1\n    if 3 in count.values() and 2 in count.values():\n        return \"Full house\"\n    else:\n        return \"Not full house\"", "attempt_no": 1, "passed_tests": false}
{"task_id": "full_house_3", "completion": "def full_house(cards: list[int]) -> str:\n    count = {}\n    for card in cards:\n        if card in count:\n            count[card] += 1\n        else:\n            count[card] = 1\n    values = list(count.values())\n    values.sort()\n    if len(values) < 3:\n        return \"Not full house\"\n    if values[0] == 3 and values[1] == 2:\n        return \"Full house\"\n    else:\n        return \"Not full house\"", "attempt_no": 2, "passed_tests": false}
{"task_id": "full_house_3", "completion": "def full_house(cards: list[int]) -> str:\n    count = {}\n    for card in cards:\n        if card in count:\n            count[card] += 1\n        else:\n            count[card] = 1\n    values = list(count.values())\n    values.sort()\n    if len(values) < 3:\n        return \"Not full house\"\n    if values[0] == 3 and values[1] == 2:\n        return \"Full house\"\n    else:\n        return \"Not full house\"", "attempt_no": 3, "passed_tests": false}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n    i = 0\n    o = 0\n    for c in S:\n        if c == 'i':\n            i += 1\n        else:\n            o += 1\n    if len(S) % 2 == 1:\n        o += 1\n    return len(S) - i * 2 - o", "attempt_no": 1, "passed_tests": false}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n    S = list(S)\n    n = len(S)\n    if n % 2 == 1:\n        S.insert(n//2, 'i')\n    else:\n        for i in range(n//2 + 1, n):\n            if S[i-1] == 'i':\n                S.insert(i, 'o')\n                break\n    return n - len(S)", "attempt_no": 2, "passed_tests": false}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n    n = len(S)\n    odd_insertions = 1 - (n % 2)\n    even_insertions = 0\n    if n % 2 == 0:\n        for i in range(n//2):\n            if S[i] != 'i':\n                even_insertions += 1\n    return odd_insertions + even_insertions", "attempt_no": 3, "passed_tests": false}
