{"task_id": "hamming_distance", "completion": "def hamming_distance(N: int, S: str, T: str) -> int:\n    return sum(s != t for s, t in zip(S, T))", "attempt_no": 1, "passed_tests": true}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n    if N % 2 == 0:\n        return '-' * (N // 2) + '==' + '-' * (N // 2 - 1)\n    else:\n        return '-' * (N // 2) + '=' + '-' * (N // 2)", "attempt_no": 1, "passed_tests": false}
{"task_id": "doors_in_the_center", "completion": "def doors_in_the_center(N: int) -> str:\n    if N % 2 == 0:\n        return '-' * (N // 2 - 1) + '==' + '-' * (N // 2 - 1)\n    else:\n        return '-' * (N // 2) + '=' + '-' * (N // 2)", "attempt_no": 2, "passed_tests": true}
{"task_id": "full_house", "completion": "def full_house(cards: list[int]) -> str:\n    from collections import Counter\n    cnt = Counter(cards)\n    three_of_a_kind = [k for k, v in cnt.items() if v >= 3]\n    pair = [k for k, v in cnt.items() if v >= 2]\n    if len(three_of_a_kind) > 0 and len(pair) > 0:\n        for x in three_of_a_kind:\n            for y in pair:\n                if x != y or cnt[y] >= 3:\n                    return \"Full house\"\n    return \"Not a full house\"", "attempt_no": 1, "passed_tests": false}
{"task_id": "full_house", "completion": "def full_house(cards: list[int]) -> str:\n    from collections import Counter\n    cnt = Counter(cards)\n    counts = sorted(cnt.values(), reverse=True)\n    if counts[0] >= 3 and (counts[1] >= 2 or (counts[0] >= 5 and counts[1] >= 3)):\n        return \"Yes\"\n    return \"No\"", "attempt_no": 2, "passed_tests": false}
{"task_id": "full_house", "completion": "def full_house(cards: list[int]) -> str:\n    from collections import Counter\n    cnt = Counter(cards)\n    counts = sorted(cnt.values(), reverse=True)\n    if len(counts) >= 2 and counts[0] >= 3 and counts[1] >= 2:\n        return \"Yes\"\n    return \"No\"", "attempt_no": 3, "passed_tests": true}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n    insertions = 0\n    expected = 'io' * (len(S) // 2 + 1)\n    for i, char in enumerate(S):\n        if char != expected[i]:\n            insertions += 1\n    return insertions // 2", "attempt_no": 1, "passed_tests": false}
{"task_id": "ticket_gate_log", "completion": "def ticket_gate_log(S: str) -> int:\n    insertions = 0\n    expected = 'io' * (len(S) // 2 + 1)\n    j = 0\n    for char in S:\n        while expected[j] != char:\n            j += 1\n            insertions += 1\n        j += 1\n    return insertions + (len(S) + insertions) % 2", "attempt_no": 2, "passed_tests": true}
