{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n  for i in range(len(numbers)):\n    for j in range(i + 1, len(numbers)):\n      if abs(numbers[i] - numbers[j]) < threshold:\n        return True\n  return False \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n  result = []\n  current_group = ''\n  open_count = 0\n  for char in paren_string:\n    if char == '(':\n      open_count += 1\n      current_group += char\n    elif char == ')':\n      if open_count > 0:\n        open_count -= 1\n        current_group += char\n        if open_count == 0:\n          result.append(current_group)\n          current_group = ''\n  return result \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n  return number - int(number) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n  balance = 0\n  for operation in operations:\n    balance += operation\n    if balance < 0:\n      return True\n  return False \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n  mean = sum(numbers) / len(numbers)\n  return sum(abs(num - mean) for num in numbers) / len(numbers)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n  return [n for i, n in enumerate(numbers) for _ in range(2) if i < len(numbers) - 1 or _ == 1 else n]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n  return [n for n in numbers[:-1]] + [delimeter] + [numbers[-1]]\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n  result = []\n  for i, num in enumerate(numbers):\n    result.append(num)\n    if i < len(numbers) - 1:\n      result.append(delimeter)\n  return result \n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n  result = []\n  for group in paren_string.split():\n    max_depth = 0\n    current_depth = 0\n    for char in group:\n      if char == '(':\n        current_depth += 1\n        max_depth = max(max_depth, current_depth)\n      elif char == ')':\n        current_depth -= 1\n    result.append(max_depth)\n  return result      \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n  return [s for s in strings if substring in s] \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum = 0\n    product = 1\n    for number in numbers:\n      sum += number\n      product *= number\n    return (sum, product)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n  result = []\n  current_max = numbers[0]\n  for i in range(len(numbers)):\n    result.append(max(current_max, numbers[i]))\n    current_max = max(current_max, numbers[i])\n  return result \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n  result = []\n  if numbers:\n    current_max = numbers[0]\n    result.append(current_max)\n    for i in range(1, len(numbers)):\n      result.append(max(current_max, numbers[i]))\n      current_max = max(current_max, numbers[i])\n  return result  \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n  return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n  n = len(string)\n  for i in range(n // 2, -1, -1):\n    if is_palindrome(string[i:]):\n      return string + string[i - 1::-1]\n  return string \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n  return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n  n = len(string)\n  for i in range(n // 2, -1, -1):\n    if is_palindrome(string[i:]):\n      return string + string[i - 1::-1]\n  return string + string \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n  n = len(string)\n  for i in range(n // 2, -1, -1):\n    if is_palindrome(string[i:]):\n      return string + string[i - 1::-1]\n  return string + string \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/11", "completion": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n  return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b)) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n  if not strings:\n    return None\n  longest_str = strings[0]\n  for s in strings:\n    if len(s) > len(longest_str):\n      longest_str = s\n  return longest_str \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n  while b:\n    a, b = b, a % b\n  return a\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n  return [string[:i] for i in range(1, len(string) + 1)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n  return ' '.join(str(i) for i in range(n + 1)) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n  return len(set(string.lower())) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n  beats = []\n  for note in music_string:\n    if note == 'o':\n      beats.append(4)\n    elif note == 'o|':\n      beats.append(2)\n    elif note == '.|':\n      beats.append(1)\n  return beats \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n  beats = []\n  for note in music_string:\n    if note == 'o':\n      beats.append(4)\n    elif note == 'o|':\n      beats.append(2)\n    elif note == '.|':\n      beats.append(1)\n  return beats \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n  beats = []\n  for note in music_string:\n    if note == 'o':\n      beats.append(4)\n    elif note == 'o|':\n      beats.append(2)\n    elif note == '.|':\n      beats.append(1)\n  return beats \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n  return len(string) - len(string.replace(substring, '')) // len(substring) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n  count = 0\n  start = 0\n  while start < len(string):\n    index = string.find(substring, start)\n    if index == -1:\n      break\n    count += 1\n    start = index + len(substring)\n  return count \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n  count = 0\n  start = 0\n  while start < len(string):\n    index = string.find(substring, start)\n    if index == -1:\n      break\n    count += 1\n    start = index + 1\n  return count \n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n  nums = [int(x.replace('zero', '0').replace('one', '1').replace('two', '2').replace('three', '3').replace('four', '4').replace('five', '5').replace('six', '6').replace('seven', '7').replace('eight', '8').replace('nine', '9')) for x in numbers.split()]\n  return ' '.join([str(x) for x in sorted(nums)]) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n  return ' '.join(sorted([x.replace('zero', '0').replace('one', '1').replace('two', '2').replace('three', '3').replace('four', '4').replace('five', '5').replace('six', '6').replace('seven', '7').replace('eight', '8').replace('nine', '9') for x in numbers.split()])) \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n  return ' '.join([x for x in numbers.split()])[\n       sorted(numbers.split())\n      ]  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n  numbers.sort()\n  return numbers[0], numbers[1]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n  numbers.sort()\n  min_diff = float('inf')\n  closest = (numbers[0], numbers[1])\n  for i in range(len(numbers) - 1):\n    diff = abs(numbers[i] - numbers[i + 1])\n    if diff < min_diff:\n      min_diff = diff\n      closest = (numbers[i], numbers[i + 1])\n  return closest \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n  min_val = min(numbers)\n  max_val = max(numbers)\n  return [(x - min_val) / (max_val - min_val) for x in numbers] \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n  return [v for v in values if isinstance(v, int)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n  return len(string) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n  for i in range(n//2, 0, -1):\n    if n % i == 0:\n      return i  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n  factors = []\n  i = 2\n  while i * i <= n:\n    if n % i:\n      i += 1\n    else:\n      n //= i\n      factors.append(i)\n  if n > 1:\n    factors.append(n)\n  return factors  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n  seen = set()\n  result = []\n  for number in numbers:\n    if number not in seen:\n      seen.add(number)\n      result.append(number)\n  return result \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n  seen = set()\n  result = []\n  for number in numbers:\n    if number not in seen:\n      seen.add(number)\n      result.append(number)\n  return result  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n  seen = set()\n  result = []\n  for number in numbers:\n    if number not in seen:\n      seen.add(number)\n      result.append(number)\n  return result  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n  return \"\".join([c.lower() if c.isupper() else c.upper() for c in string]) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n  return ''.join(strings) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n  return [s for s in strings if s.startswith(prefix)]  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n  return [x for x in l if x > 0] \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n  a = xs[0]\n  b = xs[-1]\n  c = 0\n  while abs(a - b) > 1e-6:\n    c = (a + b) / 2\n    if poly(xs, c) * poly(xs, c - 1) < 0:\n      a = c\n    else:\n      b = c\n  return (a + b) / 2\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n  a = xs[0]\n  b = xs[-1]\n  c = 0\n  while abs(a - b) > 1e-6:\n    c = (a + b) / 2\n    if poly(xs, c) * poly(xs, c - 1) < 0:\n      a = c\n    else:\n      b = c\n  return (a + b) / 2  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n  a = xs[0]\n  b = xs[-1]\n  c = 0\n  while abs(a - b) > 1e-6:\n    c = (a + b) / 2\n    if poly(xs, c) * poly(xs, c - 1) < 0:\n      a = c\n    else:\n      b = c\n  return (a + b) / 2 \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n  l_prime = l.copy()\n  for i in range(len(l)) if i % 3 == 0 else range(len(l)):\n    l_prime[i] = l[i]\n  return sorted(l_prime[::3])\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n  l_prime = l.copy()\n  for i in range(len(l)):\n    if i % 3 == 0:\n      l_prime[i] = l[i]\n  l_prime[::3] = sorted(l_prime[::3])\n  return l_prime \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n  return sorted(set(l)) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n  return max(l) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n  count = 0\n  for i in range(n):\n    if i % 11 == 0 or i % 13 == 0:\n      if '7' in str(i):\n        count += 1\n  return count \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n  count = 0\n  for i in range(n):\n    if i % 11 == 0 or i % 13 == 0:\n      if '7' in str(i):\n        count += 1\n  return count \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n  count = 0\n  for i in range(n):\n    if i % 11 == 0 or i % 13 == 0:\n      if '7' in str(i):\n        count += 1\n  return count \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n  return [l[i] if i % 2 else sorted(l[i] for i in range(len(l)) if i % 2 == 0)[0] for i in range(len(l))] \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n  return [l[i] if i % 2 else sorted(l[i for i in range(len(l)) if i % 2 == 0])[0] for i in range(len(l))] \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n  return [l[i] if i % 2 else sorted(l[j for j in range(len(l)) if j % 2 == 0])[0] for i in range(len(l))] \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n  groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n  groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n  return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n  return \"\".join([group[1:] + group[0] if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]])   \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n  groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n  groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n  return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n  groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n  groups = [group[0] + group[1:] if len(group) == 3 else group for group in groups]\n  return \"\".join(groups)  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n  groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n  groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n  return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n  groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n  groups = [group[0] + group[1:] if len(group) == 3 else group for group in groups]\n  return \"\".join(groups)  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n  a, b = 0, 1\n  count = 0\n  while count < n:\n    if a > 1:\n      for i in range(2, int(a**0.5) + 1):\n        if (a % i) == 0:\n          break\n      else:\n        count += 1\n    a, b = b, a + b\n  return a \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n  a, b = 0, 1\n  count = 0\n  while count < n:\n    if a > 1:\n      is_prime = True\n      for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n          is_prime = False\n          break\n      if is_prime:\n        count += 1\n    a, b = b, a + b\n  return a  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n  a, b = 0, 1\n  count = 0\n  while count < n:\n    if a > 1:\n      is_prime = True\n      for i in range(2, int(a**0.5) + 1):\n        if a % i == 0:\n          is_prime = False\n          break\n      if is_prime:\n        count += 1\n    a, b = b, a + b\n  return a  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n  l.sort()\n  for i in range(len(l)-2):\n    left = i + 1\n    right = len(l) - 1\n    while left < right:\n      total = l[i] + l[left] + l[right]\n      if total < 0:\n        left += 1\n      elif total > 0:\n        right -= 1\n      else:\n        return True\n  return False \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n  return 0 \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return 2*n \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n  return 0 \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n  return [x + 1 for x in l] \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n  s = set()\n  for x in l:\n    y = -x\n    if y in s:\n      return True\n    s.add(x)\n  return False \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n  if x == 0:\n    return '0'\n  digits = ''\n  while x > 0:\n    digit = x % base\n    digits = str(digit) + digits\n    x //= base\n  return digits \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n  return 0.5 * a * h \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n  if n == 0:\n    return 0\n  if n == 1:\n    return 0\n  if n == 2:\n    return 2\n  if n == 3:\n    return 0\n  a = 0\n  b = 0\n  c = 2\n  d = 0\n  for i in range(4, n + 1):\n    e = a + b + c + d\n    a = b\n    b = c\n    c = d\n    d = e\n  return d \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n  l.sort()\n  n = len(l)\n  if n % 2 == 0:\n    return (l[n//2 -1] + l[n//2]) / 2\n  else:\n    return l[n//2] \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n  return text == text[::-1] \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n  return pow(2, n, p) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n  return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n  return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s]) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n  return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n  return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n  return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n  return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n  vowels = 'aeiouAEIOU'\n  return ''.join([char for char in text if char not in vowels])\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n  return all(x < t for x in l) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int):\n  return x + y \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n  return set(s0) == set(s1) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n  if n == 1:\n    return 1\n  elif n == 2:\n    return 1\n  else:\n    return fib(n-1) + fib(n-2) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n  stack = []\n  for bracket in brackets:\n    if bracket == \"<\":\n      stack.append(bracket)\n    elif bracket == \">\":\n      if not stack:\n        return False\n      stack.pop()\n  return not stack \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n  increasing = decreasing = True\n  for i in range(1, len(l)):\n    if l[i] < l[i-1]:\n      increasing = False\n    if l[i] > l[i-1]:\n      decreasing = False\n  return increasing or decreasing  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n  return sorted(set(l1) & set(l2)) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n  i = 2\n  while i * i <= n:\n    if n % i == 0:\n      n //= i\n    else:\n      i += 1\n  return n  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n  return (n * (n + 1)) // 2 \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n  stack = []\n  for bracket in brackets:\n    if bracket == '(':\n      stack.append(bracket)\n    elif bracket == ')':\n      if not stack:\n        return False\n      stack.pop()\n  return not stack \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n  return [i * len(xs) for i in xs[1:]]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n  return [i * len(xs) for i in xs[1:]]\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n  return [i * len(xs) for i in xs[1:]] \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n  if n == 0:\n    return 0\n  if n == 1:\n    return 0\n  if n == 2:\n    return 1\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n  count = 0\n  for i in range(len(s)):\n    if s[i] in 'aeiou' and (i == len(s) - 1 or s[i + 1] not in 'aeiou'):\n      count += 1\n  return count \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n  count = 0\n  for i in range(len(s)):\n    if s[i] in 'aeiou' and (i == len(s) - 1 or s[i + 1] not in 'aeiou'):\n      count += 1\n  return count \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n  count = 0\n  for i in range(len(s)):\n    if s[i] in 'aeiou' and (i == len(s) - 1 or s[i + 1] not in 'aeiou'):\n      count += 1\n  return count \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n  digits = str(x)\n  shift %= len(digits)\n  return digits[-shift:] + digits[:-shift] \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n  digits = str(x)\n  shift %= len(digits)\n  return digits[len(digits)-shift:] + digits[:len(digits)-shift] \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n  digits = str(x)\n  shift %= len(digits)\n  return digits[-shift:] + digits[:-shift] \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n  sum = 0\n  for c in s:\n    if 'A' <= c <= 'Z':\n      sum += ord(c)\n  return sum\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n  apples = int(s.split(\" apples and \")[0])\n  oranges = int(s.split(\" apples and \")[1].split(\" oranges\")[0])\n  return n - apples - oranges \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n  if not arr:\n    return []\n  min_val = float('inf')\n  min_index = -1\n  for i, val in enumerate(arr):\n    if val % 2 == 0 and val < min_val:\n      min_val = val\n      min_index = i\n  return [min_val, min_index] if min_index != -1 else [] \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n  counts = {}\n  for num in lst:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n  for num in lst:\n    if counts[num] >= num and num > 0:\n      return num\n  return -1  \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n  counts = {}\n  for num in lst:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n  for num in sorted(counts.keys(), reverse=True):\n    if counts[num] >= num and num > 0:\n      return num\n  return -1 \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n  sorted_list = []\n  while lst:\n    min_val = min(lst)\n    sorted_list.append(min_val)\n    lst.remove(min_val)\n    if lst:\n      max_val = max(lst)\n      sorted_list.append(max_val)\n      lst.remove(max_val)\n  return sorted_list  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/71", "completion": "import math\ndef triangle_area(a, b, c):\n  if a + b > c and a + c > b and b + c > a:\n    return round(math.sqrt(a * b * c / (a + b + c)), 2)\n  else:\n    return -1   \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/71", "completion": "import math\ndef triangle_area(a, b, c):\n  if a + b > c and a + c > b and b + c > a:\n    return round(math.sqrt(a * b * c / (a + b + c)), 2)\n  else:\n    return -1 \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/71", "completion": "import math\ndef triangle_area(a, b, c):\n  if a + b > c and a + c > b and b + c > a:\n    return round(math.sqrt(a * b * c / (a + b + c)), 2)\n  else:\n    return -1 \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n  return q==q[::-1] and sum(q) <= w \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n  n = len(arr)\n  dp = [[0 for _ in range(n)] for _ in range(n)]\n  for i in range(n):\n    dp[i][i] = 1\n  for i in range(n-2, -1, -1):\n    for j in range(i+1, n):\n      if arr[i] == arr[j]:\n        dp[i][j] = dp[i+1][j-1] + 2\n      else:\n        dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n  return n - dp[0][n-1] \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n  n = len(arr)\n  dp = [[0 for _ in range(n)] for _ in range(n)]\n  for i in range(n):\n    dp[i][i] = 1\n  for i in range(n-2, -1, -1):\n    for j in range(i+1, n):\n      if arr[i] == arr[j]:\n        dp[i][j] = dp[i+1][j-1] + 2\n      else:\n        dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n  return n - dp[0][n-1]  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n  n = len(arr)\n  dp = [[0 for _ in range(n)] for _ in range(n)]\n  for i in range(n):\n    dp[i][i] = 1\n  for i in range(n-2, -1, -1):\n    for j in range(i+1, n):\n      if arr[i] == arr[j]:\n        dp[i][j] = dp[i+1][j-1] + 2\n      else:\n        dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n  return n - dp[0][n-1] \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n  return lst1 if sum(len(x) for x in lst1) < sum(len(x) for x in lst2) else lst2 \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n  return lst1 if sum(len(x) for x in lst1) < sum(len(x) for x in lst2) else lst2\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n  return lst1 if sum(len(x) for x in lst1) < sum(len(x) for x in lst2) else lst2 \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n  for i in range(2, int(a**0.5) + 1):\n    if a % i == 0:\n      b = a // i\n      for j in range(2, int(b**0.5) + 1):\n        if b % j == 0:\n          c = b // j\n          if is_prime(i) and is_prime(j) and is_prime(c):\n            return True\n  return False\n\ndef is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n  return n**int(x** (1/n)) == x \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n  return n ** int(x**(1/n)) == x \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n  return n**int(x**(1/n)) == x \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n  return int(round(a**(1/3)))**3 == a \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n  return int(a**(1/3))**3 == a \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n  return int(a**(1/3))**3 == a \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n  primes = {2, 3, 5, 7, 11, 13}\n  count = 0\n  for char in num:\n    if char in primes or (char >= 'A' and char <= 'F'):\n      count += 1\n  return count \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n  primes = {2, 3, 5, 7, 'B', 'D'}\n  count = 0\n  for char in num:\n    if char in primes or (char >= '0' and char <= '9'):\n      count += 1\n  return count \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n  primes = {2, 3, 5, 7, 'B', 'D'}\n  count = 0\n  for char in num:\n    if char in primes or (char.isdigit() ):\n      count += 1\n  return count \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n  return \"db\" + bin(decimal)[2:].zfill(8) + \"db\" \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n  return \"db\" + bin(decimal)[2:].zfill(8) + \"db\" \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n  return \"db\" + bin(decimal)[2:].zfill(8) + \"db\" \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n  if len(s) < 3:\n    return False\n  for i in range(len(s)-2):\n    if s[i] == s[i+1] == s[i+2]:\n      return False\n  return True \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n  if len(s) < 3:\n    return False\n  for i in range(len(s)-2):\n    if s[i] in s[i+1:i+3]:\n      return False\n  return True \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n  if len(s) < 3:\n    return False\n  for i in range(len(s)-2):\n    if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n      return False\n  return True \n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n  return ['A+' if grade >= 4.0 else 'A' if grade > 3.7 else 'A-' if grade > 3.3 else 'B+' if grade > 2.7 else 'B' if grade > 2.3 else 'B-' if grade > 2.0 else 'C+' if grade > 1.7 else 'C' if grade > 1.3 else 'C-' if grade > 1.0 else 'D+' if grade > 0.7 else 'D' if grade >= 0.0 else 'E' for grade in grades] \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n  return ['A+' if g >= 4.0 else 'A' if g > 3.7 else 'A-' if g > 3.3 else 'B+' if g > 2.7 else 'B' if g > 2.3 else 'B-' if g > 2.0 else 'C+' if g > 1.7 else 'C' if g > 1.3 else 'C-' if g > 1.0 else 'D+' if g > 0.7 else 'D' if g >= 0.0 else 'E' for g in grades] \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n  return ['A+' if g >= 4.0 else 'A' if g > 3.7 else 'A-' if g > 3.3 else 'B+' if g > 2.7 else 'B' if g > 2.3 else 'B-' if g > 2.0 else 'C+' if g > 1.7 else 'C' if g > 1.3 else 'C-' if g > 1.0 else 'D+' if g > 0.7 else 'D' if g >= 0.0 else 'E' for g in grades]   \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n  def is_prime(n):\n    if n <= 1:\n      return False\n    for i in range(2, int(n**0.5) + 1):\n      if n % i == 0:\n        return False\n    return True\n  return is_prime(len(string))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n  count = 0\n  for i in range(10**n - 10**(n-1), 10**n):\n    if str(i)[0] == '1' or str(i)[-1] == '1':\n      count += 1\n  return count\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n  count = 0\n  for i in range(10**n):\n    if str(i)[0] == '1' or str(i)[-1] == '1':\n      count += 1\n  return count \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n  count = 0\n  for i in range(10**n):\n    if str(i)[0] == '1' or str(i)[-1] == '1':\n      count += 1\n  return count \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n  b = bin(N)[2:]\n  return str(sum(int(i) for i in b)) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n  b = bin(N)[2:]\n  return ''.join('1' for x in b if int(x) == 1) \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n  b = bin(N)[2:]\n  s = 0\n  for x in b:\n    s += int(x)\n  return bin(s)[2:]\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n  sum = 0\n  for i in range(1, len(lst), 2):\n    if lst[i] % 2 == 0:\n      sum += lst[i]\n  return sum \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n  return ' '.join([''.join(sorted(word)) for word in s.split()])\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n  result = []\n  for i in range(len(lst)):\n    for j in range(len(lst[i])):\n      if lst[i][j] == x:\n        result.append((i, j))\n  result.sort(key=lambda item: item[0])\n  for row in result:\n    for r in range(row[0]+1, len(result)):\n      for c in range(len(result[r])):\n        if result[r][0] == row[0] and result[r][1] > row[1]:\n          result[r], result[row[0]] = result[row[0]], result[r]\n  return result \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n  result = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n  result.sort(key=lambda item: item[0])\n  for i in range(len(result)):\n    for j in range(i+1, len(result)):\n      if result[i][0] == result[j][0] and result[j][1] > result[i][1]:\n        result[i], result[j] = result[j], result[i]\n  return result \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n  if (array[0] + array[-1]) % 2 == 0:\n    return sorted(array, reverse=True)\n  else:\n    return sorted(array) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n  if array:\n    if (array[0] + array[-1]) % 2 == 0:\n      return sorted(array, reverse=True)\n    else:\n      return sorted(array)\n  else:\n    return [] \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n  result = ''\n  for char in s:\n    if char.isalpha():\n      start = ord('a') if char.islower() else ord('A')\n      shifted_char = chr((ord(char) - start + 4) % 26 + start)\n    else:\n      shifted_char = char\n    result += shifted_char\n  return result  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n  if len(lst) < 2:\n    return None\n  s = sorted(lst)\n  return s[1] \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n  if len(lst) < 2:\n    return None\n  s = sorted(lst)\n  return s[1] \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n  if len(lst) < 2:\n    return None\n  s = sorted(lst)\n  return s[1] \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n  return sum(1 for sentence in S.split('.|?|!') if sentence.strip().startswith('I')) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n  return sum(1 for sentence in S.split('.|?|!') if sentence.strip().startswith('I')) \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n  return sum(1 for sentence in S.split('.|?|!') if sentence.strip().startswith('I')) \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n  return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y)  \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n  return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y + z or y == x + z or z == x + y) \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  encoded = ''\n  for char in message:\n    if char.isalpha():\n      index = alphabet.find(char.lower())\n      if index != -1:\n        if char.islower():\n          encoded += alphabet[(index + 2) % 26].lower()\n        else:\n          encoded += alphabet[(index + 2) % 26].upper()\n      else:\n        encoded += char \n    else:\n      encoded += char\n  return encoded \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  encoded = ''\n  for char in message:\n    if char.isalpha():\n      index = alphabet.find(char.lower())\n      if index != -1:\n        shifted_index = (index + 2) % 26\n        encoded += alphabet[shifted_index].upper() if char.isupper() else alphabet[shifted_index].lower()\n      else:\n        encoded += char\n    else:\n      encoded += char\n  return encoded \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n  alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  encoded = ''\n  for char in message:\n    if char.isalpha():\n      index = alphabet.find(char.lower())\n      if index != -1:\n        shifted_index = (index + 2) % 26\n        encoded += alphabet[shifted_index].upper() if char.isupper() else alphabet[shifted_index].lower()\n      else:\n        encoded += char\n    else:\n      encoded += char\n  return encoded \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n  def is_prime(num):\n    if num <= 1:\n      return False\n    for i in range(2, int(num**0.5) + 1):\n      if num % i == 0:\n        return False\n    return True\n  largest_prime = 0\n  for num in lst:\n    if is_prime(num) and num > largest_prime:\n      largest_prime = num\n  sum_of_digits = 0\n  while largest_prime > 0:\n    sum_of_digits += largest_prime % 10\n    largest_prime //= 10\n  return sum_of_digits \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n  if not dict:\n    return False\n  return all(k.islower() for k in dict) or all(k.isupper() for k in dict) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n  if not dict:\n    return False\n  return all(isinstance(k, str) and (k.islower() or k.isupper()) for k in dict) \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n  if not dict:\n    return False\n  keys = [k.lower() for k in dict]\n  return all(keys[0] == k for k in keys) \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n  primes = []\n  for i in range(2, n):\n    is_prime = True\n    for j in range(2, int(i**0.5) + 1):\n      if i % j == 0:\n        is_prime = False\n        break\n    if is_prime:\n      primes.append(i)\n  return primes \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n  return (a % 10) * (b % 10) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n  count = 0\n  for i in range(0, len(s), 2):\n    if s[i] in 'AEIOU':\n      count += 1\n  return count \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n  num = float(value)\n  return int(round(num, 0)) if num % 1 >= 0.5 else int(round(num, 0) - 1)  \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n  num = float(value)\n  return int(round(num)) if num - int(round(num)) < 0.5 else int(round(num) + 1)\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n  num = float(value)\n  return int(round(num)) if num - int(round(num)) < 0.5 else int(round(num) + 1) \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n  stones = [n]\n  i = n + 1 if n % 2 == 0 else n + 2\n  while len(stones) < n:\n    stones.append(i)\n    i += 2 if n % 2 == 0 else 2\n  return stones  \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n  stones = [n]\n  i = n + 1 if n % 2 == 0 else n + 2\n  while len(stones) < n:\n    stones.append(i)\n    i += 2 if n % 2 == 0 else 2\n  return stones \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n  stones = [n]\n  i = n + 1 if n % 2 == 0 else n + 2\n  while len(stones) < n:\n    stones.append(i)\n    i += 2 if n % 2 == 0 else 1\n  return stones \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n  return s.split(\",\") if \",\" in s else s.split() \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n  return s.split(\",\") if \",\" in s else s.split() \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n  return s.split(\",\") if \",\" in s else s.split() \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n  for i in range(x, y + 1):\n    if i % 2 == 0 and (i > x or i == y):\n      return i\n  return -1 \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n  for i in range(x, y + 1):\n    if i % 2 == 0 and i >= x:\n      return i\n  return -1 \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n  for i in range(x, y + 1):\n    if i % 2 == 0:\n      return i\n  return -1 \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n  if n > m:\n    return -1\n  return bin(round(sum(range(n, m + 1)) / (m - n + 1))) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n  return sorted([i for i in x if all(int(d) % 2 for d in str(i))]) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n  arr = [x for x in arr if 1 <= x <= 9]\n  arr.sort()\n  arr.reverse()\n  return [str(x) for x in arr]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n  arr = [x for x in arr if 1 <= x <= 9]\n  arr.sort()\n  arr.reverse()\n  return [f\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x - 1] for x in arr]  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n  arr = [x for x in arr if 1 <= x <= 9]\n  arr.sort()\n  arr.reverse()\n  return [[\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"][x - 1] for x in arr] \n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n  result = []\n  for i in range(1, n + 1):\n    if i % 2 == 0:\n      fact = 1\n      for j in range(1, i + 1):\n        fact *= j\n      result.append(fact)\n    else:\n      sum = 0\n      for j in range(1, i + 1):\n        sum += j\n      result.append(sum)\n  return result \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n  even = 0\n  odd = 0\n  for i in range(1, n + 1):\n    s = str(i)\n    if s == s[::-1] and i % 2 == 0:\n      even += 1\n    if s == s[::-1] and i % 2 != 0:\n      odd += 1 \n  return (even, odd) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n  count = 0\n  for num in arr:\n    sum_of_digits = 0\n    for digit in str(abs(num)):\n      sum_of_digits += int(digit)\n    if sum_of_digits > 0:\n      count += 1\n  return count \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n  count = 0\n  for num in arr:\n    sum_of_digits = 0\n    for digit in str(abs(num)):\n      sum_of_digits += int(digit)\n    if sum_of_digits > 0:\n      count += 1\n  return count \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n  count = 0\n  for num in arr:\n    sum_of_digits = 0\n    for digit in str(abs(num)):\n      sum_of_digits += int(digit)\n    if sum_of_digits > 0:\n      count += 1\n  return count \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n  if len(arr) == 0:\n    return True\n  sorted_arr = sorted(arr)\n  for i in range(len(arr)):\n    if arr[i] != sorted_arr[i]:\n      return False\n  return True \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n  if len(arr) == 0:\n    return True\n  n = len(arr)\n  for i in range(n):\n    if arr[i] != sorted(arr)[(i)%n]:\n      return False\n  return True\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n  if len(arr) == 0:\n    return True\n  n = len(arr)\n  for i in range(n):\n    if arr[i] > arr[(i+1)%n]:\n      return False\n  return True  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n  for x in lst1:\n    if x % 2 != 0:\n      for y in lst2:\n        if y % 2 == 0:\n          lst1.remove(x)\n          lst1.append(y)\n          lst2.remove(y)\n          break\n  return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\"  \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n  while any(x % 2 != 0 for x in lst1):\n    for i in range(len(lst1)):\n      if lst1[i] % 2 != 0:\n        for j in range(len(lst2)):\n          if lst2[j] % 2 == 0:\n            lst1[i], lst2[j] = lst2[j], lst1[i]\n            break\n  return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\" \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n  while any(x % 2 != 0 for x in lst1):\n    for i in range(len(lst1)):\n      if lst1[i] % 2 != 0:\n        found = False\n        for j in range(len(lst2)):\n          if lst2[j] % 2 == 0:\n            lst1[i], lst2[j] = lst2[j], lst1[i]\n            found = True\n            break\n        if not found:\n          return \"NO\"\n  return \"YES\" \n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n  result = {}\n  for word in test.split():\n    if word in result:\n      result[word]+=1\n    else:\n      result[word]=1\n  max_count = max(result.values())\n  return {word: count for word, count in result.items() if count == max_count} \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n  result = {}\n  for word in test.split():\n    if word in result:\n      result[word]+=1\n    else:\n      result[word]=1\n  if not result:\n    return {}\n  max_count = max(result.values())\n  return {word: count for word, count in result.items() if count == max_count} \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n  res = ''.join([i for i in s if i not in c])\n  return res, res == res[::-1]  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n  return [\"the number of odd elements \" + str(sum(int(x) % 2 for x in lst[i])) + \"n the str\" + str(sum(int(x) % 2 for x in lst[i])) + \"ng \" + str(sum(int(x) % 2 for x in lst[i])) + \" of the \" + str(sum(int(x) % 2 for x in lst[i])) + \"nput.\" for i in range(len(lst))] \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n  min_sum = nums[0]\n  current_sum = nums[0]\n  for i in range(1, len(nums)):\n    current_sum = min(nums[i], current_sum + nums[i])\n    min_sum = min(min_sum, current_sum)\n  return min_sum \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n  rows = len(grid)\n  cols = len(grid[0])\n  bucket_count = 0\n  for i in range(rows):\n    for j in range(cols):\n      if grid[i][j] == 1:\n        bucket_count += 1\n  return math.ceil(bucket_count / capacity)  \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n  rows = len(grid)\n  cols = len(grid[0])\n  bucket_count = 0\n  for i in range(rows):\n    for j in range(cols):\n      if grid[i][j] == 1:\n        bucket_count += 1\n  return math.ceil(bucket_count / capacity)  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n  rows = len(grid)\n  cols = len(grid[0])\n  bucket_count = 0\n  for i in range(rows):\n    for j in range(cols):\n      if grid[i][j] == 1:\n        bucket_count += 1\n  return (bucket_count + capacity - 1) // capacity  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n  return sorted(arr, key=lambda x: (bin(x).count(\"1\"), x)) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/117", "completion": "def select_words(s,n):\n  if s == \"\":\n    return []\n  words = s.split()\n  result = []\n  vowels = \"aeiouAEIOU\"\n  for word in words:\n    count = 0\n    for letter in word:\n      if letter not in vowels:\n        count += 1\n    if count == n:\n      result.append(word)\n  return result \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n  for i in range(len(word) - 2, -1, -1):\n    if word[i] not in 'aeiouAEIOU' and word[i+1] in 'aeiouAEIOU' and word[i+2] not in 'aeiouAEIOU':\n      return word[i+1]\n  return ''  \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n  for i in range(len(word) - 1, -1, -1):\n    if word[i] not in 'aeiouAEIOU' and i < len(word) - 1 and word[i+1] in 'aeiouAEIOU':\n      return word[i+1]\n  return ''  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n  for i in range(len(word) - 2, -1, -1):\n    if word[i] not in 'aeiouAEIOU' and word[i+1] in 'aeiouAEIOU':\n      return word[i+1]\n  return ''  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n  open_count = 0\n  for char in lst[0]:\n    if char == '(':\n      open_count += 1\n    elif char == ')':\n      open_count -= 1\n    if open_count < 0:\n      return 'No'\n  open_count = 0\n  for char in lst[1]:\n    if char == '(':\n      open_count += 1\n    elif char == ')':\n      open_count -= 1\n    if open_count < 0:\n      return 'No'\n  return 'Yes' \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n  open1 = lst[0].count('(')\n  close1 = lst[0].count(')')\n  open2 = lst[1].count('(')\n  close2 = lst[1].count(')')\n  return 'Yes' if open1 == close1 and open2 == close2 else 'No' \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n  open1 = lst[0].count('(')\n  close1 = lst[0].count(')')\n  open2 = lst[1].count('(')\n  close2 = lst[1].count(')')\n  return 'Yes' if open1 + open2 == close1 + close2 else 'No' \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n  return sorted(arr)[-k:]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n  return sorted(arr)[-k:] \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n  return sorted(arr)[-k:] \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n  sum = 0\n  for i in range(1, len(lst), 2):\n    if lst[i] % 2 != 0:\n      sum += lst[i]\n  return sum \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n  sum = 0\n  for i in range(1, len(lst), 2):\n    if lst[i] % 2 != 0:\n      sum += lst[i]\n  return sum \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n  sum = 0\n  for i in range(1, len(lst), 2):\n    if lst[i] % 2 != 0:\n      sum += lst[i]\n  return sum \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n  sum = 0\n  for i in range(k):\n    if 10 <= arr[i] <= 99:\n      sum += arr[i]\n  return sum \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n  sum = 0\n  for i in range(k):\n    if 10 <= arr[i] <= 99:\n      sum += arr[i]\n    elif 1 <= arr[i] <= 9:\n      sum += arr[i]\n  return sum \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n  sum = 0\n  for i in range(k):\n    if 10 <= arr[i] <= 99:\n      sum += arr[i]\n    elif 1 <= arr[i] <= 9:\n      sum += arr[i]\n  return sum \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n  odds = []\n  while n != 1:\n    if n % 2 != 0:\n      odds.append(n)\n    if n % 2 == 0:\n      n = n // 2\n    else:\n      n = 3 * n + 1\n  if n == 1:\n    odds.append(n)\n  odds.sort()\n  return odds \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    if date.count('-') != 2:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31):\n        return False\n    if month in [4, 6, 9, 11] and (day < 1 or day > 30):\n        return False\n    if month == 2 and (day < 1 or day > 29):\n        return False    \n    return True  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n  if \" \" in txt:\n    return txt.split()\n  elif \",\" in txt:\n    return txt.split(\",\")\n  else:\n    return sum(1 for i in range(ord('a'),ord('z')+1) if (i-ord('a')%2!=0)) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n  if \" \" in txt:\n    return txt.split()\n  elif \",\" in txt:\n    return txt.split(\",\")\n  else:\n    return sum(1 for i in range(ord('a'),ord('z')+1) if (ord('a')+i)%2!=0)) \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n  if \" \" in txt:\n    return txt.split()\n  elif \",\" in txt:\n    return txt.split(\",\")\n  else:\n    return sum(1 for i in range(ord('a'), ord('z') + 1) if (ord('a') + i) % 2 != 0) \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n  for i in range(len(lst)-1):\n    if lst[i] > lst[i+1]:\n      return False\n    if i > 0 and lst[i-1] == lst[i] and lst[i] == lst[i+1]:\n      return False\n  return True  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n  if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n    return \"NO\"\n  start = max(interval1[0], interval2[0])\n  end = min(interval1[1], interval2[1])\n  length = end - start + 1\n  if length > 1:\n    for i in range(2, int(length**0.5)+1):\n      if length % i == 0:\n        return \"NO\"\n    return \"YES\"\n  else:\n    return \"NO\"  \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n  if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n    return \"NO\"\n  start = max(interval1[0], interval2[0])\n  end = min(interval1[1], interval2[1])\n  length = end - start + 1\n  if length > 1:\n    for i in range(2, length**0.5 + 1):\n      if length % i == 0:\n        return \"NO\"\n    return \"YES\"\n  else:\n    return \"NO\"  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n  if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n    return \"NO\"\n  start = max(interval1[0], interval2[0])\n  end = min(interval1[1], interval2[1])\n  length = end - start + 1\n  if length > 1:\n    for i in range(2, int(length**0.5) + 1):\n      if length % i == 0:\n        return \"NO\"\n    return \"YES\"\n  else:\n    return \"NO\"  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n  if not arr:\n    return None\n  prod = 1\n  sum_magnitudes = 0\n  for x in arr:\n    if x > 0:\n      prod *= 1\n    elif x < 0:\n      prod *= -1\n    else:\n      prod *= 0\n    sum_magnitudes += abs(x)\n  return sum_magnitudes * prod \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/129", "completion": "import itertools\n\ndef minPath(grid, k):\n  n = len(grid)\n  paths = []\n  for path in itertools.permutations(itertools.chain(*grid), k):\n    if len(set(path)) == k:\n      paths.append(path)\n  paths.sort()\n  return paths[0] \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/129", "completion": "import itertools\n\ndef minPath(grid, k):\n  n = len(grid)\n  paths = []\n  for path in itertools.permutations(itertools.chain(*grid), k):\n    if len(set(path)) == k:\n      paths.append(path)\n  paths.sort(key=lambda x: x[:k])\n  return paths[0] \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/129", "completion": "import itertools\n\ndef minPath(grid, k):\n  n = len(grid)\n  paths = []\n  for path in itertools.product(*grid):\n    if len(path) == k:\n      paths.append(path)\n  paths.sort(key=lambda x: x)\n  return paths[0] \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n  a = [3, 1, 2]\n  for i in range(3, n + 1):\n    if i % 2 == 0:\n      a.append(1 + i / 2)\n    else:\n      a.append(a[i - 1] + a[i - 2] + a[i])\n  return a \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n  a = [3, 1, 2]\n  for i in range(3, n + 1):\n    if i % 2 == 0:\n      a.append(1 + i / 2)\n    else:\n      a.append(a[i - 1] + a[i - 2] + a[i - 3])\n  return a  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n  a = [3, 1, 2]\n  for i in range(3, n + 1):\n    if i % 2 == 0:\n      a.append(1 + i / 2)\n    else:\n      a.append(a[i - 1] + a[i - 2] + a[i - 3])\n  return a  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n  product = 1\n  found_odd = False\n  while n > 0:\n    digit = n % 10\n    if digit % 2 != 0:\n      product *= digit\n      found_odd = True\n    n //= 10\n  if found_odd:\n    return product\n  else:\n    return 0\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n  count = 0\n  for char in string:\n    if char == '[':\n      count += 1\n    elif char == ']':\n      count -= 1\n    if count < 0:\n      return True\n  return False  \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n  count = 0\n  for char in string:\n    if char == '[':\n      count += 1\n    elif char == ']':\n      count -= 1\n    if count > 0 and count-1 < 0:\n      return True\n  return False  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n  count = 0\n  for char in string:\n    if char == '[':\n      count += 1\n    elif char == ']':\n      count -= 1\n    if count < 0:\n      return True\n  return False  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n  return sum([int(x * 1.0 + 0.5)**2 for x in lst])\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n  return sum([round(x,0)**2 for x in lst]) \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n  return sum([round(x,0)**2 for x in lst]) \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n  return txt.split()[-1][-1].isalpha() and txt.split()[-1][-1] != ' ' \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n  return txt.strip().endswith(chr(ord('a') + 0) if txt.strip()[ -1 ].isalpha() else '')\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n  return txt.strip()[-1].isalpha() and txt.strip()[-1] != ' ' \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n  for i in range(1, len(arr)):\n    if arr[i] < arr[i-1]:\n      return i\n  return -1 \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n  for i in range(1, len(arr)):\n    if arr[i] < arr[i-1]:\n      return i - 1\n  return -1 \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n  for i in range(1, len(arr)):\n    if arr[i] >= arr[i-1]:\n      return i - 1\n  return -1 \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n  a = None\n  b = None\n  for num in lst:\n    if num < 0 and (a is None or num > a):\n      a = num\n    if num > 0 and (b is None or num < b):\n      b = num\n  return (a, b)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n  if a == b:\n    return None\n  if isinstance(a, str):\n    a = float(a.replace(',', '.'))\n  if isinstance(b, str):\n    b = float(b.replace(',', '.'))\n  return max(a, b) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n  if a == b:\n    return None\n  if isinstance(a, str):\n    a = float(a.replace(',', '.'))\n  if isinstance(b, str):\n    b = float(b.replace(',', '.'))\n  return max(a, b)   \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n  if a == b:\n    return None\n  if isinstance(a, str):\n    a = float(a.replace(',', '.'))\n  if isinstance(b, str):\n    b = float(b.replace(',', '.'))\n  if a > b:\n    return a\n  return b \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n  for i in range(2, n // 2 + 1, 2):\n    for j in range(2, (n - i) // 2 + 1, 2):\n      for k in range(2, (n - i - j) // 2 + 1, 2):\n        for l in range(2, (n - i - j - k) // 2 + 1, 2):\n          if i + j + k + l == n:\n            return True\n  return False \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n  for i in range(2, n//2 + 1, 2):\n    for j in range(i, (n - i)//2 + 1, 2):\n      for k in range(j, (n - i - j)//2 + 1, 2):\n        l = n - i - j - k\n        if l > 0 and l % 2 == 0:\n          return True\n  return False \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n  result = 1\n  for i in range(1, n + 1):\n    result *= factorial(i)\n  return result\n\ndef factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n  result = ''\n  i = 0\n  while i < len(text):\n    if text[i] == ' ':\n      if i + 1 < len(text) and text[i + 1] == ' ':\n        if i + 2 < len(text) and text[i + 2] == ' ':\n          result += '-'\n          i += 3\n        else:\n          result += '_'\n          i += 2\n      else:\n        result += '_'\n        i += 1\n    else:\n      result += text[i]\n      i += 1\n  return result  \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n  result = ''\n  i = 0\n  while i < len(text):\n    if text[i] == ' ':\n      if i + 1 < len(text) and text[i + 1] == ' ' and i + 2 < len(text) and text[i + 2] == ' ':\n        result += '-'\n        i += 3\n      else:\n        result += '_'\n        i += 1\n    else:\n      result += text[i]\n      i += 1\n  return result  \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n  if file_name.count('.') != 1:\n    return 'No'\n  parts = file_name.split('.')\n  if not parts[0] or not parts[0][0].isalpha():\n    return 'No'\n  if parts[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n  return 'Yes' if file_name.count('0'-'9') <= 3 else 'No' \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n  if file_name.count('.') != 1:\n    return 'No'\n  parts = file_name.split('.')\n  if not parts[0] or not parts[0][0].isalpha():\n    return 'No'\n  if parts[1] not in ['txt', 'exe', 'dll']:\n    return 'No'\n  return 'Yes' if file_name.count('0') + file_name.count('1') + file_name.count('2') + file_name.count('3') + file_name.count('4') + file_name.count('5') + file_name.count('6') + file_name.count('7') + file_name.count('8') + file_name.count('9') <= 3 else 'No'  \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n  for i in range(len(lst)):\n    if i % 3 == 0:\n      lst[i] **= 2\n    if i % 4 == 0 and i % 3 != 0:\n      lst[i] **= 3\n  return sum(lst)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n  words = sentence.split()\n  prime_words = []\n  for word in words:\n    if len(word) > 1 and all(len(word) % i for i in range(2, int(len(word)**0.5) + 1)):\n      prime_words.append(word)\n  return \" \".join(prime_words)  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n  return int(x.split('/')[0]) * int(n.split('/')[0]) % int(x.split('/')[1]) * int(n.split('/')[1]) == 0 \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n  return int(x.split('/')[0]) * int(n.split('/')[0]) % int(x.split('/')[1]) * int(n.split('/')[1]) == 0 \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n  return int(x.split('/')[0]) * int(n.split('/')[0]) % int(x.split('/')[1]) * int(n.split('/')[1]) == 0 \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n  return sorted(nums, key=lambda x: sum(int(digit) for digit in str(abs(x))), key=lambda x: nums.index(x)) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n  return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x))) \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n  return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), x)) \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n  count = 0\n  for num in nums:\n    if num > 10:\n      num_str = str(abs(num))\n      if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n        count += 1\n  return count  \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n  a = [(i * i - i + 1) for i in range(1, n + 1)]\n  count = 0\n  for i in range(n - 2):\n    for j in range(i + 1, n - 1):\n      for k in range(j + 1, n):\n        if (a[i] + a[j] + a[k]) % 3 == 0:\n          count += 1\n  return count \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/148", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\ndef bf(planet1, planet2):\n  if planet1 in planets and planet2 in planets:\n    i1 = planets.index(planet1) \n    i2 = planets.index(planet2)\n    return tuple(planets[i1+1:i2])\n  else:\n    return ()\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/148", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\ndef bf(planet1, planet2):\n  if planet1 in planets and planet2 in planets:\n    i1 = planets.index(planet1) \n    i2 = planets.index(planet2)\n    return tuple(planets[i1+1:i2])\n  else:\n    return () \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/148", "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\ndef bf(planet1, planet2):\n  if planet1 in planets and planet2 in planets:\n    i1 = planets.index(planet1) \n    i2 = planets.index(planet2)\n    return tuple(planets[i1+1:i2])\n  else:\n    return ()  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n  return sorted([word for word in lst if len(word) % 2 == 0], key=lambda word: (len(word),word)) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n  if n > 1:\n    for i in range(2, int(n**0.5) + 1):\n      if (n % i) == 0:\n        return y\n    return x\n  else:\n    return y \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n  return sum([x**2 for x in lst if isinstance(x, int) and x % 2 != 0]) \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n  return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0) \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n  return [abs(g-s) for g,s in zip(guess,game)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n  strongest_extension = None\n  max_strength = float('-inf')\n  for extension in extensions:\n    cap = sum(1 for c in extension if c.isupper())\n    sm = sum(1 for c in extension if c.islower())\n    strength = cap - sm\n    if strength > max_strength:\n      max_strength = strength\n      strongest_extension = extension\n  return f'{class_name}.{strongest_extension}'    \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n  for i in range(len(b)):\n    if a.find(b[i:]) + len(b[i:]) == len(a):\n      return True\n  return False \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n  for i in range(len(b)):\n    if a.find(b[i:]) != -1:\n      return True\n  return False \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a , b):\n  for i in range(len(b)):\n    if a.find(b[i:]) != -1 or a.find(b[ :i] ) != -1:\n      return True\n  return False \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n  even = 0\n  odd = 0\n  for digit in str(abs(num)):\n    if int(digit) % 2 == 0:\n      even += 1\n    else:\n      odd += 1\n  return (even, odd)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n  roman_map = {'M': 1000, 'CM': 900, 'D': 500, 'CD': 400, 'C': 100, 'XC': 90, 'L': 50, 'XL': 40, 'X': 10, 'IX': 9, 'V': 5, 'IV': 4, 'I': 1}\n  result = ''\n  for key, value in roman_map.items():\n    while number >= value:\n      result += key\n      number -= value\n  return result.lower() \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n  return a**2 + b**2 == c**2\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n  return (a**2 + b**2 == c**2)  \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n  return (a**2 + b**2 == c**2)  \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n  max_unique = 0\n  result = \"\"\n  for word in words:\n    unique = len(set(word))\n    if unique > max_unique:\n      max_unique = unique\n      result = word\n  return result \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n  max_unique = 0\n  result = \"\"\n  for word in words:\n    unique = len(set(word))\n    if unique > max_unique:\n      max_unique = unique\n      result = word\n  return result \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n  max_unique = 0\n  result = \"\"\n  for word in words:\n    unique = len(set(word))\n    if unique > max_unique:\n      max_unique = unique\n      result = word\n  return result \n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n  eaten = number + min(need, remaining)\n  return [eaten, remaining - (need if remaining >= need else remaining)] \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n  expression = str(operand[0])\n  for i in range(len(operator)):\n    expression += operator[i] + str(operand[i + 1])\n  return eval(expression) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n  if not any(c.isalpha() for c in s):\n    return s[::-1]\n  result = []\n  for c in s:\n    if c.isalpha():\n      result.append(c.swapcase())\n    else:\n      result.append(c)\n  return ''.join(result) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/162", "completion": "import hashlib\nif text == \"\":\n  return None\nreturn hashlib.md5(text.encode()).hexdigest() \n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/162", "completion": "import hashlib\ndef string_to_md5(text):\n  if text == \"\":\n    return None\n  return hashlib.md5(text.encode()).hexdigest() \n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n  return sorted([x for x in range(a, b + 1) if x % 2 == 0])\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n  return sorted([int(digit) for digit in str(range(a, b + 1)) if int(digit) % 2 == 0]) \n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n  return sorted([int(digit) for digit in str(a) if int(digit) % 2 == 0 for a in range(b+1)]) \n", "attempt_no": 3, "passed_tests": false}
