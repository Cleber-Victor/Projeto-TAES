{"task_id": "HumanEval/0", "completion": "from typing import List\nimport itertools\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    return any(abs(x - y) < threshold for x, y in itertools.combinations(numbers, 2))\n\ndef main():\n    print(has_close_elements([1.0, 2.0, 3.0], 0.5)) \n    print(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    group = ''\n    balance = 0\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        group += char\n        if balance == 0:\n            result.append(group)\n            group = ''\n    return result\n\nprint(separate_paren_groups('( ) (( )) (( )( ))')) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\ndef main():\n    print(below_zero([1, 2, 3]))  # False\n    print(below_zero([1, 2, -4, 5]))  # True\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n\ndef main():\n    print(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result\n\nprint(intersperse([], 4)) \nprint(intersperse([1, 2, 3], 4))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        curr_depth = 0\n        for char in group:\n            if char == '(':\n                curr_depth += 1\n                max_depth = max(max_depth, curr_depth)\n            elif char == ')':\n                curr_depth -= 1\n        result.append(max_depth)\n    return result\n\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [string for string in strings if substring in string]\n\n\ndef main():\n    print(filter_by_substring([], 'a'))\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))\n\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\nimport math\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = math.prod(numbers) if numbers else 1\n    return total_sum, total_product\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    max_so_far = float('-inf')\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        result.append(max_so_far)\n    return result\n\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2])) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string[:i+1] + string[:i][::-1]\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            if i == len(string):\n                return string\n            return string + string[:i][::-1]\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be the same length\")\n\n    result = [str(int(x) ^ int(y)) for x, y in zip(a, b)]\n    return ''.join(result)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)\n\n# Test cases\nprint(longest([])) \nprint(longest(['a', 'b', 'c'])) \nprint(longest(['a', 'bb', 'ccc']))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\ndef main():\n    print(greatest_common_divisor(3, 5))\n    print(greatest_common_divisor(25, 15))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i+1] for i in range(len(string))]\n\nprint(all_prefixes('abc'))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\nprint(count_distinct_characters('xyzXYZ')) \nprint(count_distinct_characters('Jerry'))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    music_string = music_string.split()\n    result = []\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o' and i + 1 < len(music_string) and music_string[i + 1] == '|':\n            result.append(notes['o|'])\n            i += 2\n        elif music_string[i] == 'o':\n            result.append(notes['o'])\n            i += 1\n        elif music_string[i] == '.|':\n            result.append(notes['.|'])\n            i += 1\n    return result\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    music_string = music_string.replace('o |', 'o|').replace('. |', '.|')\n    music_string = music_string.split()\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o' and i + 1 < len(music_string) and music_string[i + 1] == '|':\n            result.append(notes['o|'])\n            i += 2\n        elif music_string[i] == '.' and i + 1 < len(music_string) and music_string[i + 1] == '|':\n            result.append(notes['.|'])\n            i += 2\n        elif music_string[i] == 'o':\n            result.append(notes['o'])\n            i += 1\n        elif music_string[i] == 'o|':\n            result.append(notes['o|'])\n            i += 1\n        elif music_string[i] == '.|':\n            result.append(notes['.|'])\n            i += 1\n    return result\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start < len(string):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/19", "completion": "from typing import List, Dict\n\ndef sort_numbers(numbers: str) -> str:\n    num_map: Dict[str, int] = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    num_list: List[str] = numbers.split()\n    num_list.sort(key=lambda x: num_map[x])\n    return ' '.join(num_list)\n\nprint(sort_numbers('three one five'))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\nimport itertools\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    return min(itertools.combinations(sorted(numbers), 2), key=lambda x: abs(x[0] - x[1]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/22", "completion": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [value for value in values if isinstance(value, int)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef main():\n    print(factorize(8))  # [2, 2, 2]\n    print(factorize(25))  # [5, 5]\n    print(factorize(70))  # [2, 5, 7]\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/26", "completion": "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = Counter(numbers)\n    return [num for num in numbers if count[num] == 1]\n\ndef main():\n    print(remove_duplicates([1, 2, 3, 2, 4]))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]\n\ndef main():\n    print(filter_by_prefix([], 'a'))\n    print(filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a'))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [num for num in l if num > 0]\n\nprint(get_positive([-1, 2, -4, 5, 6]))\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/32", "completion": "import math\nimport scipy.optimize as optimize\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients must be even\")\n    max_coeff = max(xs, key=abs)\n    if max_coeff == 0:\n        raise ValueError(\"Largest coefficient must be non-zero\")\n    return optimize.root_scalar(poly, args=(xs,), bracket=[-100, 100]).root\n\n\nprint(round(find_zero([1, 2]), 2)) \nprint(round(find_zero([-6, 11, -6, 1]), 2))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/32", "completion": "import math\nimport scipy.optimize as optimize\n\n\ndef poly(x: float, xs: list):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients must be even\")\n    max_coeff = max(xs, key=abs)\n    if max_coeff == 0:\n        raise ValueError(\"Largest coefficient must be non-zero\")\n    return optimize.root_scalar(poly, args=(xs,), bracket=[-100, 100]).root\n\n\nprint(round(find_zero([1, 2]), 2)) \nprint(round(find_zero([-6, 11, -6, 1]), 2))\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/32", "completion": "import math\nimport scipy.optimize as optimize\n\ndef poly(x: float, xs: list):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    def f(x):\n        return poly(x, xs)\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients must be even\")\n    max_coeff = max(xs, key=abs)\n    if max_coeff == 0:\n        raise ValueError(\"Largest coefficient must be non-zero\")\n    return optimize.root_scalar(f, bracket=[-100, 100]).root\n\nprint(round(find_zero([1, 2]), 2)) \nprint(round(find_zero([-6, 11, -6, 1]), 2))\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    values_to_sort = [l[i] for i in third_indices]\n    sorted_values = sorted(values_to_sort)\n    sorted_list = l[:]\n    for i, value in zip(third_indices, sorted_values):\n        sorted_list[i] = value\n    return sorted_list\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))\n\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n\ndef main():\n    print(max_element([1, 2, 3]))\n    print(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even = sorted([l[i] for i in range(0, len(l), 2)])\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/39", "completion": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_fib(n: int) -> int:\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if a > 1 and is_prime(a):\n            count += 1\n            if count == n:\n                return a\n\n\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                if l[i] != l[left] and l[i] != l[right] and l[left] != l[right]:\n                    return True\n                left += 1\n                right -= 1\n    return False\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                if l[i] != l[left] and l[i] != l[right] and l[left] != l[right]:\n                    return True\n                left += 1\n                right -= 1\n    return False\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                if l[i] != l[left] and l[i] != l[right] and l[left] != l[right]:\n                    return True\n                break\n                # Added break statement to avoid incorrect behavior when triple sum is zero\n        if l.count(l[i]) > 1:\n            continue\n    return False\n\ndef triples_sum_to_zero_v2(l: list):\n    l = list(set(l))  # remove duplicate elements\n    for i in range(len(l) - 2):\n        for j in range(i + 1, len(l) - 1):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * n\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [i + 1 for i in l]\n\nprint(incr_list([1, 2, 3]))\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen and -num != num:\n            return True\n        seen.add(num)\n    return False\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    nums = []\n    while x:\n        nums.append(int(x % base))\n        x //= base\n    return ''.join(map(str, nums[::-1]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n+1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n\nprint(median([3, 1, 2, 4, 5]))\nprint(median([-10, 4, 6, 1000, 10, 20]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    text = text.lower()\n    return text == text[::-1]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n = n // 2\n    return result\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str) -> str:\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str) -> str:\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str) -> str:\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n\ndef main():\n    encoded_str = encode_shift(\"abcdefghijklmnopqrstuvwxyz\")\n    print(decode_shift(encoded_str))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(i < t for i in l)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef main():\n    print(fib(10))\n    print(fib(1))\n    print(fib(8))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\nprint(correct_bracketing(\"<\"))\nprint(correct_bracketing(\"<>\"))\nprint(correct_bracketing(\"<<><>>\"))\nprint(correct_bracketing(\"><<>\"))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = decreasing = True\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n\n    return increasing or decreasing\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\nprint(common([5, 3, 2, 8], [3, 2]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\nprint(largest_prime_factor(13195))\nprint(largest_prime_factor(2048))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append('(')\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\ndef main():\n    print(correct_bracketing(\"(\")) \n    print(correct_bracketing(\"()\")) \n    print(correct_bracketing(\"(()())\")) \n    print(correct_bracketing(\")(()\")) \n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i * x for i, x in enumerate(xs[1:], start=1)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n\ndef main():\n    print(fibfib(1)) # 0\n    print(fibfib(5)) # 4\n    print(fibfib(8)) # 24\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    count = sum(1 for char in s[:-1] if char in 'aeiou') + (1 if s.endswith('y') else 0)\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))   # 3\nprint(vowels_count(\"abcdefghy\"))  # 2\nprint(vowels_count(\"AEIOUY\"))  # 5\nprint(vowels_count(\"bcdfg\"))  # 0\nprint(vowels_count(\"\"))  # 0\nprint(vowels_count(\"a\"))  # 1\nprint(vowels_count(\"y\"))  # 1\nprint(vowels_count(\"AbcdeY\"))  # 3\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    count = sum(1 for char in s if char in 'aeiou') + (1 if s.endswith('y') and 'y' not in s[:-1] else 0)\n    return count\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    return s[-shift:] + s[:-shift]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    s = s.replace(\" and \", \" \").split()\n    apples = int(s[0])\n    oranges = int(s[2])\n    return n - apples - oranges\n\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19)) \nprint(fruit_distribution(\"0 apples and 1 oranges\",3)) \nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) \nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    even_values = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even = min(even_values, key=lambda x: (x[0], x[1]))\n    return [smallest_even[0], smallest_even[1]]\n\nprint(pluck([4,2,3]))  # [2, 1]\nprint(pluck([1,2,3]))  # [2, 1]\nprint(pluck([]))  # []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # [0, 1]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    result = -1\n    for num, count in freq.items():\n        if count >= num and num > result:\n            result = num\n    return result\n\nprint(search([4, 1, 2, 2, 3, 1]))\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nprint(search([5, 5, 4, 4, 4]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = []\n    remaining = lst[:]\n    ascending = True\n    while remaining:\n        if ascending:\n            val = min(remaining)\n        else:\n            val = max(remaining)\n        sorted_lst.append(val)\n        remaining.remove(val)\n        ascending = not ascending\n    return sorted_lst\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/71", "completion": "import math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    def total_chars(lst):\n        return sum(len(i) for i in lst)\n\n    if total_chars(lst1) <= total_chars(lst2):\n        return lst1\n    else:\n        return lst2\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef get_prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef is_multiply_prime(a):\n    factors = get_prime_factors(a)\n    for factor in factors:\n        if not is_prime(factor):\n            return False\n    return len(factors) == 3\n\nprint(is_multiply_prime(30))  # True\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    if x < 1:\n        return False\n    log_val = math.log(x, n)\n    return log_val == int(log_val)\n\nprint(is_simple_power(1, 4)) \nprint(is_simple_power(2, 2)) \nprint(is_simple_power(8, 2)) \nprint(is_simple_power(3, 2)) \nprint(is_simple_power(3, 1)) \nprint(is_simple_power(5, 3))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    log_val = math.log(x, n)\n    return log_val == int(log_val)\n\nprint(is_simple_power(1, 4)) \nprint(is_simple_power(2, 2)) \nprint(is_simple_power(8, 2)) \nprint(is_simple_power(3, 2)) \nprint(is_simple_power(3, 1)) \nprint(is_simple_power(5, 3))\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    if x < 1 or n < 2:\n        return False\n    if x == 1:\n        return True\n    log_val = math.log(x, n)\n    return math.isclose(log_val, round(log_val))\n\nprint(is_simple_power(1, 4)) \nprint(is_simple_power(2, 2)) \nprint(is_simple_power(8, 2)) \nprint(is_simple_power(3, 2)) \nprint(is_simple_power(3, 1)) \nprint(is_simple_power(5, 3))\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return round(abs(a) ** (1/3)) ** 3 == abs(a)\n\ndef main():\n    print(iscube(1)) \n    print(iscube(2)) \n    print(iscube(-1)) \n    print(iscube(64)) \n    print(iscube(0)) \n    print(iscube(180))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in primes)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    return len(s) >= 3 and all(len(set(s[i:i+3])) == 3 for i in range(len(s)-2))\n\nprint(is_happy('a')) \nprint(is_happy('aa')) \nprint(is_happy('abcd')) \nprint(is_happy('aabb')) \nprint(is_happy('adb')) \nprint(is_happy('xyy'))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    result = []\n    for grade in grades:\n        if grade == 4.0:\n            result.append('A+')\n        elif grade > 3.7:\n            result.append('A')\n        elif grade > 3.3:\n            result.append('A-')\n        elif grade > 3.0:\n            result.append('B+')\n        elif grade > 2.7:\n            result.append('B')\n        elif grade > 2.3:\n            result.append('B-')\n        elif grade > 2.0:\n            result.append('C+')\n        elif grade > 1.7:\n            result.append('C')\n        elif grade > 1.3:\n            result.append('C-')\n        elif grade > 1.0:\n            result.append('D+')\n        elif grade > 0.7:\n            result.append('D')\n        elif grade > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n\nprint(prime_length('Hello')) \nprint(prime_length('abcdcba')) \nprint(prime_length('kittens')) \nprint(prime_length('orange'))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    total_count = 9 * (10 ** (n - 1))\n    start_with_one_count = 10 ** (n - 1)\n    end_with_one_count = 9 * (10 ** (n - 1))\n    overlap_count = 9 ** (n - 1)\n    return start_with_one_count + end_with_one_count - overlap_count\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    total_count = 9 * (10 ** (n - 1))\n    start_with_one_count = 10 ** (n - 1)\n    end_with_one_count = 9 * (10 ** (n - 1))\n    overlap_count = 10 ** (n - 2)\n    return start_with_one_count + end_with_one_count - overlap_count - (n == 1) * 8\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    count_start_with_one = 10 ** (n - 1)\n    count_end_with_one = 9 * 10 ** (n - 2) * 10\n    count_overlap = 10 ** (n - 2)\n    return count_start_with_one + count_end_with_one - count_overlap\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]\n    binary_sum = sum(int(digit) for digit in binary)\n    return bin(binary_sum)[2:]\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    binary = bin(N)[2:]\n    binary_sum = sum(int(digit) for digit in binary)\n    return bin(binary_sum)[2:]\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum([num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 == 0])\n\nprint(add([4, 2, 6, 7])) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    result = []\n    for word in s.split():\n        if word.isalpha():\n            result.append(''.join(sorted(word)))\n        else:\n            chars = [c for c in word]\n            alphabets = [c for c in word if c.isalpha()]\n            non_alphabets = [c for c in word if not c.isalpha()]\n            sorted_alphabets = sorted(alphabets)\n            sorted_word = []\n            alpha_index = 0\n            non_alpha_index = 0\n            for c in word:\n                if c.isalpha():\n                    sorted_word.append(sorted_alphabets[alpha_index])\n                    alpha_index += 1\n                else:\n                    sorted_word.append(non_alphabets[non_alpha_index])\n                    non_alpha_index += 1\n            result.append(''.join(sorted_word))\n    return ' '.join(result)\n\nprint(anti_shuffle('Hi'))  # returns 'Hi'\nprint(anti_shuffle('hello'))  # returns 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # returns 'Helo !!!dlroW'\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    result = []\n    for word in s.split():\n        chars = [c for c in word]\n        alphabets = [c for c in word if c.isalpha()]\n        non_alphabets = [c for c in word if not c.isalpha()]\n        sorted_alphabets = sorted(alphabets, key=lambda c: c.lower())\n        sorted_word = []\n        alpha_index = 0\n        non_alpha_index = 0\n        for c in word:\n            if c.isalpha():\n                if c.islower():\n                    sorted_word.append(sorted_alphabets[alpha_index])\n                else:\n                    sorted_word.append(sorted_alphabets[alpha_index].upper())\n                alpha_index += 1\n            else:\n                sorted_word.append(non_alphabets[non_alpha_index])\n                non_alpha_index += 1\n        result.append(''.join(sorted_word))\n    return ' '.join(result)\n\nprint(anti_shuffle('Hi'))  \nprint(anti_shuffle('hello'))  \nprint(anti_shuffle('Hello World!!!'))\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    result = []\n    for word in s.split():\n        chars = [c for c in word]\n        sorted_alphabets = sorted([c for c in word if c.isalpha()], key=lambda c: c.lower())\n        sorted_non_alphabets = sorted([c for c in word if not c.isalpha()])\n        alpha_index = 0\n        non_alpha_index = 0\n        sorted_word = []\n        for c in word:\n            if c.isalpha():\n                if c.islower():\n                    sorted_word.append(sorted_alphabets[alpha_index])\n                else:\n                    sorted_word.append(sorted_alphabets[alpha_index].upper())\n                alpha_index += 1\n            else:\n                sorted_word.append(sorted_non_alphabets[non_alpha_index])\n                non_alpha_index += 1\n        result.append(''.join(sorted_word))\n    return ' '.join(result)\n\nprint(anti_shuffle('Hi'))  \nprint(anti_shuffle('hello'))  \nprint(anti_shuffle('Hello World!!!'))\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    coords = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]\n    coords.sort(key=lambda x: (x[0], -x[1]))\n    return coords\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return array\n    sum_of_first_and_last = array[0] + array[-1]\n    if sum_of_first_and_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\nprint(sort_array([]))\nprint(sort_array([5]))\nprint(sort_array([2, 4, 3, 0, 1, 5]))\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + 2**2) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n\nprint(encrypt('hi')) \nprint(encrypt('asdfghjkl')) \nprint(encrypt('gf')) \nprint(encrypt('et'))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    unique_lst = sorted(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    return unique_lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5])) \nprint(next_smallest([5, 1, 4, 3, 2])) \nprint(next_smallest([])) \nprint(next_smallest([1, 1]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    return sum(1 for sentence in sentences if sentence and sentence.strip().startswith('I'))\n\nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/91", "completion": "import re\n\ndef is_bored(S):\n    sentences = re.split('[.!?]', S)\n    return sum(1 for sentence in sentences if sentence and sentence.strip() and sentence.strip()[0].lower() == 'i' and sentence.strip().split()[0].lower() == 'i')\n\nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\nprint(is_bored(\"Is the sky blue?\"))\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    return x == y + z or y == x + z or z == x + y\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                index = ord(char.lower()) - ord('a')\n                new_char = chr((index + 2) % 26 + ord('a'))\n                if char.isupper():\n                    encoded_message += new_char.upper()\n                else:\n                    encoded_message += new_char\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = ord(char.lower()) - ord('a')\n                new_char = chr((index + 2) % 26 + ord('a'))\n                if char.isupper():\n                    encoded_message += new_char.upper()\n                else:\n                    encoded_message += new_char\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = ord(char.lower()) - ord('a')\n                new_char = chr((index + 2) % 26 + ord('a'))\n                encoded_message += new_char.swapcase() if char.isupper() else new_char\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef skjkasdkd(lst):\n    primes = [num for num in lst if is_prime(num)]\n    if primes:\n        max_prime = max(primes)\n        return sum_of_digits(max_prime)\n    else:\n        return 0\n\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nprint(skjkasdkd([0,81,12,3,1,21]))\nprint(skjkasdkd([0,8,1,2,1,7]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    if not d:\n        return False\n    if all(isinstance(k, str) and k.islower() for k in d):\n        return True\n    if all(isinstance(k, str) and k.isupper() for k in d):\n        return True\n    return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})) \nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) \nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})) \nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) \nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\ndef main():\n    test_cases = [\n        {\"a\":\"apple\", \"b\":\"banana\"},\n        {\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"},\n        {\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"},\n        {\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"},\n        {\"STATE\":\"NC\", \"ZIP\":\"12345\" }\n    ]\n    for test_case in test_cases:\n        print(f\"Test case: {test_case}, result: {check_dict_case(test_case)}\")\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\nprint(count_up_to(5)) \nprint(count_up_to(11)) \nprint(count_up_to(0)) \nprint(count_up_to(20)) \nprint(count_up_to(1)) \nprint(count_up_to(18))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char in vowels:\n            count += 1\n    return count\n\nprint(count_upper('aBCdEf')) \nprint(count_upper('abcdefg')) \nprint(count_upper('dBBE'))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num % 1 == 0.5:\n        return int(num + 0.5 * (1 if num >= 0 else -1))\n    else:\n        return round(num)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    while len(pile) < n:\n        if pile[-1] % 2 == 0:\n            pile.append(pile[-1] + 2)\n        else:\n            pile.append(pile[-1] + 2)\n    return pile\n\nprint(make_a_pile(3))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.replace(',', ' ').split()\n\nprint(words_string(\"Hi, my name is John\"))\nprint(words_string(\"One, two, three, four, five, six\"))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n\nprint(choose_num(12, 15))  # 14\nprint(choose_num(13, 12))  # -1\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = total // (m - n + 1)\n    return bin(round(avg))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    avg = round(total / (m - n + 1))\n    return bin(avg)\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_even_digit(n):\n        return any(int(d) % 2 == 0 for d in str(n))\n\n    result = [n for n in x if not has_even_digit(n)]\n    return sorted(result)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    num_to_word = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    return [num_to_word[i] for i in sorted([x for x in arr if 1 <= x <= 9], reverse=True)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(x):\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n\n    return [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]\n\nprint(f(5))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(n):\n        return sum(int(d) for d in str(n).replace('-', ''))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)\n\ndef sum_of_abs_digits(n):\n    return sum(int(d) for d in str(abs(n)))\n\ndef count_nums_abs(arr):\n    return sum(1 for num in arr if sum_of_abs_digits(num) > 0)\n\ndef sum_signed_digits(n):\n    digits = str(n)\n    if digits[0] == '-':\n        return -int(digits[1]) + sum(int(d) for d in digits[2:])\n    else:\n        return sum(int(d) for d in digits)\n\ndef count_nums_signed(arr):\n    return sum(1 for num in arr if sum(int(d) for d in str(abs(num))) > 0)\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(d) for i, d in enumerate(str(abs(num))) if i == 0 and num < 0 else int(d)) > 0)\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(1 for num in arr if sum([int(d) for d in str(num).replace('-', '')]) > 0)\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    for _ in range(len(arr)):\n        if all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n    return \"YES\" if even_count >= odd_count else \"NO\"\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    test = test.split()\n    count = {}\n    for letter in test:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n\n    if count:\n        max_count = max(count.values())\n        return {letter: count for letter, count in count.items() if count == max_count}\n    else:\n        return {}\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])\n\nprint(reverse_delete(\"abcde\", \"ae\")) \nprint(reverse_delete(\"abcdef\", \"b\"))  \nprint(reverse_delete(\"abcdedcba\", \"ab\"))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result\n\nprint(odd_count(['1234567']))\nprint(odd_count(['3',\"11111111\"]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\ndef main():\n    print(minSubArraySum([2, 3, 4, 1, 2, 4]))  # 1\n    print(minSubArraySum([-1, -2, -3]))  # -6\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n\ndef test_max_fill():\n    grid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    capacity1 = 1\n    assert max_fill(grid1, capacity1) == 6\n\n    grid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    capacity2 = 2\n    assert max_fill(grid2, capacity2) == 6\n\n    grid3 = [[0,0,0], [0,0,0]]\n    capacity3 = 5\n    assert max_fill(grid3, capacity3) == 0\n\ntest_max_fill()\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/115", "completion": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n\ndef test_max_fill():\n    grid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    capacity1 = 1\n    assert max_fill(grid1, capacity1) == 6\n\n    grid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    capacity2 = 2\n    assert max_fill(grid2, capacity2) == 6\n\n    grid3 = [[0,0,0], [0,0,0]]\n    capacity3 = 5\n    assert max_fill(grid3, capacity3) == 0\n\ntest_max_fill()\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/115", "completion": "import math\n\ndef max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n\ndef test_max_fill():\n    grid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    capacity1 = 1\n    assert max_fill(grid1, capacity1) == 6\n\n    grid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    capacity2 = 2\n    assert max_fill(grid2, capacity2) == 5\n\n    grid3 = [[0,0,0], [0,0,0]]\n    capacity3 = 5\n    assert max_fill(grid3, capacity3) == 0\n\ntest_max_fill()\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(abs(x)).count('1'), abs(x)))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1') if x >= 0 else bin(-x).count('1'), x))\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    vowels = 'aeiouAEIOU'\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result\n\nprint(select_words(\"Mary had a little lamb\", 4)) \nprint(select_words(\"Mary had a little lamb\", 3)) \nprint(select_words(\"simple white space\", 2)) \nprint(select_words(\"Hello world\", 4)) \nprint(select_words(\"Uncle sam\", 3))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and i < len(word) - 1 and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\nprint(get_closest_vowel(\"yogurt\")) \nprint(get_closest_vowel(\"FULL\"))   \nprint(get_closest_vowel(\"quick\"))  \nprint(get_closest_vowel(\"ab\"))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_balanced(s):\n        count = 0\n        for c in s:\n            if c == '(':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return False\n        return count == 0\n\n    return 'Yes' if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]) else 'No'\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(sorted(arr, reverse=True)[:k])\n\ndef main():\n    print(maximum([-3, -4, 5], 3))  \n    print(maximum([4, -4, 4], 2))  \n    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  \n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 1)\n\nprint(solution([5, 8, 7, 1])) \nprint(solution([3, 3, 3, 3, 3])) \nprint(solution([30, 13, 24, 321]))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 == 1)\n\nprint(solution([5, 8, 7, 1])) \nprint(solution([3, 3, 3, 3, 3])) \nprint(solution([30, 13, 24, 321]))\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)\n\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4\nprint(add_elements(arr, k))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(i for i in arr[:k] if len(str(abs(i))) <= 2)\n\narr = [111,21,3,4000,5,6,7,8,9]\nk = 4\nprint(add_elements(arr, k))\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([x for x in sequence if x % 2 != 0])\n\nprint(get_odd_collatz(5))  # [1, 5]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/124", "completion": "import re\n\ndef valid_date(date):\n    if not date:\n        return False\n    if not re.match(r\"^\\d{2}-\\d{2}-\\d{4}$\", date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if not 1 <= month <= 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    else:\n        return 1 <= day <= 29\n\nprint(valid_date('03-11-2000')) \nprint(valid_date('15-01-2012')) \nprint(valid_date('04-0-2040')) \nprint(valid_date('06-04-2020')) \nprint(valid_date('06/04/2020'))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for i, c in enumerate(txt) if c.islower() and i % 2 != 0)\n\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # \u279e 3\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(i) <= 2 for i in lst)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"\n\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\"\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start \n    if length == 0:\n        return \"NO\"\n    return \"YES\" if is_prime(length + 1) else \"NO\"\n\nprint(intersection((1, 2), (2, 3))) \nprint(intersection((-1, 1), (0, 4))) \nprint(intersection((-3, -1), (-5, 5)))\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"\n\nprint(intersection((1, 2), (2, 3))) \nprint(intersection((-1, 1), (0, 4))) \nprint(intersection((-3, -1), (-5, 5)))\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        product *= 1 if num > 0 else -1 if num < 0 else 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes if product != 0 else 0\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/129", "completion": "from collections import deque\n\ndef minPath(grid, k):\n    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    queue = deque([(x, y, [grid[x][y]]) for x in range(rows) for y in range(cols)])\n    seen = {(x, y, tuple([grid[x][y]])) for x in range(rows) for y in range(cols)}\n\n    for _ in range(k - 1):\n        temp = deque()\n        while queue:\n            x, y, path = queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < rows and 0 <= ny < cols:\n                    new_path = path + [grid[nx][ny]]\n                    if (nx, ny, tuple(new_path)) not in seen:\n                        seen.add((nx, ny, tuple(new_path)))\n                        temp.append((nx, ny, new_path))\n        queue = temp\n\n    return min(queue, key=lambda x: x[2])[2]\n\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3)) \nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/129", "completion": "from collections import deque\n\ndef minPath(grid, k):\n    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    queue = deque([(x, y, [grid[x][y]]) for x in range(rows) for y in range(cols)])\n\n    for _ in range(k - 1):\n        temp = deque()\n        for x, y, path in queue:\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < rows and 0 <= ny < cols:\n                    new_path = path + [grid[nx][ny]]\n                    temp.append((nx, ny, new_path))\n        queue = temp\n\n    return min([x[2] for x in queue])\n\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3)) \nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/129", "completion": "from collections import deque\n\ndef minPath(grid, k):\n    rows, cols = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    queue = deque([(x, y, [grid[x][y]]) for x in range(rows) for y in range(cols)])\n\n    for _ in range(k - 1):\n        temp = deque()\n        for x, y, path in queue:\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < rows and 0 <= ny < cols:\n                    new_path = path + [grid[nx][ny]]\n                    temp.append((nx, ny, new_path))\n        queue = temp\n\n    return min([path for _, _, path in queue])\n\nprint(minPath([[1,2,3], [4,5,6], [7,8,9]], 3)) \nprint(minPath([[5,9,3], [4,1,6], [7,8,2]], 1))\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    else:\n        def tribonacci(i, memo):\n            if i in memo:\n                return memo[i]\n            elif i == 1:\n                return 3\n            elif i % 2 == 0:\n                result = 1 + i / 2\n            else:\n                result = tribonacci(i - 1, memo) + tribonacci(i - 2, memo) + tribonacci(i + 1, memo)\n            memo[i] = result\n            return result\n\n        memo = {0: 1}\n        return [tribonacci(i, memo) for i in range(n + 1)]\n\nprint(tri(3))  # [1, 3, 2, 8]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for i in str(n):\n        if int(i) % 2 != 0:\n            product *= int(i)\n        else:\n            if product == 1:\n                product = 0\n    return product\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for i in str(n):\n        if int(i) % 2 != 0:\n            product *= int(i)\n    if product == 1:\n        return 0\n    return product\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    all_even = True\n    for i in str(n):\n        if int(i) % 2 != 0:\n            product *= int(i)\n            all_even = False\n    if all_even:\n        return 0\n    return product\n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 1:\n                return True\n            if not stack:\n                return False\n            stack.pop()\n    return False\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if len(stack) > 1:\n                return True\n            stack.pop()\n    return False\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            if len(stack) > 1:\n                return True\n            stack.pop()\n    return False and stack == []\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return sum([math.ceil(i)**2 for i in lst])\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    if not txt[-1].isalpha():\n        return False\n    words = txt.split()\n    return len(words[-1]) == 1\n\nprint(check_if_last_char_is_a_letter(\"apple pie\")) \nprint(check_if_last_char_is_a_letter(\"apple pi e\")) \nprint(check_if_last_char_is_a_letter(\"apple pi e \")) \nprint(check_if_last_char_is_a_letter(\"\")) \n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_integers = [i for i in lst if i < 0]\n    positive_integers = [i for i in lst if i > 0]\n\n    a = max(negative_integers) if negative_integers else None\n    b = min(positive_integers) if positive_integers else None\n\n    return (a, b)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    a = replace_separator(a)\n    b = replace_separator(b)\n    a_value = float(a) if isinstance(a, str) else a\n    b_value = float(b) if isinstance(b, str) else b\n    if a_value > b_value:\n        return a if isinstance(a, str) else type(b)(a)\n    elif b_value > a_value:\n        return b if isinstance(b, str) else type(a)(b)\n    else:\n        return None\n\ndef replace_separator(num):\n    if isinstance(num, str):\n        return num.replace(',', '.')\n    return num\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    a = replace_separator(a)\n    b = replace_separator(b)\n    a_value = float(a) if isinstance(a, str) else a\n    b_value = float(b) if isinstance(b, str) else b\n    if a_value > b_value:\n        return a if isinstance(a, str) else type(a)(a_value)\n    elif b_value > a_value:\n        return b if isinstance(b, str) else type(b)(b_value)\n    else:\n        return None\n\ndef replace_separator(num):\n    if isinstance(num, str):\n        return num.replace(',', '.')\n    return num\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def replace_separator(num):\n        if isinstance(num, str):\n            return num.replace(',', '.')\n        return num\n    a = replace_separator(a)\n    b = replace_separator(b)\n    a_value = float(a) if isinstance(a, str) else a\n    b_value = float(b) if isinstance(b, str) else b\n    if a_value > b_value:\n        if isinstance(a, str):\n            return a\n        elif isinstance(b, str):\n            return replace_separator(a)\n        else:\n            return a\n    elif b_value > a_value:\n        if isinstance(b, str):\n            return b\n        elif isinstance(a, str):\n            return replace_separator(b)\n        else:\n            return b\n    else:\n        return None\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for a in range(2, n, 2):\n        for b in range(a, n, 2):\n            for c in range(b, n, 2):\n                for d in range(c, n, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False\n\ndef is_equal_to_sum_even_optimized(n):\n    for a in range(2, n//4 + 1, 2):\n        for b in range(a, (n - a)//3 + 1, 2):\n            for c in range(b, (n - a - b)//2 + 1, 2):\n                d = n - a - b - c\n                if d >= c and d % 2 == 0:\n                    return True\n    return False\n\nprint(is_equal_to_sum_even(4)) \nprint(is_equal_to_sum_even(6)) \nprint(is_equal_to_sum_even(8)) \n\nprint(is_equal_to_sum_even_optimized(4)) \nprint(is_equal_to_sum_even_optimized(6)) \nprint(is_equal_to_sum_even_optimized(8))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    text = re.sub(' +', lambda m: '-' if len(m.group()) > 2 else '_' * len(m.group()), text)\n    return text\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name[0].isalpha():\n        return 'No'\n    if not name:\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    return 'Yes'\n\nprint(file_name_check(\"example.txt\")) # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No'\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, extension = file_name.split('.')\n    if not name or not name[0].isalpha():\n        return 'No'\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'\n\nprint(file_name_check(\"example.txt\")) # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No'\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            new_lst.append(lst[i]**2)\n        elif i % 4 == 0:\n            new_lst.append(lst[i]**3)\n        else:\n            new_lst.append(lst[i])\n    return sum(new_lst)\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([]))\nprint(sum_squares([-1,-5,2,-1,-5]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = [word for word in words if is_prime(len(word))]\n    return ' '.join(result)\n\nprint(words_in_sentence(\"This is a test\"))\nprint(words_in_sentence(\"lets go for swimming\"))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/144", "completion": "from fractions import Fraction\n\ndef simplify(x, n):\n    x = Fraction(x)\n    n = Fraction(n)\n    return (x * n).denominator == 1\n\ndef main():\n    print(simplify(\"1/5\", \"5/1\")) \n    print(simplify(\"1/6\", \"2/1\")) \n    print(simplify(\"7/10\", \"10/2\"))\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sorted(enumerate(nums), key=lambda x: (sum_digits(x[1]), x[0]))\n\ndef order_by_points_list(nums):\n    return [x[1] for x in order_by_points(nums)]\n\nprint(order_by_points_list([1, 11, -1, -11, -12]))\nprint(order_by_points_list([]))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return [x[1] for x in sorted(enumerate(nums), key=lambda x: (sum_digits(x[1]), x[0]))]\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return [x[1] for x in sorted(enumerate(nums), key=lambda x: (-sum_digits(x[1]), x[0]))]\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if len(num_str) > 0 and int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count\n\nprint(specialFilter([15, -73, 14, -15])) \nprint(specialFilter([33, -2, -3, 45, 21, 109]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\nprint(get_max_triples(5))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    return tuple(planets[idx1+1:idx2])\n\nprint(bf(\"Jupiter\", \"Neptune\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    even_length = [s for s in lst if len(s) % 2 == 0]\n    return sorted(even_length, key=lambda x: (len(x), x))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n\nprint(x_or_y(7, 34, 12))\nprint(x_or_y(15, 8, 5))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum([x**2 if isinstance(x, int) and x > 0 and x % 2 != 0 else 0 for x in lst])\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(a - b) for a, b in zip(game, guess)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"\n\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension(\"my_class\", ['AA', 'Be', 'CC']))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    for i in range(len(b)):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num = abs(num)\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    result = ''\n    for value, numeral in roman.items():\n        while number >= value:\n            number -= value\n            result += numeral\n    return result\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\ndef main():\n    print(right_angle_triangle(3, 4, 5))  # True\n    print(right_angle_triangle(1, 2, 3))  # False\n\nif __name__ == \"__main__\":\n    main()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique and word < max_word:\n            max_word = word\n    return max_word\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique and (max_word == \"\" or word < max_word):\n            max_word = word\n    return max_word\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique and (max_word == \"\" or word < max_word):\n            max_word = word\n    if max_word == \"\":\n        return words[0]\n    return max_word\n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total_eaten = number\n    eaten = min(remaining, need)\n    total_eaten += eaten\n    remaining -= eaten\n    return [total_eaten, remaining]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)\n\nprint(do_algebra(['+', '*', '-'], [2, 3, 4, 5]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return ''.join(char.upper() if char.islower() else char.lower() if char.isupper() else char for char in s)\n\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))  # \"AB\"\nprint(solve(\"#a@C\"))  # \"#A@c\"\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]\n\nprint(generate_integers(2, 8))  # => [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # => [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # => []\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0 and i < 10]\n", "attempt_no": 2, "passed_tests": true}
