{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(1, len(numbers)):\n        if numbers[i] - numbers[i - 1] < threshold:\n            return True\n    return False\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    temp = ''\n    count = 0\n    for char in paren_string:\n        temp += char\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            result.append(temp)\n            temp = ''\n    return result\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/1", "completion": "from typing import list as List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    temp = ''\n    count = 0\n    for char in paren_string:\n        temp += char\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            result.append(temp)\n            temp = ''\n    return result", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    temp = ''\n    count = 0\n    for char in paren_string:\n        temp += char\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count == 0:\n            result.append(temp)\n            temp = ''\n    return result\n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/3", "completion": "from typing import list as List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/4", "completion": "from typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = statistics.mean(numbers)\n    return sum(abs(x - mean_val) for x in numbers) / len(numbers)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers, delimeter):\n    return [delimeter for i in range(len(numbers)-1)] + numbers\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers, delimeter):\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                stack.pop()\n                current_level -= 1\n        result.append(max_level)\n    return result\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/6", "completion": "from typing import list as List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                stack.pop()\n                current_level -= 1\n        result.append(max_level)\n    return result", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        stack = []\n        max_level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                current_level += 1\n                max_level = max(max_level, current_level)\n            elif char == ')':\n                stack.pop()\n                current_level -= 1\n        result.append(max_level)\n    return result\n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings, substring):\n    return [s for s in strings if substring in s]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers):\n    product = 1\n    total = 0\n    for num in numbers:\n        product *= num\n        total += num\n    return total, product\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers):\n    result = []\n    max_num = float('-inf')\n    for num in numbers:\n        max_num = max(max_num, num)\n        result.append(max_num)\n    return result\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i-1][::-1] if i != len(string) else string + string[::-1]\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[:i]):\n            return string + string[:i][::-1]", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/12", "completion": "def longest(strings):\n    if not strings:\n        return None\n    return max(strings, key=len)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/14", "completion": "from typing import list as List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(c.casefold() for c in string))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/17", "completion": "from typing import list as List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    durations = []\n    for note in notes:\n        if note == 'o':\n            durations.append(4)\n        elif note == 'o|':\n            durations.append(2)\n        elif note == '.|':\n            durations.append(1)\n    return durations", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    return len([i for i in range(len(string)) if string.startswith(substring, i)])\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_map = {\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_map[x])\n    return ' '.join(num_list)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    numbers = sorted(set(numbers))\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers)-1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    numbers = sorted(set(numbers))\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers)-1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers):\n    numbers = sorted(set(numbers))\n    min_diff = float('inf')\n    closest_pair = ()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers):\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = max_num - min_num\n    return [(num - min_num) / scale for num in numbers]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values):\n    return [value for value in values if isinstance(value, int)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/25", "completion": "from typing import list as List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return sorted(factors)\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = {}\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n        seen[num] = True\n    return result\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = {}\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen[num] = 1\n        elif seen[num] == 1:\n            result.remove(num)\n            seen[num] = 2\n    return result", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return string.swapcase()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings):\n    return ''.join(strings)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings, prefix):\n    return [s for s in strings if s.startswith(prefix)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs, x):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    a, b = -1, 1\n    while poly(xs, a) * poly(xs, b) > 0:\n        a *= 2\n        b *= 2\n    for _ in range(100):\n        c = (a + b) / 2\n        if abs(poly(xs, c)) < 1e-5:\n            return c\n        if poly(xs, a) * poly(xs, c) < 0:\n            b = c\n        else:\n            a = c\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/32", "completion": "def poly(xs, x):\n    return sum([coeff * x**i for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    if len(xs) % 2 == 0 and xs[-1] != 0:\n        a, b = -1, 1\n        while poly(xs, a) * poly(xs, b) > 0:\n            a *= 2\n            b *= 2\n        for _ in range(100):\n            c = (a + b) / 2\n            if abs(poly(xs, c)) < 1e-5:\n                return c\n            if poly(xs, a) * poly(xs, c) < 0:\n                b = c\n            else:\n                a = c\n        return c\n    else:\n        return None\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/32", "completion": "def poly(xs, x):\n    return sum([coeff * x**i for i, coeff in enumerate(xs)])\n\ndef find_zero(xs):\n    if len(xs) % 2 == 0 and xs[-1] != 0:\n        a, b = -1, 1\n        while poly(xs, a) * poly(xs, b) > 0:\n            a *= 2\n            b *= 2\n        for _ in range(100):\n            c = (a + b) / 2\n            if abs(poly(xs, c)) < 1e-5:\n                return c\n            if poly(xs, a) * poly(xs, c) < 0:\n                b = c\n            else:\n                a = c\n        return c\n    else:\n        return None", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return [x if i % 3 != 0 else sorted([l[i] for i in range(i - i % 3, len(l) - len(l) % 3, 3)])[i // 3] for i, x in enumerate(l)]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    chunks = [l[i:i+3] for i in range(0, len(l), 3)]\n    chunks = [sorted(chunk) if i % 2 == 0 else chunk for i, chunk in enumerate(chunks)]\n    return [x for chunk in chunks for x in chunk]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    result = []\n    temp = []\n    for i, x in enumerate(l):\n        temp.append(x)\n        if (i + 1) % 3 == 0 or i == len(l) - 1:\n            if (i + 1) // 3 % 2 == 0:\n                temp.sort()\n            result.extend(temp)\n            temp = []\n    return result", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    even = sorted([x for i,x in enumerate(l) if i%2==0])\n    return [x if i%2!=0 else even.pop(0) for i,x in enumerate(l)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0:1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[:1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/39", "completion": "def is_prime(n: int):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    max_divisor = int(n**0.5) + 1\n    for d in range(3, max_divisor, 2):\n        if n % d == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    a, b = 0, 1\n    count = 0\n    while True:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n        if count == n:\n            return b\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * n\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    n = len(l)\n    l_set = set(l)\n    for i in range(n):\n        if -l[i] in l_set and l.count(-l[i]) > 1:\n            return True\n    return False\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    l_set = set(l)\n    for num in l_set:\n        if -num in l_set and num != 0:\n            return True\n    return False", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    convertString = \"0123456789\"\n    if x < base:\n        return convertString[x]\n    else:\n        return change_base(x // base, base) + convertString[x % base]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n < 0:\n        return \"Input should be a non-negative integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib = [0, 0, 2, 0]\n        for i in range(4, n + 1):\n            fib.append(fib[i-1] + fib[i-2] + fib[i-3] + fib[i-4])\n        return fib[n]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        median_val = (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n    else:\n        median_val = sorted_l[n // 2]\n    return median_val\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    sorted_l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        median_val = (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2\n    else:\n        median_val = sorted_l[n // 2]\n    return median_val", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    return text == text[::-1]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(2, n, p)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 5) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 97 + 5) % 26) + 97) for ch in s.lower()])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 97 - 5) % 26) + 97) for ch in s.lower()])\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l, t):\n    return all(i < t for i in l)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/58", "completion": "def common(l1, l2):\n    return sorted(set(l1) & set(l2))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    def is_prime(x: int) -> bool:\n        if x <= 1:\n            return False\n        if x <= 3:\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n * (n + 1) // 2\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    return [i*x for i, x in enumerate(xs[1:], start=1)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        f = [0, 0, 1]\n        for i in range(3, n+1):\n            f.append(f[i-1] + f[i-2] + f[i-3])\n        return f[n]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        f = [0, 0, 1]\n        for i in range(3, n+1):\n            f.append(sum(f[-3:]))\n        return f[n]\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        f = [0, 0, 1]\n        for i in range(3, n+1):\n            f.append(sum(f[-3:]))\n        return f[-1]\n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    count = 0\n    for char in s:\n        if char in 'aeiou':\n            count += 1\n    if s.endswith('y'):\n        count += 1\n    return count\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift][::-1]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:][::-1] + x_str[:-shift]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    apples, oranges = map(int, s.replace(\"apples\", \"\").replace(\"oranges\", \"\").replace(\"and\", \"\").split())\n    return n - apples - oranges\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\n    if evens:\n        return [min(evens)[0], min(evens)[1]]\n    else:\n        return []\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    for i in sorted(count, reverse=True):\n        if count[i] >= i:\n            return i\n    return -1\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if lst:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/71", "completion": "import math\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 0\n            elif arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 0\n            elif arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1] if i+1 <= j-1 else 0\n            else:\n                dp[i][j] = 1 + min(dp[i+1][j] if i+1 <= j else float('inf'), dp[i][j-1] if j-1 >= i else float('inf'))\n    return dp[0][n-1]\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        for j in range(i, n):\n            if i == j:\n                dp[i][j] = 0\n            elif arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1] if i+1 <= j-1 else 0\n            else:\n                dp[i][j] = 1 + min(dp[i+1][j] if i+1 <= j else float('inf'), dp[i][j-1] if j-1 >= i else float('inf'))\n    return dp[0][n-1] if dp[0][n-1] != float('inf') else 0\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    if sum(len(s) for s in lst1) <= sum(len(s) for s in lst2):\n        return lst1\n    else:\n        return lst2\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    import math\n    root = round(math.log(x, n))\n    return n**root == x\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return round(a**(1/3))**3 == a\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    x = round(abs(a)**(1/3))\n    return x**3 == abs(a)\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    hex_to_dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    count = 0\n    for char in num:\n        if is_prime(hex_to_dec[char]):\n            count += 1\n    return count\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i+3])) != 3:\n            return False\n    return True\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    count = 2 * (10 ** (n - 1) - 10 ** (n - 2))\n    return count\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    even_sum = sum(num for i, num in enumerate(lst) if i % 2 != 0 and num % 2 == 0)\n    return even_sum\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    return sorted([(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x], key=lambda x: (x[0], -x[1]))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            ascii_offset = 97 if char.islower() else 65\n            result += chr((ord(char) - ascii_offset + (2 ** 2)) % 26 + ascii_offset)\n        else:\n            result += char\n    return result\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(set(lst)) < 2:\n        return None\n    return sorted(set(lst))[1]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.replace('?', '.').replace('!', '.').split('.')\n    return sum(1 for sentence in sentences if sentence.strip() and sentence.strip()[0].lower() == 'i')\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n return sum(1 for sentence in S.replace('?', '.').replace('!', '.').split('.') if sentence.strip() and sentence.strip()[0].lower() in ['i', 'is'])\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n return sum(1 for sentence in S.replace('?', '.').replace('!', '.').split('.') if sentence.strip() and sentence.strip()[0].lower() == 'i')", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x == y + z or y == x + z or z == x + y\n    else:\n        return False\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    result = \"\"\n    for char in message:\n        if char.lower() in vowels:\n            if char.islower():\n                result += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + 2) % 26 + 65)\n        else:\n            result += char.swapcase()\n    return result\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                result += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + 2) % 26 + 65)\n        else:\n            result += char.swapcase()\n    return result", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                result += chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                result += chr((ord(char) - 65 + 2) % 26 + 65)\n        else:\n            result += char.swapcase()\n    return result", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(max_prime))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    if all(isinstance(key, str) for key in dict):\n        if all(key.islower() for key in dict):\n            return True\n        elif all(key.isupper() for key in dict):\n            return True\n    return False\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/96", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    num = 2\n    while num < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.isupper() and c in 'AEIOU')\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return round(num + 0.5) - 1 if num % 1 == 0.5 else round(num)\n    else:\n        return -round(-num + 0.5) + 1 if num % 1 == -0.5 else -round(-num)\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num % 1 == 0.5:\n        return round(num + 0.1) if num > 0 else round(num - 0.1)\n    else:\n        return round(num)\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    while len(pile) < n:\n        pile.append(n + len(pile) * 2 - (n % 2))\n    return pile\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    while len(pile) < n:\n        n = n + 1 + n % 2 * (-1)\n        pile.append(n)\n    return pile\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = [n]\n    while len(pile) < n:\n        n = n + 1 + (n + 1) % 2 * (-1)\n        pile.append(n)\n    return pile", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return s.replace(',', ' ').split()", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    for i in range(y, x-1, -1):\n        if i % 2 == 0 and x <= i <= y:\n            return i\n    return -1", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1)) / (m-n+1))\n    return bin(avg)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    return sorted([i for i in x if all(int(digit) % 2 != 0 for digit in str(i))])\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    num_to_word = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr = sorted([i for i in arr if 1 <= i <= 9])\n    return [num_to_word[i] for i in arr[::-1]]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    return [i if i % 2 == 1 else math.prod(range(1, i + 1)) for i in range(1, n + 1)]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/106", "completion": "import math\n\ndef f(n):\n    return [sum(range(1, i + 1)) if i % 2 != 0 else math.prod(range(1, i + 1)) for i in range(1, n + 1)]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(sum(int(digit) != 0 for digit in str(abs(num))) > 0 for num in arr)\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(sum(int(digit) != 0 for digit in str(abs(num))) > 0 for num in arr if num != 0)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(sum(int(digit) != 0 for digit in str(abs(num))) > 0 for num in arr if sum(int(digit) != 0 for digit in str(abs(num))) > 0)", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return True\n    return False\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return True\n    return False", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    evens = sum(1 for x in lst1 if x % 2 == 0) + sum(1 for x in lst2 if x % 2 == 0)\n    return \"YES\" if evens >= len(lst1) - sum(1 for x in lst1 if x % 2 == 0) else \"NO\"\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    evens = sum(1 for x in lst1 if x % 2 == 0) + sum(1 for x in lst2 if x % 2 == 0)\n    odds = sum(1 for x in lst1 if x % 2 != 0)\n    return \"YES\" if evens >= odds else \"NO\"", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    evens = sum(1 for x in lst1 if x % 2 == 0) + sum(1 for x in lst2 if x % 2 == 0)\n    odds = sum(1 for x in lst1 if x % 2 != 0)\n    return \"YES\" if evens >= odds else \"NO\"", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    test = test.split()\n    freq = {}\n    for item in test:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    max_freq = max(freq.values()) if freq else 0\n    return {k: v for k, v in freq.items() if v == max_freq}\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    s = ''.join(i for i in s if i not in c)\n    return (s, s == s[::-1])\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    return ['the number of odd elements ' + str(sum(int(digit) % 2 for digit in s)) + 'n the str' + str(sum(int(digit) % 2 for digit in s)) + 'ng ' + str(sum(int(digit) % 2 for digit in s)) + ' of the ' + str(sum(int(digit) % 2 for digit in s)) + 'nput.' for s in lst]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    current_sum = min_sum = float('inf')\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    return sum(math.ceil(sum(row) / capacity) for row in grid)\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/115", "completion": "import math\ndef max_fill(grid, capacity):\n    return sum(-(-sum(row) // capacity) for row in grid)", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted((x for x in arr if x >= 0), key=lambda x: (bin(x).count('1'), x))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(abs(x)).count('1'), x))", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n consonants = 'bcdfghjklmnpqrstvwxyz'\n return [word for word in s.lower().split() if sum(1 for char in word if char in consonants) == n]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n consonants = 'bcdfghjklmnpqrstvwxyz'\n return [word for word in s.split() if sum(1 for char in word.lower() if char in consonants) == n]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return ''\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    from itertools import permutations\n    for p in permutations(lst):\n        s = ''.join(p)\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            else:\n                if not stack:\n                    break\n                stack.pop()\n        else:\n            if not stack:\n                return 'Yes'\n    return 'No'\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(sorted(arr)[-k:])", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k == 0:\n        return []\n    return sorted(arr)[-k:]", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(i for idx, i in enumerate(lst) if idx % 2 == 0 and i % 2 != 0)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    return sorted([i for i in sequence if i % 2 != 0])\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/124", "completion": "import re\nfrom datetime import datetime\n\ndef valid_date(date):\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 29:\n            return False\n    try:\n        datetime(year, month, day)\n        return True\n    except ValueError:\n        return False\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(ord(c) % 2 for c in txt.lower() if c.isalpha())\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(c) - 97) % 2 for c in txt.lower() if 'a' <= c <= 'z')", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum((ord(c) - 97) % 2 != 0 for c in txt.lower() if 'a' <= c <= 'z')", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and len(lst) == len(set(lst))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return lst == sorted(lst, key=lst.index)\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    return lst == sorted(set(lst), key=lst.index)", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start <= end:\n        length = end - start + 1\n        if is_prime(length):\n            return \"YES\"\n    return \"NO\"\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if is_prime(length):\n        return \"YES\"\n    return \"NO\"", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    if end-start < 0:\n        return \"NO\"\n    length = end - start + 1\n    if length == 1:\n        return \"NO\"\n    if is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    signs_product = 1\n    for sign in signs:\n        signs_product *= sign\n    magnitude_sum = sum(abs(x) for x in arr)\n    return signs_product * magnitude_sum\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/129", "completion": "from collections import deque\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    q = deque([(grid[0][0], 0, 0, [(0, 0)])])\n    visited = {(0, 0)}\n    while q:\n        v, x, y, path = q.popleft()\n        if len(path) == k:\n            return [grid[x][y] for x, y in path]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                q.append((v + grid[nx][ny] * 10**len(path), nx, ny, path + [(nx, ny)]))\n    return []\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/129", "completion": "from heapq import heappop, heappush\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    q = [(grid[0][0], 0, 0, [grid[0][0]])]\n    seen = {(0, 0): [grid[0][0]]}\n    while q:\n        _, x, y, path = heappop(q)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in seen or path[:-1] != seen[(nx, ny)]:\n                seen[(nx, ny)] = path\n                heappush(q, (tuple(path) + (grid[nx][ny],), nx, ny, path + [grid[nx][ny]]))\n    return []\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/129", "completion": "from heapq import heappop, heappush\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    q = [(grid[0][0], 0, 0, [grid[0][0]])]\n    seen = {(0, 0): [grid[0][0]]}\n    while q:\n        _, x, y, path = heappop(q)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                new_path = path + [grid[nx][ny]]\n                if (nx, ny) not in seen or seen[(nx, ny)] > new_path:\n                    seen[(nx, ny)] = new_path\n                    heappush(q, (tuple(new_path), nx, ny, new_path))\n    return []\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    dp = [None for _ in range(n + 1)]\n    dp[0] = 1\n    dp[1] = 3\n\n    def tri_helper(k):\n        nonlocal dp\n        if dp[k] is not None:\n            return dp[k]\n        if k % 2 == 0:\n            dp[k] = 1 + k / 2\n        else:\n            dp[k] = tri_helper(k - 1) + tri_helper(k - 2) + tri_helper(k + 1)\n        return dp[k]\n\n    return [tri_helper(i) for i in range(n + 1)]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    dp = [None for _ in range(n + 1)]\n    dp[0] = 1\n    dp[1] = 3\n\n    def tri_helper(k):\n        nonlocal dp\n        if k > n:\n            return 0\n        if dp[k] is not None:\n            return dp[k]\n        if k % 2 == 0:\n            dp[k] = 1 + k / 2\n        else:\n            dp[k] = tri_helper(k - 1) + tri_helper(k - 2) + tri_helper(k + 1)\n        return dp[k]\n\n    return [tri_helper(i) for i in range(n + 1)]\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    dp = [None for _ in range(n + 1)]\n    dp[0] = 1\n    dp[1] = 3\n    def tri_helper(k):\n        nonlocal dp\n        if dp[k] is not None:\n            return dp[k]\n        if k == 0:\n            return 1\n        if k == 1:\n            return 3\n        if k % 2 == 0:\n            dp[k] = 1 + k / 2\n        else:\n            dp[k] = tri_helper(k - 1) + tri_helper(k - 2) + tri_helper(k - 1)\n        return dp[k]\n    return [tri_helper(i) for i in range(n + 1)]\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n        elif product == 1:\n            product = 0\n    return product\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n        else:\n            product = 0 if product == 1 else product\n    return product\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return 0 if product == 1 else product\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(s):\n    stack = []\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        else:\n            if len(stack) == 0 or stack.pop() != '[':\n                return False\n            if len(stack) > 0:\n                return True\n    return False\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(s):\n    stack = []\n    nested = False\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            temp = stack.pop()\n            while temp != '[':\n                if len(stack) == 0:\n                    return False\n                temp = stack.pop()\n            if len(stack) > 0:\n                nested = True\n    return nested", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(s):\n    stack = []\n    for c in s:\n        if c == '[':\n            stack.append(c)\n        else:\n            if len(stack) == 0:\n                return False\n            temp = stack.pop()\n            if temp != '[':\n                return False\n            if len(stack) > 0 and stack[-1] == '[':\n                return True\n    return False\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/133", "completion": "import math\ndef sum_squares(lst):\n    return sum(i ** 2 for i in map(lambda x: math.ceil(x), lst))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt == \"\" or txt[-1] == \" \":\n        return False\n    words = txt.split()\n    if len(words[-1]) > 1:\n        return False\n    return txt[-1].isalpha()\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    a_val = float(a.replace(',', '.')) if isinstance(a, str) else a\n    b_val = float(b.replace(',', '.')) if isinstance(b, str) else b\n    if a_val > b_val:\n        return a if isinstance(a, type(a)) else type(a)(a)\n    elif a_val < b_val:\n        return b if isinstance(b, type(b)) else type(b)(b)\n    else:\n        return None\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for a in range(2, n//2 + 1, 2):\n        for b in range(a, n//2 + 1, 2):\n            for c in range(b, n//2 + 1, 2):\n                for d in range(c, n//2 + 1, 2):\n                    if a + b + c + d == n:\n                        return True\n    return False\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    def factorial(k):\n        if k == 0 or k == 1:\n            return 1\n        else:\n            return k * factorial(k-1)\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    text = re.sub(r'\\s+', '-', text)\n    text = text.replace('--', '-')\n    text = text.replace('-', '_')\n    text = re.sub(r'_(?=_)', '-', text)\n    text = text.replace(' _', '_')\n    text = text.replace('_ ', '_')\n    text = text.replace(' ', '_')\n    return text\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s{2}', '-', text)\n    text = text.replace('-', '_')\n    text = text.replace('_-_','_')\n    return text\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/140", "completion": "import re\n\ndef fix_spaces(text):\n    text = re.sub(r'\\s{3,}', '-', text)\n    text = re.sub(r'\\s{1,2}', '_', text)\n    return text\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    parts = file_name.split('.')\n    if len(parts[0]) == 0:\n        return 'No'\n    if not parts[0][0].isalpha():\n        return 'No'\n    if parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    return 'Yes'", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    return sum(i**3 if idx%4==0 and idx%3!=0 else i**2 if idx%3==0 else i for idx, i in enumerate(lst))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    result = []\n    for word in words:\n        if is_prime(len(word)):\n            result.append(word)\n    return ' '.join(result)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    a, b = map(int, x.split('/'))\n    c, d = map(int, n.split('/'))\n    return (a * c) % (b * d) == 0\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return [x for _, x in sorted((sum(int(digit) for digit in str(abs(x))), i, x) for i, x in enumerate(nums))]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return [x for _, x in sorted(((sum(int(digit) for digit in str(abs(x))), idx), x) for idx, x in enumerate(nums))]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return [x for _, x in sorted(((sum(int(digit) for digit in str(abs(x))), idx), x) for idx, x in enumerate(nums))]", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if abs(num) > 10 and (num % 10) % 2 != 0 and (num // 10 ** (len(str(abs(num))) - 1)) % 2 != 0:\n            count += 1\n    return count\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = {\"Mercury\": 0, \"Venus\": 1, \"Earth\": 2, \"Mars\": 3, \"Jupiter\": 4, \"Saturn\": 5, \"Uranus\": 6, \"Neptune\": 7}\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    p1, p2 = planets[planet1], planets[planet2]\n    if p1 > p2:\n        p1, p2 = p2, p1\n    return tuple(k for k, v in planets.items() if p1 < v < p2)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [s for s in lst if len(s) % 2 == 0]\n    lst.sort(key=lambda x: (len(x), x))\n    return lst\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i >= 0 and i % 2)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - s) if g != s else 0 for g, s in zip(guess, game)]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    extensions.sort(key=lambda x: (sum(c.isupper() for c in x) - sum(c.islower() for c in x), -extensions.index(x)))\n    return class_name + '.' + extensions[-1]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    extensions.sort(key=lambda x: (sum(c.isupper() for c in x) - sum(c.islower() for c in x), extensions.index(x)))\n    return class_name + '.' + extensions[0]\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    strongest_extension = max(extensions, key=lambda x: (sum(c.isupper() for c in x) - sum(c.islower() for c in x)))\n    return class_name + '.' + strongest_extension", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    b_len = len(b)\n    for i in range(b_len):\n        if b[i:] + b[:i] in a:\n            return True\n    return False\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = str(abs(num))\n    even = sum(1 for i in num if int(i) % 2 == 0)\n    odd = sum(1 for i in num if int(i) % 2 != 0)\n    return even, odd\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while  number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max((word for word in words), key=lambda x: (len(set(x)), x))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max(words, key=lambda x: (len(set(x)), x))", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max(words, key=lambda x: (len(set(x)), x.lower()))", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    total = number + min(need, remaining)\n    left = max(0, remaining - need)\n    return [total, left]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    expression = \"\"\n    for i in range(len(operand) - 1):\n        expression += str(operand[i]) + operator[i]\n    expression += str(operand[-1])\n    return eval(expression)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    a, b = min(a, b), max(a, b)\n    return [i for i in range(a, b+1) if i % 2 == 0]\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    a, b = min(a, b), max(a, b)\n    return [i for i in range(a, b+1) if i % 2 == 0 and i >= 2 and i <= 8]", "attempt_no": 2, "passed_tests": true}
