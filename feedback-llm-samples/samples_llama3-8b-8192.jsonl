{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/0", "completion": "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n                if len(stack) == 0:\n                    result.append(('' + ''.join(['(' if c == ')' else c for c in stack[::-1]] + [')'])).strip())\n    return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    temp = \"\"\n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            stack.append(char)\n            temp += char\n        else:\n            temp += char\n            if len(stack) > 0:\n                stack.pop()\n                if len(stack) == 0:\n                    result.append(temp)\n                    temp = \"\"\n    return result", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return round(number - int(number), 12)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/5", "completion": "result = [numbers[0]]; for i in numbers[1:]: result.extend([i, delimeter]); return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/5", "completion": "`result = [numbers[0]]; for i in numbers[1:]: result.extend([i, delimeter]); return result`", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = [numbers[0]]\n    for i in numbers[1:]:\n        result.extend([i, delimeter])\n    return result[:-1]", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> list:\n    return [max(parse(p.strip()) for p in paren_string.split()) for i in range(len(paren_string.split()))];\n\ndef parse(paren_str: str) -> int:\n    level = 0\n    max_level = 0\n    for c in paren_str:\n        if c == '(':\n            level += 1\n        elif c == ')':\n            level -= 1\n        max_level = max(max_level, level);\n    return max_level + 1;", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    return [parse(p.strip()) for p in paren_string.split()]\n\ndef parse(paren_str: str) -> int:\n    level = 0\n    max_level = 0\n    for c in paren_str:\n        if c == '(':\n            level += 1\n        elif c == ')':\n            level -= 1\n        max_level = max(max_level, level)\n    return max_level + 1", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    return [max_level(outer.strip()) for outer in paren_string.split()]\n\ndef max_level(paren_str: str) -> int:\n    level = 0\n    max_level = 0\n    for c in paren_str:\n        if c == '(':\n            level += 1\n        elif c == ')':\n            level -= 1\n        max_level = max(max_level, level)\n    return max_level", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/7", "completion": "filter_by_substring = lambda s, substring: [string for string in s if substring in string]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_product = 0\n    product = 1\n    for num in numbers:\n        sum_product += num\n        product *= num\n    return sum_product, product", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_product = 0\n    product = 1\n    for num in numbers:\n        sum_product += num\n        product *= num\n    return sum_product, product", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = [float('-inf')]\n    for num in numbers:\n        result.append(max(result[-1], num))\n    return result[1:]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = [float('-inf')]\n    for num in numbers:\n        result.append(max(result[-1], num))\n    return result[1:]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    prefix = string\n    while not is_palindrome(prefix + \"#\" + get_reverse(string)):\n        prefix += string[0]\n    return prefix + get_reverse(string)\n\ndef get_reverse(s: str) -> str:\n    return s[::-1]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n\ndef get_reverse(s: str) -> str:\n    return s[::-1]\n\ndef make_palindrome(string: str) -> str:\n    prefix = string\n    while not is_palindrome(prefix + \"#\" + get_reverse(string)):\n        prefix += string[0]\n    return prefix + get_reverse(string)\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n\ndef get_reverse(s: str) -> str:\n    return s[::-1]\n\ndef make_palindrome(string: str) -> str:\n    reverse_str = get_reverse(string)\n    for i in range(len(string)):\n        if is_palindrome(string + reverse_str[i:]):\n            return string + reverse_str[i:]\n    return string + reverse_str", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    return max(strings, default=None) if strings else None", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    return max(strings) if strings else None", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings)", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return abs(a)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/14", "completion": "from typing import List", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> list[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    music_notes = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i:i+2] in music_notes:\n            result.append(music_notes[music_string[i:i+2]])\n            i += 2\n        else:\n            result.append(music_notes[music_string[i]])\n            i += 1\n    return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    music_notes = {'o': 4, 'o|': 2, '.|': 1}\n    result = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i:i+2] in music_notes:\n            result.append(music_notes[music_string[i:i+2]])\n            i += 2\n        else:\n            result.append(music_notes[music_string[i]])\n            i += 1\n    return list(map(int, map(str, result)))", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    music_notes = {'o': 4, '|': 2, '.': 1}\n    result = []\n    i = 0\n    note = ''\n    while i < len(music_string):\n        if music_string[i] == 'o' or music_string[i] == '.':\n            note += music_string[i]\n            if i == len(music_string) - 1 or music_string[i+1] == '|':\n                result.append(music_notes[note])\n                note = ''\n            i += 1\n        else:\n            note += music_string[i]\n            i += 1\n    return result", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    return len([i for i in range(len(string)) if string.startswith(substring, i)])", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\"zero\": \"0\", \"one\": \"1\", \"two\": \"2\", \"three\": \"3\", \"four\": \"4\", \"five\": \"5\", \"six\": \"6\", \"seven\": \"7\", \"eight\": \"8\", \"nine\": \"9\"}\n    nums = [num_dict[num] for num in numbers.split()]\n    nums.sort()\n    return \" \".join([num_dict[n] for n in nums])", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\"zero\": \"0\", \"one\": \"1\", \"two\": \"2\", \"three\": \"3\", \"four\": \"4\", \"five\": \"5\", \"six\": \"6\", \"seven\": \"7\", \"eight\": \"8\", \"nine\": \"9\"}\n    nums = [num_dict[num] for num in numbers.split()]\n    nums.sort(key=lambda x: int(x))\n    return \" \".join([num_dict[inum] for inum in nums])", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    num_dict = {\"zero\": \"0\", \"one\": \"1\", \"two\": \"2\", \"three\": \"3\", \"four\": \"4\", \"five\": \"5\", \"six\": \"6\", \"seven\": \"7\", \"eight\": \"8\", \"nine\": \"9\"}\n    nums = sorted([num_dict[num] for num in numbers.split()])\n    return \" \".join([num for num in nums_dict.keys()[:] for num_dict[num] in nums])", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    min_diff = float('inf')\n    closest_pair = ()\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    mn = min(numbers)\n    mx = max(numbers)\n    return [(x-mn)/(mx-mn) for x in numbers]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    mn = min(numbers)\n    mx = max(numbers)\n    return [(x-mn)/(mx-mn) for x in numbers]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/22", "completion": "filter_integers = lambda x: [v for v in x if isinstance(v, int)]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n, 1, -1):\n        if n % i == 0:\n            return i", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            while n % i == 0:\n                n //= i\n                factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    from typing import List\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            while n % i == 0:\n                n //= i\n                factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return list(factors)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            while n % i == 0:\n                n //= i\n                factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/26", "completion": "[1] \n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    return list(dict.fromkeys(numbers))", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/26", "completion": "from typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/27", "completion": "\"for c in s;\"", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join('' if c.isupper() else c.upper() if c.isalpha() else c for c in string)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in string)", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/28", "completion": "\"\"\"\\r\\nreturn ''.join(strings)\"", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/28", "completion": "'\"\"\".join(map(str, strings))\"\"'", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/28", "completion": "'.\".join(map(str, strings))'", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [i for i in l if i > 0]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n): \n    if n <= 1: \n        return False \n    elif n <= 3: \n        return True \n    elif n % 2 == 0 or n % 3 == 0: \n        return False \n    i = 5 \n    while i * i <= n: \n        if n % i == 0 or n % (i + 2) == 0: \n            return False \n        i += 6 \n    return True", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    x = -1 * xs[1] / (2 * xs[0])\n    return round(x, 2)\n\n# Example usage:\nprint(round(find_zero([1, 2]), 2))  # f(x) = 1 + 2x\nprint(round(find_zero([-6, 11, -6, 1]), 2))  # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    return round(-poly(xs) / poly([*xs[:-1]], xs[-1]), 2) if len(xs) > 1 else round(-xs[0] / xs[1], 2)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/32", "completion": "import math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    def func(y):\n        return poly(xs, y)\n\n    if len(xs) > 1:\n        return round(-poly(xs)[0] / poly(xs[1:], xs[0]), 2)\n    else:\n        return round(-xs[0] / xs[1], 2)", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return [x if i % 3 == 0 else v for i, x in enumerate(sorted([x for i, x in enumerate(l) if i % 3 == 0]))]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return [x if i % 3 != 0 else y for i, x in enumerate(sorted([x for i, x in enumerate(l) if i % 3 == 0]))]\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    return [x if i % 3 != 0 else y for i, x in enumerate(sorted([x for i, x in enumerate(l) if i % 3 == 0])) for y in sorted([x for i, x in enumerate(l) if i % 3 == 0])]", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(list(set(l)))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/35", "completion": "max_element = lambda l: max(l)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 13 == 0 or i % 11 == 0:\n            str_i = str(i)\n            if '7' in str_i:\n                count += 1\n    return count", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(11, n, 11):\n        count += str(i).count('7')\n    for i in range(13, n, 13):\n        count += str(i).count('7')\n    return count", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/37", "completion": "def sort_even(l): return [x if i%2==0 else y for i,(x,y) in enumerate(sorted((x for i,x in enumerate(l) if i%2==0)))][::-1]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    evens = sorted([x for i,x in enumerate(l) if i%2==0])\n    return [x if i%2==1 else y for i,x in enumerate(l)]\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/37", "completion": "def sort_even(l):\n    evens = sorted([x for i,x in enumerate(l) if i%2==0])\n    return [x if i%2==1 else evens[j] for i,(x,j) in enumerate(enumerate(l))]\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[1:-1] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 <= len(s):\n            result += s[i + 1:i + 3] + s[i]\n        else:\n            result += s[i:]\n    return result\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    result = \"\"\n    for i in range(0, len(s), 3):\n        if i + 3 <= len(s):\n            result += s[i] + s[i + 1:i + 3]\n        else:\n            result += s[i:]\n    return result", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def encode_cyclic(s: str):\n    result = \"\"\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        result += group[1:] + group[0]\n    return result\n\ndef decode_cyclic(s: str):\n    result = \"\"\n    for i in range(0, len(s), 3):\n        group = s[i:i+3]\n        result += group[0] + group[1:]\n    return result\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    a, b = 0, 1\n    fib = 0\n    p = 2\n    count = 0\n    while True:\n        a, b = b, a + b\n        if b > n:\n            return\n        for i in range(p, int(b**0.5) + 1):\n            if b % i == 0:\n                break\n        else:\n            if count == n - 1:\n                return b\n            p += 1\n            count += 1", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    a, b = 0, 1\n    while True:\n        b += a\n        a, b = b - a, b\n        if not all(b % i for i in range(2, int(b**0.5) + 1)):\n            if n == 1:\n                return 2\n            n -= 1\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    a, b = 0, 1\n    count = 0\n    while True:\n        b += a\n        a, b = b - a, b\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\ndef is_prime(num : int):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l)-2):\n        left, right = i+1, len(l)-1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return n * (n - 1) // 2", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    return 2 * n * (n - 1)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int):\n    from math import comb\n    return sum(comb(2*n-1, i) for i in range(1, n))\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/42", "completion": "lambda l: [i + 1 for i in l]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/42", "completion": "lambda l: [i + 1 for i in l]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [i + 1 for i in l]", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    s = set()\n    for num in l:\n        if -num in s:\n            return True\n        s.add(num)\n    return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int):\n    convertString = \"0123456789ABCDEF\"\n    if x < base:\n        return convertString[x]\n    else:\n        return change_base(x//base, base) + convertString[x%base]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n < 0:\n        return \"Input should be a non-negative integer\"\n    if n == 0:\n        return 0\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n+1):\n        a, b, c, d = b, c, d, a+b+c\n    return d", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n < 0:\n        return \"Input should be a non-negative integer\"\n    if n == 0:\n        return 0\n    if n <= 3:\n        return [0, 0, 2, 0][n]\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n % 4 + 1):\n        a, b, c, d = b, c, d, b+c\n    return d if n % 4 != 0 else a", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n < 0:\n        return \"Input should be a non-negative integer\"\n    if n == 0:\n        return 0\n    if n <= 3:\n        return [0, 0, 2, 0][n-1]\n    m = [0, 0, 2, 0]\n    for i in range(4, n % 4 + 1):\n        m.append(sum(m[-4:]))\n    return m[n % 4]", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    l = sorted(l)\n    n = len(l)\n    midpoint = n // 2\n\n    if n % 2 == 0:\n        return (l[midpoint - 1] + l[midpoint]) / 2\n    else:\n        return l[midpoint]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str):\n    text = text.replace(' ', '').lower()\n    return text == text[::-1]\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    return pow(n, p-2, p) if p > 2 else 1 if n % p == 0 else n % p\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    if n == 0:\n        return 0\n    elif p == 0 or p == 1:\n        return None\n    else:\n        result = 1\n        n = n % p\n        while n != 0:\n            if n % 2 != 0:\n                result = result * n % p\n            n = n // 2\n            p = p // 2\n        return result", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    if p == 0:\n        raise ZeroDivisionError(\"divide by zero\")\n    if n == 0:\n        return 1\n    res = pow(n, p - 2, p)\n    return (n * res) % p", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") - 5) % 26) + ord(\"a\")) for ch in s])", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 26) % 26) + ord(\"a\")) if ch.isalpha() else ch for ch in s])", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s.lower() if ch.isalpha()])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - ord(\"a\") + 26) % 26) + ord(\"a\")) for ch in s.lower() if ch.isalpha()])", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in text if char not in vowels])", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/52", "completion": "any([i < t for i in l])", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    return all(i < t for i in l)", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    sorted_s0 = sorted(s0)\n    sorted_s1 = sorted(s1)\n    return sorted_s0 == sorted_s1", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return sorted(s0) == sorted(s1)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    return collections.Counter(s0) == collections.Counter(s1)", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        return \"Input should be a positive integer.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(2, n):\n            a, b = b, a+b\n        return b", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n    return increasing or decreasing", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/59", "completion": "i = 2\nwhile i * i <= n:\n    while n % (i) == 0:\n        n //= i\n    i += 1\nreturn n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        while n % (i) == 0:\n            n //= i\n        i += 1\n    return i", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return n*(n+1)//2", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n    return not stack", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i * x for i, x in enumerate(xs[1:], 1)]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int):\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a+b+c\n        return c", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    result = 0\n    for char in s:\n        if char in 'aeiou':\n            result += 1\n    return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    result = 0\n    for char in s:\n        if char in 'aeiouy':\n            result += 1\n    return result", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    result = 0\n    for char in s:\n        if char in 'aeiou' or (char == 'y' and s.index(char) == len(s) - 1):\n            result += 1\n    return result", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    s=str(x)[::-1]\n    s=s[shift%len(s):]+s[:shift%len(s)]\n    return s", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift): \n    return str(x)[::-1][shift%len(str(x)):] + str(x)[::-1][:shift%len(str(x))]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift): \n    strs = str(x)\n    shift = shift % len(strs)\n    return str(int(strs[-shift:]+strs[:-shift]))", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    words = s.split()\n    count_apple = 0\n    count_orange = 0\n    for word in words:\n        if word.lower().endswith('apples'):\n            count_apple = int(word.strip('apples').strip('and'))\n        elif word.lower().endswith('oranges'):\n            count_orange = int(word.strip('oranges').strip('and'))\n    return n - count_apple - count_orange", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    words = s.split()\n    for i in range(len(words)):\n        if 'apples' in words[i]:\n            words[i] = words[i].replace('apples','').replace('and','')\n            count_apple = int(words[i])\n        elif 'oranges' in words[i]:\n            words[i] = words[i].replace('oranges','').replace('and','')\n            count_orange = int(words[i])\n        if count_apple is not None and count_orange is not None:\n            return n - count_apple - count_orange", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    words = s.split()\n    for i in range(len(words)):\n        if 'apples' in words[i]:\n            words[i] = words[i].replace('apples','').replace('and','')\n            count_apple = int(''.join(filter(str.isdigit, words[i])))\n        elif 'oranges' in words[i]:\n            words[i] = words[i].replace('oranges','').replace('and','')\n            count_orange = int(''.join(filter(str.isdigit, words[i])))\n    return n - count_apple - count_orange", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_even_index = None\n    min_even_value = float('inf')\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even_value:\n            min_even_index = i\n            min_even_value = value\n    return [min_even_value, min_even_index] if min_even_value != float('inf') else []", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    for i in count:\n        if i > 0 and count[i] >= i:\n            return i\n    return -1", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    max_value = -1\n    for i in count:\n        if i > 0 and count[i] >= i:\n            max_value = i\n    return max_value", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    max_value = -1\n    for i in count:\n        if i > 0 and count[i] >= i:\n            max_value = i\n    return max_value\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/70", "completion": "lst.sort(); lst[1::2], lst[::2] = lst[::2], lst[1::2]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    s = (a+b+c)/2\n    area = round((s*(s-a)*(s-b)*(s-c))**0.5, 2)\n    if area.is_integer():\n        area = int(area)\n    if not (a+b>c) or not (a+c>b) or not (b+c>a):\n        return -1\n    return area", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    s = (a+b+c)/2\n    area = round((s*(s-a)*(s-b)*(s-c))**0.5, 2)\n    if not (a+b>c) or not (a+c>b) or not (b+c>a):\n        return -1\n    return float(format(area, '.2f'))", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    p = (a+b+c)/2\n    if not (a+b>c) or not (a+c>b) or not (b+c>a):\n        return -1\n    area = round((p*(p-a)*(p-b)*(p-c)) ** 0.5, 2)\n    return float(format(area, '.2f'))", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    return str(q) == str(q)[::-1] and sum(q) <= w\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q,w):\n    return str(q) == str(q)[::-1] and len(q) == sum(q) <= w", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return str(q) == str(q)[::-1] and sum(q) <= w", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    left, right = 0, n - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            left_max, right_min = left + 1, right - 1\n            while left_max <= right and arr[left_max] < arr[left]:\n                left_max += 1\n            while right_max > left and arr[right_max] > arr[right]:\n                right_max -= 1\n            arr[right] = arr[left_max - 1] if left_max <= right_max else arr[right_max]\n            changes += n - left_max + right_max - 1\n        left += 1\n        right -= 1\n    return changes", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    arr1 = arr.copy()\n    arr1.sort()\n    changes = 0\n    left, right = 0, n - 1\n    while left < right:\n        if arr1[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    changes += len(arr) - n // 2\n    return changes", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    arr.sort()\n    changes = 0\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] != arr[j]:\n            changes += 1\n        i += 1\n        j -= 1\n    return changes", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    return min([lst for lst in (lst1, lst2)], key=lambda x: sum(len(i) for i in x))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    for i in range(2, 100):\n        for j in range(i, 100):\n            for k in range(j, 100):\n                if i * j * k == a and is_prime(i) and is_prime(j) and is_prime(k):\n                    return True\n    return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n): \n    import math\n    return math.isclose(x, n ** int(math.log(x, n)))", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    return x**(1./(n**0)) == x", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/76", "completion": "import math\n\ndef is_simple_power(x, n):\n    root = round(math.pow(n, 1/math.log2(n)))\n    return root**root == x\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/77", "completion": "c=lambda a:-1**0.3333333333333333*np.log10(np.abs(a))%1==0", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    c = int(round(a ** (1/3.0)))\n    return a == c ** 3", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/77", "completion": "import math\n\ndef iscube(a):\n    c = int(round(a ** (1.0/3)))\n    return a == c ** 3", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_dict = {'A': 'B', 'B': '11', 'C': '13', 'D': '13', 'E': '17', 'F': '19'}\n    count = 0\n    for i in num:\n        if i.isdigit() or (i.upper() in hex_dict):\n            if int(i) == 2 or int(i) == 3 or int(i) == 5 or int(i) == 7 or hex_dict.get(i.upper()) in ['11', '13', '17', '19']:\n                count += 1\n    return count", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    hex_dict = {'A': 'B', 'B': '11', 'C': '13', 'D': '13', 'E': '17', 'F': '19'}\n    count = 0\n    for i in num:\n        if i.upper() in hex_dict:\n            if hex_dict[i.upper()] in ['11', '13', '17', '19']:\n                count += 1\n        elif '0123456789'.find(i):\n            if i in ['2', '3', '5', '7']:\n                count += 1\n    return count", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    count = 0\n    for i in num:\n        if i.upper() in ['A', 'B', 'C', 'D', 'E', 'F']:\n            if int(i.upper(), 16) in [2, 3, 5, 7, 11, 13]:\n                count += 1\n        elif i.upper() in ['2', '3', '4', '5', '6', '7', '8', '9']:\n            if i.upper() in ['2', '3', '5', '7']:\n                count += 1\n    return count\n", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/79", "completion": "bin(x).replace(\"0b\", \"\").zfill(16)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal).replace(\"0b\", \"\").zfill(16) + \"db\"", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal).replace(\"0b\", \"\").zfill(16) + \"db\"", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    return [letter_grades[i] for i in range(len(letter_grades)) if sum(float(x)/4.0 for x in [str(x).split('.')[0] for x in str(i+3.0).split('.')]) >= x for x in grades]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    gpa_limits = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    result = []\n    for grade in grades:\n        idx = binary_search(gpa_limits, grade)\n        if idx < 0:\n            result.append('E')\n        elif idx >= len(gpa_limits) - 1:\n            result.append('A+')\n        else:\n            result.append(letter_grades[idx+1])\n    return result\n\ndef binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if low > 0:\n        return low - 1\n    return -1\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']\n    gpa_limits = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    result = []\n    for grade in grades:\n        idx = 0\n        while idx < len(gpa_limits) - 1 and grade > gpa_limits[idx+1]:\n            idx += 1\n        if grade > gpa_limits[idx+1]:\n            result.append(letter_grades[0])\n        else:\n            result.append(letter_grades[idx+1])\n    return result\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n): return (9**(n-2))*10 + (9**(n-1))", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n): return 9**(n-1) + 9**(n-2)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n): return (1 + (10**(n-1) - 1)) * 9 + (9**(n-1) + 9**(n-2))", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(x) for x in bin(N)[2:]))[2:]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(x) for x in bin(N)[2:]))[2:]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(x) for x in bin(N)[2:]))[2:].lstrip('0')", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/85", "completion": "lambda lst: sum([i for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0])", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(i for i in lst if i % 2 == 0 and lst.index(i) % 2 != 0)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    return ' '.join(''.join(sorted(word)) for word in s.split())", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = [(i, j) for i, sublst in enumerate(lst) for j, elem in enumerate(sublst) if elem == x]\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return array\n\n    first_sum = array[0] + array[-1]\n    array_copy = array.copy()\n    if first_sum % 2 == 0:\n        array_copy.sort(reverse=True)\n    else:\n        array_copy.sort()\n    return array_copy", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    shifted_alphabet = alphabet[2*2:] + alphabet[:2*2]\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += shifted_alphabet[alphabet.index(char)]\n            else:\n                result += shifted_alphabet[alphabet.index(char.lower())].upper()\n        else:\n            result += char\n    return result", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i] < lst[i+1]:\n            return lst[i+1]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    return len([s for s in S.split('.') if s.strip().startswith('I')]) + len([s for s in S.split('?') if s.strip().startswith('I')]) + len([s for s in S.split('!') if s.strip().startswith('I')])", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    return sum(1 for s in S.replace('.',' ').replace('?',' ').replace('!',' ').split() if s.strip().startswith('I'))", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = [s.strip() for s in S.rstrip('.!?').replace('.','. ').replace('?','? ').replace('!','! ').split('.')]\n    return sum(1 for s in sentences if s.strip().startswith('I'))", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z): \n  if isinstance(x, int) and isinstance(y, int) and isinstance(z, int): \n    return (x + y == z) or (x + z == y) or (y + z == x) \n  else: \n    return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/93", "completion": "def encode(message): \n    vowels = 'aeiouAEIOU' \n    result = '' \n    for char in message: \n        if char in vowels: \n            if char.islower(): \n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a')) \n            else: \n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A')) \n        else: \n            result += char \n    return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU' \n    result = '' \n    for char in message: \n        if char in vowels: \n            if char.islower(): \n                result += chr((ord(char) - ord('a') + 2) % 26 + ord('a')) \n            else: \n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A')) \n        else:\n            if char.isupper(): \n                result += chr((ord(char) - ord('A') + 2) % 26 + ord('A')) \n            else: \n                result += char.swapcase() \n    return result", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char.lower() in vowels:\n            if char.lower() == 'a':\n                result += 'c' if char.islower() else 'C'\n            elif char.lower() == 'e':\n                result += 'g' if char.islower() else 'G'\n            elif char.lower() == 'i':\n                result += 'k' if char.islower() else 'K'\n            elif char.lower() == 'o':\n                result += 'q' if char.islower() else 'Q'\n            elif char.lower() == 'u':\n                result += 'y' if char.islower() else 'Y'\n        else:\n            result += char.swapcase()\n    return result", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    max_prime = max(num for num in lst if is_prime(num))\n    return sum(int(digit) for digit in str(max_prime))\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(dict):\n    if not dict:\n        return False\n    lower = all(isinstance(k, str) and k.islower() for k in dict)\n    upper = all(isinstance(k, str) and k.isupper() for k in dict)\n    return lower or upper", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [i for i in range(n) if is_prime(i)]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/97", "completion": "lambda a, b: (a % 10) * (b % 10)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i].upper() in 'AEIOU':\n            count += 1\n    return count", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) if s[i].upper() in 'AEIOU')", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    return sum(1 for i in range(0, len(s), 2) for c in s[i] if c.upper() in 'AEIOU')", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value): \n    return round(float(value)) if float(value) % 1 > 0.5 else round(float(value)) if float(value) % 1 < 0.5 else round(float(value));", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value): \n    value_float = float(value)\n    return round(value_float) if value_float - round(value_float) < 0.5 else round(value_float) + 1", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value): \n    value_float = float(value)\n    return int(round(value_float)) if value_float < 0 else int(round(value_float)) + 1", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    i = n\n    while i > 0:\n        pile.append(i)\n        if i % 2 == 0:\n            i -= 1\n        else:\n            i += 1\n        n -= 1\n    pile.reverse()\n    return pile", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            pile.append(i * 2)\n        else:\n            pile.append(i * 2 - 1)\n    return pile", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n): \n    pile = [n]\n    for _ in range(n-1):\n        pile.append(pile[-1]+2 if len(pile) % 2 == 0 else pile[-1]+1)\n    return pile", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [w.strip() for w in (s.replace(',', ' ').split())]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    if x % 2 != 0:\n        x += 1\n    while x <= y:\n        if x % 2 == 0:\n            return x\n        x += 2\n    return -1", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        x, y = y, x\n    while x <= y:\n        if x % 2 == 0:\n            return x\n        x += 1\n    return -1", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round(sum(range(n, m+1))/len(range(n, m+1)))\n    return bin(avg)[2:]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m): \n    if n > m: \n        return -1 \n    s = sum(range(n, m+1)) \n    AVG = round(s / (m - n + 1)) \n    return bin(AVG)[2:]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    s = sum(range(n, m+1))\n    AVG = round(s / (m - n + 1))\n    return \"0b\" + bin(AVG)[2:]", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = [i for i in x if all(j % 2 != 0 for j in str(i))]\n    return sorted(result)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    result = [i for i in x if all(int(digit) % 2 != 0 for digit in str(i))]\n    return sorted(result)", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    digits = [str(i) for i in arr if 1 <= i <= 9]\n    digits.sort()\n    result = [''.join(reversed(map(lambda x: dict(zip(range(1, 10), ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']))[x], [int(digit) for digit in digits[i]]))) for i in range(len(digits))]\n    return result\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    digits = [str(i) for i in arr if 1 <= i <= 9]\n    digits.sort()\n    result = [dict(zip(range(1, 10), ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']))[int(d)] for d in reversed(digits)]\n    return result", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    res = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            res[i] = 1\n            num = 1\n            for j in range(2, i + 1):\n                num *= j\n            res[i] = num\n        else:\n            res[i] = sum(range(1, i + 1))\n    return res", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    res = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            res[i] = 1\n            num = 1\n            for j in range(1, i + 1):\n                num *= j\n            res[i] = num\n        else:\n            res[i] = sum(range(1, i + 1))\n    return res", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    res = [0] * n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            res[i-1] = 1\n            num = 1\n            for j in range(1, i + 1):\n                num *= j\n            res[i-1] = num\n        else:\n            res[i-1] = sum(range(1, i + 1))\n    return res", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even, odd = 0, 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1] and i % 2 == 0:\n            even += 1\n        elif str(i) == str(i)[::-1] and i % 2 != 0:\n            odd += 1\n    return even, odd\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(1 for num in arr if any(int(digit) > 0 for digit in str(abs(num))))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr): \n    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    arr = arr[1:] + [arr[0]]\n    while arr:\n        if arr != sorted(arr):\n            return False\n        arr = arr[1:] + [arr[0]]\n    return True", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr: return True\n    for i in range(len(arr)):\n        prev = arr[:i][-1]\n        for j in range(i):\n            if arr[j] > prev:\n                return False\n    return True\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr: return True\n    while True:\n        for i in range(1, len(arr)):\n            if arr[i-1] > arr[i]:\n                return False\n        if not any(arr[i-1] > arr[i] for i in range(1, len(arr))):\n            return True\n        arr = arr[1:] + [arr[0]]\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    ones = sum(x % 2 for x in lst1)\n    return 'YES' if ones > 0 and ones <= len(lst2) else 'NO'", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    odd_count = sum(1 for x in lst1 if x % 2)\n    return 'YES' if odd_count <= len(lst2) else 'NO'", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/110", "completion": "from typing import List\n\ndef exchange(lst1: List[int], lst2: List[int]) -> str:\n    odd_count = sum(1 for x in lst1 if x % 2)\n    return 'YES' if odd_count <= len(lst2) else 'NO'", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/111", "completion": "def histogram(test): \n    d = {}\n    for i in test.split():\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_count = max(d.values())\n    max_keys = [k for k, v in d.items() if v == max_count]\n    return {k: max_count for k in max_keys}", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    d = {}\n    for i in test.split():\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    if not d:\n        return {}\n    max_count = max(d.values())\n    max_keys = [k for k, v in d.items() if v == max_count]\n    return {k: max_count for k in max_keys}", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s,c):\n    s = ''.join([i for i in s if i not in c])\n    if s == s[::-1]:\n        return s, True\n    else:\n        return s, False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    s = \"the number of odd elements {}n the str{}ng {} of the {}nput.\"\n    return [s.format(i, i, i, i) for i in [str(sum(1 for x in y if int(x) % 2 == 1)) for y in lst]]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    res = 0\n    while True:\n        temp = [[0 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == 1:\n                    temp[i][j] = (capacity + temp[i][j] - 1 // (capacity + 1)) * (capacity + 1 if (capacity + temp[i][j]) % (capacity + 1) else capacity)\n                else:\n                    temp[i][j] = temp[i][j]\n        diff = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] != temp[i][j]:\n                    diff += 1\n        if diff == 0:\n            return res\n        grid = temp\n        res += 1", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    res = 0\n    while any(any(water > 0 for water in well) for well in grid):\n        add = sum(ceil(water / capacity) for row in grid for water in row if water > 0)\n        for i, row in enumerate(grid):\n            for j, water in enumerate(row):\n                if water > 0:\n                    grid[i][j] = water - add\n        res += 1\n    return res", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/115", "completion": "import math\n\ndef max_fill(grid, capacity):\n    res = 0\n    while any(any(water > 0 for water in well) for well in grid):\n        add = sum(math.ceil(water / capacity) for row in grid for water in row if water > 0)\n        for i, row in enumerate(grid):\n            for j, water in enumerate(row):\n                if water > 0:\n                    grid[i][j] = water - (water // capacity)\n        res += 1\n    return res", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/116", "completion": "lambda arr: sorted(arr, key=lambda x: (bin(x).count('1'), x))", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/117", "completion": "import re\n\ndef select_words(s, n):\n    s = s.split()\n    result = []\n    for word in s:\n        word = re.sub(r'[aeiou]', '', word.lower())\n        if len(word) == n:\n            result.append(word)\n    return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/117", "completion": "import re\n\ndef select_words(s, n):\n    s = s.split()\n    result = []\n    for word in s:\n        word = re.sub(r'[aeiouAEIOU]', '', word).lower()\n        if len(word) == n:\n            result.append(word)\n    return result", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    s = s.split()\n    result = []\n    for word in s:\n        word = word.lower()\n        consonants = 0\n        for char in word:\n            if char.isalpha() and char not in 'aeiou':\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    i = len(word) - 2\n    while i >= 0 and not word[i].lower() in 'aeiou':\n        i -= 1\n    if i < 0:\n        return ''\n    j = i + 1\n    while j < len(word) and not word[j].lower() in 'aeiou':\n        j += 1\n    return word[i:j]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    word = word.lower()\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in 'aeiou':\n            if i > 0 and not word[i - 1].lower() in 'aeiou':\n                return word[i]\n    return ''\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    word = word.lower()\n    for i in range(len(word) - 2, -1, -1):\n        if word[i].lower() in 'aeiou':\n            if not word[i - 1].lower() in 'aeiou' and not word[i + 1].lower() in 'aeiou':\n                return word[i]\n    return ''", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst): \n    return 'Yes' if bal(lst[0]) and bal(lst[1]) else 'No'\n\ndef bal(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    return 'Yes' if bal(lst[0] + lst[1]) else 'No'\n\ndef bal(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s = lst[0] + lst[1]\n    return 'Yes' if bal(s) else 'No'\n\ndef bal(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append('(')\n        elif c == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/120", "completion": "arr.sort()\nreturn arr[-k:]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(set(arr), reverse=True)[:k]", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/121", "completion": "lambda lst: sum(i for i in lst if i % 2 and (lst.index(i) + 1) % 2 == 0)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/121", "completion": "lambda lst: sum(i for i in lst if i % 2 and idx % 2 == 0 for idx, i in enumerate(lst))", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(i for i in lst if i % 2 and idx % 2 == 0 for idx, i in enumerate(lst))", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if 10 <= abs(x) < 100)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k): \n    return sum(x for x in arr[:k] if 10 <= abs(x) <= 99)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k): \n    return sum(x for x in arr[:k] if 10 <= abs(int(str(abs(x)))) <= 99)", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    result = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        if n % 2 != 0:\n            result.append(n)\n    return sorted(set(result))", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(n)\n    result = [a for a in sequence if a % 2 != 0]\n    return sorted(result)", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/124", "completion": "from datetime import datetime\n\ndef valid_date(date):\n    try:\n        datetime.strptime(date, '%m-%d-%Y').date()\n        return True\n    except ValueError:\n        return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if len(words) == 1 and not words[0].strip().replace(',', '').isalnum():\n        return sum(ord(c) % 2 for c in txt.lower() if 'a' <= c <= 'z')", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if len(words) == 1 and not words[0].strip().replace(',', '').isalnum():\n        return sum(ord(c) % 2 for c in txt.lower() if 'a' <= c <= 'z')\n    return [w for w in words if w != ''] or sum(ord(c) % 2 for c in txt.lower() if 'a' <= c <= 'z')", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    words = txt.split()\n    if len(words) == 1 and not words[0].strip().isalnum():\n        if ',' in txt:\n            return txt.replace(',', ' ').split()\n        else:\n            return sum(ord(c) % 2 for c in txt.lower() if 'a' <= c <= 'z')\n    return [w for w in words if w]", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return len(set(lst)) == len(lst)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            break\n    else:\n        return True", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "lambda interval1, interval2: \"YES\" if len(set(range(max(max(interval1[0], interval2[0]), interval1[1], interval2[1]), min(min(interval1[1], interval2[1]), interval1[0], interval2[0])+1)).intersection(range(interval1[0], interval1[1]+1)).intersection(range(interval2[0], interval2[1]+1))) else str(set(range(min(interval1[0], interval2[0]), max(interval1[1], interval2[1])+1)).difference(range(interval1[0], interval1[1]+1)).difference(range(interval2[0], interval2[1]+1)).distinct) == 2 else \"NO\"", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    intersection_length = end - start + 1\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return \"YES\" if is_prime(intersection_length) else \"NO\"", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    intersection_length = end - start + 1\n    def is_prime(n):\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    return \"YES\" if is_prime(intersection_length) else \"NO\"", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/128", "completion": "lambda arr: sum((v for v in arr if v != 0), 0) if arr else None", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            return None\n        sign_product *= (-1) ** (num > 0)\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr): \n    if not arr: \n        return None \n    sign_product = 1 \n    magnitude_sum = 0 \n    for num in arr: \n        if num == 0: \n            return None \n        sign_product *= -(num < 0) + 2 * (num > 0) \n        magnitude_sum += abs(num) \n    return sign_product * magnitude_sum", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    rows, cols = len(grid), len(grid[0])\n    visited = [[[False]*cols for _ in range(rows)] for _ in range(2)]\n    directions = [(0,1), (0,-1), (1,0), (-1,0)]\n    def dfs(r, c, path, k):\n        if k == 0:\n            return path\n        for nr, nc in directions:\n            nr, nc = r+nr, c+nc\n            if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] not in path:\n                if visited[0][r][c]:\n                    continue\n                visited[0][r][c] = True\n                res = dfs(nr, nc, path + [grid[nr][nc]], k-1)\n                if res:\n                    return res\n                visited[0][r][c] = False\n        return None\n    min_path = None\n    for r in range(rows):\n        for c in range(cols):\n            if visited[0][r][c]:\n                continue\n            visited[0][r][c] = True\n            res = dfs(r, c, [grid[r][c]], k)\n            if res:\n                if min_path is None or res < min_path:\n                    min_path = res\n            visited[0][r][c] = False\n    return min_path\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    rows, cols = len(grid), len(grid[0])\n    res = float('inf')\n    visited = [[False]*cols for _ in range(rows)]\n    directions = [(0,1), (0,-1), (1,0), (-1,0)]\n    for r in range(rows):\n        for c in range(cols):\n            if visited[r][c]:\n                continue\n            path = []\n            stack = [(r, c, k, [grid[r][c]])]\n            while stack:\n                r, c, k, path = stack.pop()\n                if k == 0:\n                    if len(path) < res:\n                        res = len(path)\n                        res_path = path\n                else:\n                    for nr, nc in directions:\n                        nr, nc = r+nr, c+nc\n                        if 0 <= nr < rows and 0 <= nc < cols and grid[nr][nc] not in path:\n                            stack.append((nr, nc, k-1, path + [grid[nr][nc]]))\n                            visited[r][c] = True\n            visited[r][c] = False\n    return res_path", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    import heapq\n    rows, cols = len(grid), len(grid[0])\n    hq = [(grid[0][0], 0, [grid[0][0]])]\n    visited = set([(0, 0, [grid[0][0]])])\n    res = [(float('inf'), [])]\n    while hq:\n        v, k, path = heapq.heappop(hq)\n        if k > 0 and len(path) < len(res[0][1]):\n            res[0] = (k, path)\n        for nr, nc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = rows + nr, cols + nc\n            if 1 <= nr < rows and 1 <= nc < cols and tuple(sorted(path + [grid[nr-1][nc-1]])) not in visited:\n                heapq.heappush(hq, (grid[nr-1][nc-1], k-1, path + [grid[nr-1][nc-1]]))\n                visited.add(tuple(sorted(path + [grid[nr-1][nc-1]])))\n    return res[0][1]", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n  result = [3]\n  if n > 0:\n    result.append(1)\n    if n > 1:\n      result.append(3)\n      if n > 2:\n        for i in range(3, n + 1):\n          if i % 2 == 0:\n            result.append(1 + i // 2)\n          else:\n            a, b = result[i - 1], result[i - 2] + result[i - 3]\n            result.append(a + b)\n  return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 1]\n    else:\n        t1, t2, t3 = 3, 1, 2\n        result = [3, 1, 2]\n        for _ in range(3, n + 1):\n            t1, t2, t3 = t2, t3, t1 + t2 + t3\n            result.append(t3)\n        return result", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [3, 1, 2]\n    else:\n        result = [3, 1, 2]\n        for _ in range(3, n + 1):\n            if _ % 2 == 0:\n                t1, t2 = 2, 3\n            else:\n                t1, t2 = 3, result[-1] + result[-2] + result[-3]\n            result.append(t1)\n        return result", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/131", "completion": "def digits(n): \n    product = 1 \n    for digit in str(n): \n        if int(digit) % 2 != 0: \n            product *= int(digit) \n    return product", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(s):\n    count = 0\n    for c in s:\n        if c == '[':\n            count += 1\n        elif c == ']':\n            count -= 1\n            if count < 0:\n                return False\n    return count > 0", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(s):\n    count = 0\n    for c in s:\n        if c == '[':\n            count += 1\n        elif c == ']':\n            if count <= 0:\n                return False\n            count -= 1\n    return count > 0\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(s):\n    count = 0\n    for c in s:\n        if c == '[':\n            count += 1\n        elif c == ']':\n            if count <= 0:\n                return False\n            count -= 1\n    return count > 0", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return math.ceil(sum([i**2 for i in lst]))", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    return math.ceil(sum([math.ceil(i)**2 for i in lst]))", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt:\n        if txt[-1].isalpha():\n            if txt.rstrip().endswith(txt[-1]):\n                return False\n            return True\n    return False", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt:\n        if txt[-1].isalpha():\n            return not txt.rstrip().endswith(txt[-1])\n    return False", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if txt:\n        if txt[-1].isalpha():\n            return not txt.rstrip().endswith(txt[-1]) or txt.rstrip()[-1] == ' '\n    return False", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr): \n    for i in range(len(arr)-1, 0, -1): \n        if arr[i-1] <= arr[i]: \n            return i-1 \n    return -1", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr): \n    for i in range(len(arr)-1, -1, -1): \n        if all(num <= arr[i] for num in arr[:i]): \n            return i \n    return -1", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr): \n    for i in range(len(arr)-1, -1, -1): \n        if not any(num >= arr[i] for num in arr[:i]): \n            return i \n    return -1", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/136", "completion": "lambda lst: (max(x for x in lst if x<0) if any(x<0 for x in lst) else None, min(x for x in lst if x>0) if any(x>0 for x in lst) else None)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    return (max(negatives) if negatives else None, min(positives) if positives else None)", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and a.replace('.', '', 1).replace(',', '', 1).replace('-', '', 1).isdigit():\n        a = float(a)\n    if isinstance(b, str) and b.replace('.', '', 1).replace(',', '', 1).replace('-', '', 1).isdigit():\n        b = float(b)\n    if a > b: \n        return a\n    elif a < b: \n        return b\n    else: \n        return None", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace('.', '', 1).replace(',', '').replace('-', '', 1)\n        b = b.replace('.', '', 1).replace(',', '').replace('-', '', 1)\n        if a.isdigit() and b.isdigit():\n            a, b = float(a), float(b)\n    if a > b: \n        return a if isinstance(a, (int, float)) else str(a)\n    elif a < b: \n        return b if isinstance(b, (int, float)) else str(b)\n    else: \n        return None", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for i in range(2, n+1, 2):\n        for j in range(i+1, n+1, 2):\n            for k in range(j+1, n+1, 2):\n                for m in range(k+1, n+1, 2):\n                    if i + j + k + m == n:\n                        return True\n    return False", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for i in range(2, n+1, 2):\n        for j in range(i+1, n+1, 2):\n            for k in range(j+1, n+1, 2):\n                for m in range(k+1, n+1, 2):\n                    if i + j + k + m == n:\n                        return True\n    return False", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    for i in range(2, n//2 + 1, 2):\n        for j in range(i, n//2 + 1, 2):\n            for k in range(j, n + 1, 2):\n                for m in range(k, n + 1, 2):\n                    if i + j + k + m == n:\n                        return True\n    return False", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n): \n    result = 1 \n    for i in range(1, n+1): \n        result *= math.factorial(i) \n    return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/139", "completion": "import math\n\ndef special_factorial(n):\n    if n < 1:\n        return None\n    result = math.factorial(n)\n    for i in range(n-1, 0, -1):\n        result *= math.factorial(i)\n    return result", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return text.replace(\"  \", \"-\").replace(\" \", \"_\")", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return_text = \"\"\n    for char in text:\n        if char == \" \":\n            if return_text[-1:] == \" \":\n                if return_text[-3:] == \"   \":\n                    return_text += \"-\"\n                else:\n                    return_text += \"_\"\n            else:\n                return_text += \"_\"\n        else:\n            return_text += char\n    return return_text", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    return_text = \"\"\n    prev_char = \"\"\n    for char in text:\n        if char == \" \":\n            if prev_char == \" \":\n                if return_text and return_text[-1] != \"-\":\n                    return_text += \"-\"\n            else:\n                if return_text and return_text[-1] != \"_\":\n                    return_text += \"_\"\n            prev_char = \" \"\n        else:\n            if prev_char == \" \":  \n                return_text += \"_\" + char\n            else:\n                return_text += char\n            prev_char = char\n    return return_text", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/141", "completion": "import re\n\ndef file_name_check(file_name):\n    if not 0 <= file_name.count('.') <= 1:\n        return 'No'\n    if '.' not in file_name:\n        return 'No'\n    if not re.match('^[a-zA-Z].*$', file_name.rsplit('.', 1)[0]):\n        return 'No'\n    if file_name.split('.')[-1].lower() not in ['txt', 'exe', 'dll']:\n        return 'No'\n    digits = len([c for c in file_name if c.isdigit()])\n    if digits > 3:\n        return 'No'\n    return 'Yes'", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst): \n    return sum([i**2 if i%3==0 else i**3 if i%4==0 and i%3!=0 else i for i in lst])", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    prime = lambda x: all(x%i for i in range(2,x) or i==2)\n    return ' '.join(word for word in sentence.split() if prime(len(word)))\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/143", "completion": "def words_in_sentence(sentence):\n    def is_prime(n):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n\n    return ' '.join(word for word in sentence.split() if is_prime(len(word)))\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return x_num * n_den == x_den * n_num", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    lcm = abs(x_den*n_den)\n    x_den = 0\n    while lcm % x_den != 0:\n        x_den += 1\n    x_num, n_num = x_num*n_den // x_den, n_num*x_den // x_den\n    den = abs(x_num)\n    while den % x_num != 0:\n        den //= x_num\n    return den == 1", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    lcm = abs(x_den*n_den)\n    while lcm % x_den != 0:\n        lcm += 1\n    x_num, n_num = x_num*n_den // lcm, n_num*x_den // lcm\n    den = abs(x_num)\n    while den % x_num != 0:\n        den //= x_num\n    return den == 1\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums): \n    return sorted((num, sum(int(digit) for digit in str(abs(num))), i) for i, num in enumerate(nums)) [::-1][::-1]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted((num if num >= 0 else -num, sum(int(digit) for digit in str(abs(num))), i) for i, num in enumerate(nums))", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums): \n    return sorted((sum(int(digit) for digit in str(abs(num))), i) for i, num in enumerate(nums))", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            if int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0:\n                count += 1\n    return count\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    lst = [s for s in lst if len(s) % 2 == 0]\n    sorted_lst = sorted(lst, key=lambda s:(len(s), s))\n    return sorted_lst", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/150", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/151", "completion": "lambda lst: sum(i**2 for i in lst if isinstance(i, int) and i % 2 != 0)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(i**2 for i in lst if isinstance(i, int) and i >= 0 and i % 2 != 0) if len(lst) else 0", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/152", "completion": "lambda game,guess: [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/152", "completion": "lambda game,guess: [abs(a-b) for a,b in zip(game,guess) if a!=b else [0]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/152", "completion": "def compare(game,guess):\n    return [abs(a-b) if a!=b else 0 for a,b in zip(game,guess)]", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def strength(extensions):\n        return extensions.upper().count() - extensions.lower().count()\n    return f\"{class_name}.{max(extensions, key=strength)}\"", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def strength(e):\n        return (e.upper().count() - e.lower().count())\n    return f\"{class_name}.{max(extensions, key=strength)}\"\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def strength(e):\n        return (e.upper().count(e) - e.lower().count(e))\n    return f\"{class_name}.{max(extensions, key=strength)}\"", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for i in range(len(a)):\n        if a[i:i+len(b)] == b:\n            return True\n        temp = a[i:] + a[:i]\n        if temp.count(b) > 0:\n            return True\n    return False\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(b) > len(a):\n        return False\n    for i in range(len(a)):\n        temp = a[i:] + a[:i]\n        if b in temp:\n            return True\n    return False", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(b)>len(a):\n        return False\n    for i in range(len(a)):\n        temp=a[i:]+a[:i]\n        if b in temp:\n            return True\n    return False", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    num = str(abs(num))  \n    even = sum(1 for digit in num if int(digit) % 2 == 0)  \n    odd = len(num) - even  \n    return (even, odd)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_dict = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}\n    roman = ''\n    for key in sorted(roman_dict.keys(), reverse=True):\n        while number >= key:\n            number -= key\n            roman += roman_dict[key]\n    return roman.lower()", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    if a*a+b*b==c*c or a*a+c*c==b*b or b*b+c*c==a*a:\n        return True\n    return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_word = \"\"\n    max_count = 0\n    for word in sorted(words):\n        current_count = len(set(word))\n        if current_count > max_count:\n            max_count = current_count\n            max_word = word\n    return max_word", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    eaten = number + (remaining + need) if remaining + need > 0 else number\n    left = eaten - need if eaten >= need else 0\n    return [eaten, left]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    eaten = number + min(remaining, need)\n    left = remaining - (eaten - number)\n    return [eaten, left]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for o, num in zip(operator, operand[1:]):\n        if o == '+':\n            result += num\n        elif o == '-':\n            result -= num\n        elif o == '*':\n            result *= num\n        elif o == '//':\n            result //= num\n        elif o == '**':\n            result **= num\n    return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/160", "completion": "def do_alpha(operator, operand):\n    result = operand[0]\n    for o, num in zip(operator, operand[1:]):\n        if o == '+':\n            result += num\n        elif o == '-':\n            result -= num\n        elif o == '*':\n            result *= num\n        elif o == '//':\n            result = result // num\n        elif o == '**':\n            result **= num\n    return result", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for o, num in zip(operator, operand[1:]):\n        if o == '+':\n            result += num\n        elif o == '-':\n            result -= num\n        elif o == '*':\n            result *= num\n        elif o == '//':\n            result = result // num\n        elif o == '**':\n            result **= num\n    return result", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    r = \"\"\n    for char in s:\n        if char.isalpha():\n            r += char.swapcase()\n        else:\n            r += char\n    return r if r.isalpha() else r[::-1]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    r = \"\".join(c.swapcase() if c.isalpha() else c for c in s)\n    return r[::-1] if not r.isalpha() else r", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    r = \"\".join(c.swapcase() if c.isalpha() else c for c in s)\n    return r[::-1] if not any(c.isalpha() for c in r) else r", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b): \n    if a > b: \n        a, b = b, a \n    return [i for i in range(a, b+1) if i % 2 == 0]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b): \n    if a > b: \n        a, b = b, a \n    return [i for i in range(a, b+1) if str(i).count('0') % 2 == 0]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    if a > b: \n        a, b = b, a \n    return [i for i in range(a, b+1) if int(str(i)[0]) % 2 == 0]", "attempt_no": 3, "passed_tests": false}
