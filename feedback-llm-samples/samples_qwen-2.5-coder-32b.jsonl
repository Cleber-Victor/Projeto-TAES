{"task_id": "HumanEval/0", "completion": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers.sort()\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    balance = 0\n\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            balance += 1\n            current_group.append(char)\n        elif char == ')':\n            balance -= 1\n            current_group.append(char)\n            if balance == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_group = []\n    balance = 0\n\n    for char in paren_string.replace(' ', ''):\n        if char == '(':\n            balance += 1\n            current_group.append(char)\n        elif char == ')':\n            balance -= 1\n            current_group.append(char)\n            if balance == 0:\n                result.append(''.join(current_group))\n                current_group = []\n\n    return result", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    return number - int(number)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/4", "completion": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimiter, number])\n    return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/5", "completion": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimiter, number])\n    return result", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    def max_depth(s: str) -> int:\n        depth = max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    return [max_depth(group) for group in paren_string.split()]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/6", "completion": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def max_depth(s: str) -> int:\n        depth = max_depth = 0\n        for char in s:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        return max_depth\n\n    return [max_depth(group) for group in paren_string.split()]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), 1 if not numbers else evaluate_product(numbers))\n\ndef evaluate_product(numbers: List[int]) -> int:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/8", "completion": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return (sum(numbers), 1 if not numbers else evaluate_product(numbers))\n\n\ndef evaluate_product(numbers: List[int]) -> int:\n    product = 1\n    for number in numbers:\n        product *= number\n    return product", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    current_max = numbers[0]\n    for number in numbers[1:]:\n        current_max = max(current_max, number)\n        result.append(current_max)\n    return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/9", "completion": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    current_max = numbers[0]\n    for number in numbers[1:]:\n        current_max = max(current_max, number)\n        result.append(current_max)\n    return result", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/10", "completion": "def make_palindrome(string: str) -> str:\n    if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/12", "completion": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/14", "completion": "def all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(map(str, range(n + 1)))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[note] for note in notes]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/17", "completion": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[note] for note in notes]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while start <= len(string) - len(substring):\n        pos = string.find(substring, start)\n        if pos != -1:\n            count += 1\n            start = pos + 1\n        else:\n            break\n    return count", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/19", "completion": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    reverse_num_map = {v: k for k, v in num_map.items()}\n    sorted_numbers = sorted(numbers.split(), key=lambda x: num_map[x])\n    return ' '.join(reverse_num_map[num_map[num]] for num in sorted_numbers)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/20", "completion": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/21", "completion": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/22", "completion": "def filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/22", "completion": "from typing import List\nfrom typing import Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    return len(string)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/25", "completion": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= 2:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    from collections import Counter\n    count = Counter(numbers)\n    return [num for num in numbers if count[num] == 1]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/26", "completion": "from typing import List\nfrom collections import Counter\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = Counter(numbers)\n    return [num for num in numbers if count[num] == 1]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/28", "completion": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/29", "completion": "def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/29", "completion": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    return [x for x in l if x > 0]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/31", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/32", "completion": "import numpy as np\n\n\ndef find_zero(xs: list):\n    return np.roots(xs).real[np.isclose(np.polyval(xs, np.roots(xs).real), 0)][0]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/32", "completion": "import math\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    import numpy as np\n    roots = np.roots(xs)\n    real_roots = roots[np.isclose(np.imag(roots), 0)].real\n    for root in real_roots:\n        if math.isclose(poly(xs, root), 0, abs_tol=1e-4):\n            return root\n    return None\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/32", "completion": "import math\nimport numpy as np\n\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    roots = np.roots(xs)\n    real_roots = roots[np.isclose(np.imag(roots), 0)].real\n    for root in real_roots:\n        if math.isclose(poly(xs, root), 0, abs_tol=1e-4):\n            return root\n    return None", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    divisible_by_three.sort()\n    result = l[:]\n    for idx, value in enumerate(divisible_by_three):\n        result[idx * 3] = value\n    return result", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    return sorted(set(l))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    return max(l)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_index_values = sorted(l[::2])\n    result = l[:]\n    result[::2] = even_index_values\n    return result", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/38", "completion": "def decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/39", "completion": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    fib_sequence = [0, 1]\n    count = 0\n    while True:\n        next_fib = fib_sequence[-1] + fib_sequence[-2]\n        fib_sequence.append(next_fib)\n        if is_prime(next_fib):\n            count += 1\n            if count == n:\n                return next_fib", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return n * n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    return [x + 1 for x in l]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    seen = set()\n    for x in l:\n        if -x in seen:\n            return True\n        seen.add(x)\n    return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(str(x) for x in digits[::-1])", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    return 0.5 * a * h", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int):\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 0:\n        return (s[mid - 1] + s[mid]) / 2\n    else:\n        return s[mid]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/50", "completion": "def decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/50", "completion": "def encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int) -> bool:\n    return all(x < t for x in l)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    return x + y", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/55", "completion": "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        elif bracket == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            decreasing = False\n        elif l[i] < l[i-1]:\n            increasing = False\n    return increasing or decreasing", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    return sorted(set(l1) & set(l2))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    factor = 2\n    while n > 1:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return factor", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for bracket in brackets:\n        if bracket == '(':\n            balance += 1\n        elif bracket == ')':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/62", "completion": "def derivative(xs: list):\n    return [i * x for i, x in enumerate(xs) if i > 0]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    s = s.lower()\n    vowels = \"aeiou\"\n    count = sum(1 for char in s if char in vowels)\n    if s.endswith('y'):\n        count += 1\n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"RHYTHMY\"))  # 1\nprint(vowels_count(\"sky\"))  # 1\nprint(vowels_count(\"SKYY\"))  # 2\nprint(vowels_count(\"aeiouy\"))  # 6\nprint(vowels_count(\"AEIOUY\"))  # 6\nprint(vowels_count(\"bcd\"))  # 0\nprint(vowels_count(\"BCD\"))  # 0\nprint(vowels_count(\"\"))  # 0\nprint(vowels_count(\"y\"))  # 1\nprint(vowels_count(\"Y\"))  # 1", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    s = str(x)\n    n = len(s)\n    if shift >= n:\n        return s[::-1]\n    return s[-shift:] + s[:-shift]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    s = str(x)\n    n = len(s)\n    if shift >= n:\n        return s[::-1]\n    return s[-(shift % n):] + s[:-(shift % n)]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    s = str(x)\n    n = len(s)\n    if shift >= n:\n        return s[::-1]\n    return s[-shift:] + s[:-shift]", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    a, o = map(int, s.split()[::4])\n    return n - a - o", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s, n):\n    a, o = [int(x) for x in s.split() if x.isdigit()]\n    return n - a - o", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_even = float('inf')\n    min_index = -1\n    for i, value in enumerate(arr):\n        if value % 2 == 0 and value < min_even:\n            min_even = value\n            min_index = i\n    return [min_even, min_index] if min_index != -1 else []", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    from collections import Counter\n    count = Counter(lst)\n    result = -1\n    for num, freq in count.items():\n        if freq >= num:\n            result = max(result, num)\n    return result", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    result = []\n    ascending = True\n    while lst:\n        if ascending:\n            value = min(lst)\n        else:\n            value = max(lst)\n        lst.remove(value)\n        result.append(value)\n        ascending = not ascending\n    return result", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    return lst1 if total1 <= total2 else lst2", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = n\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    return round(a ** (1/3)) ** 3 == a", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:\n        a = -a\n        return round(a ** (1/3)) ** 3 == a\n    return round(a ** (1/3)) ** 3 == a", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum(1 for digit in num if digit in prime_hex_digits)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/82", "completion": "def prime_length(string):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    return 18 * 9 ** (n - 2) + 2 * 9 ** (n - 1) - 9 ** (n - 2)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    return 18 * 9 ** (n - 2) + 9 ** (n - 1)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    if n == 1:\n        return 1\n    return 9 * 10 ** (n - 2) + 8 * 9 ** (n - 2)", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in str(bin(N)[2:])))[:1]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    def sort_word(word):\n        return ''.join(sorted(word))\n    \n    return ' '.join(sort_word(word) for word in s.split(' '))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = [(i, j) for i, row in enumerate(lst) for j, val in enumerate(row) if val == x]\n    return sorted(result, key=lambda k: (k[0], -k[1]))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    if not array:\n        return []\n    if len(array) == 1:\n        return array[:]\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                result += chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            elif char.isupper():\n                result += chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            result += char\n    return result", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    unique_sorted = sorted(set(lst))\n    return unique_sorted[1] if len(unique_sorted) > 1 else None", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == \"I\":\n            count += 1\n    return count", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == \"I\":\n            count += 1\n    return count", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x + y == z or x + z == y or y + z == x)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    shifted_vowels = {v: chr(ord(v) + 2) for v in vowels}\n    shifted_vowels.update({v.upper(): shifted_vowels[v].upper() for v in vowels})\n    return ''.join(shifted_vowels.get(c, c.swapcase()) for c in message)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    shifted_vowels = {v: chr(ord(v) + 2) for v in vowels}\n    shifted_vowels.update({v.upper(): shifted_vowels[v].upper() for v in vowels})\n    return ''.join(shifted_vowels.get(c.lower(), c).swapcase() if c.lower() in vowels else c.swapcase() for c in message)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = 'aeiou'\n    shifted_vowels = {v: chr(ord(v) + 2) for v in vowels}\n    shifted_vowels.update({v.upper(): shifted_vowels[v].upper() for v in vowels})\n    return ''.join(shifted_vowels.get(c, c).swapcase() for c in message)", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/94", "completion": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst):\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum(int(digit) for digit in str(largest_prime))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    if not d:\n        return False\n    lower_case = upper_case = None\n    for key in d.keys():\n        if not isinstance(key, str):\n            return False\n        if lower_case is None and upper_case is None:\n            lower_case = key.islower()\n            upper_case = key.isupper()\n        elif (lower_case and not key.islower()) or (upper_case and not key.isupper()):\n            return False\n    return True", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    if not d:\n        return False\n    lower_case = all(k.islower() for k in d.keys() if isinstance(k, str))\n    upper_case = all(k.isupper() for k in d.keys() if isinstance(k, str))\n    return lower_case or upper_case and not (lower_case and upper_case)", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(d):\n    if not d:\n        return False\n    keys = [k for k in d.keys() if isinstance(k, str)]\n    if not keys:\n        return False\n    lower_case = all(k.islower() for k in keys)\n    upper_case = all(k.isupper() for k in keys)\n    return lower_case or upper_case and not (lower_case and upper_case)", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/96", "completion": "def count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return [x for x in range(n) if is_prime(x)]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    return (a % 10) * (b % 10)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    pile = []\n    current_stones = n\n    for _ in range(n):\n        pile.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return pile", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    return [word.strip() for word in s.replace(',', ' ').split() if word]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    if x > y:\n        return -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    def has_no_even_digit(n):\n        return all(int(digit) % 2 != 0 for digit in str(n))\n    \n    return sorted(filter(has_no_even_digit, x))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_sorted_reversed = sorted((x for x in arr if 1 <= x <= 9), reverse=True)\n    return [names[x-1] for x in filtered_sorted_reversed]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    def factorial(x):\n        return 1 if x == 0 or x == 1 else x * factorial(x - 1)\n    \n    def sum_to(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_to(i))\n    return result", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    \n    even_count, odd_count = 0, 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    \n    return (even_count, odd_count)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num).lstrip('-'))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    def sum_of_digits(num):\n        digits = str(num)\n        if digits[0] == '-':\n            return sum(int(digits[0] + digits[1]) if i == 0 else int(digit) for i, digit in enumerate(digits))\n        else:\n            return sum(int(digit) for digit in digits)\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if not arr:\n        return True\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if arr[i:] + arr[:i] == sorted_arr:\n            return True\n    return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    evens_in_lst2 = [x for x in lst2 if x % 2 == 0]\n    odds_in_lst1 = [x for x in lst1 if x % 2 != 0]\n    return \"YES\" if len(evens_in_lst2) >= len(odds_in_lst1) else \"NO\"", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    if not test:\n        return {}\n    letters = test.split()\n    count = {}\n    for letter in letters:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    max_count = max(count.values())\n    return {k: v for k, v in count.items() if v == max_count}", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    import math\n    total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    total_water = sum(sum(row) for row in grid)\n    return (total_water + capacity - 1) // capacity", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    return [word for word in s.split() if sum(1 for char in word if char in consonants) == n]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    last_consonant = -1\n    closest_vowel = \"\"\n    \n    for i in range(1, len(word) - 1):\n        if word[i] in vowels:\n            if last_consonant != -1 and word[i + 1] not in vowels:\n                closest_vowel = word[i]\n        else:\n            last_consonant = i\n    \n    return closest_vowel", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    closest_vowel = \"\"\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels:\n            if word[i - 1] not in vowels and word[i + 1] not in vowels:\n                closest_vowel = word[i]\n                break\n    \n    return closest_vowel", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1, s2 = lst\n    return 'Yes' if is_good(s1 + s2) or is_good(s2 + s1) else 'No'", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr)[-k:][::-1] if k > 0 else []", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    return sorted(arr, reverse=True)[:k] if k > 0 else []", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    return sum(x for x in arr[:k] if -99 <= x <= 99)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    odd_numbers = set()\n    while n != 1:\n        if n % 2 == 1:\n            odd_numbers.add(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.add(1)\n    return sorted(odd_numbers)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if not date:\n        return False\n    try:\n        month, day, year = map(int, date.split('-'))\n    except (ValueError, TypeError):\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1:\n        return False\n    if month in {1, 3, 5, 7, 8, 10, 12} and day > 31:\n        return False\n    if month in {4, 6, 9, 11} and day > 30:\n        return False\n    if month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day > 29:\n                return False\n        else:\n            if day > 28:\n                return False\n    return True", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 1)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    from collections import Counter\n    if any(count > 2 for count in Counter(lst).values()):\n        return False\n    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/127", "completion": "def intersection(interval1, interval2):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/128", "completion": "def prod_signs(arr):\n    if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        magnitude_sum += abs(num)\n        if num == 0:\n            sign_product = 0\n        else:\n            sign_product *= (1 if num > 0 else -1)\n    return magnitude_sum * sign_product\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    from heapq import heappush, heappop\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    min_path = None\n    for i in range(N):\n        for j in range(N):\n            pq = [(grid[i][j], [(i, j)])]\n            while pq:\n                current_value, path = heappop(pq)\n                if len(path) == k:\n                    current_path_values = [grid[x][y] for x, y in path]\n                    if min_path is None or current_path_values < min_path:\n                        min_path = current_path_values\n                    continue\n                for dx, dy in directions:\n                    nx, ny = path[-1][0] + dx, path[-1][1] + dy\n                    if is_valid(nx, ny) and (nx, ny) not in path:\n                        new_path = path + [(nx, ny)]\n                        heappush(pq, (current_value + grid[nx][ny], new_path))\n    \n    return min_path\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    from heapq import heappush, heappop\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    min_path = None\n    for i in range(N):\n        for j in range(N):\n            pq = [(grid[i][j], [(i, j)])]\n            while pq:\n                current_value, path = heappop(pq)\n                if len(path) == k:\n                    current_path_values = [grid[x][y] for x, y in path]\n                    if min_path is None or current_path_values < min_path:\n                        min_path = current_path_values\n                    continue\n                for dx, dy in directions:\n                    nx, ny = path[-1][0] + dx, path[-1][1] + dy\n                    if is_valid(nx, ny):\n                        new_path = path + [(nx, ny)]\n                        heappush(pq, (current_value, new_path))\n    \n    return min_path", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/129", "completion": "def minPath(grid, k):\n    from itertools import product\n    import heapq\n\n    N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def is_valid(x, y):\n        return 0 <= x < N and 0 <= y < N\n\n    min_path = None\n    pq = []\n    for i, j in product(range(N), range(N)):\n        heapq.heappush(pq, (grid[i][j], [(i, j)]))\n\n    while pq:\n        current_value, path = heapq.heappop(pq)\n        if len(path) == k:\n            current_path_values = [grid[x][y] for x, y in path]\n            if min_path is None or current_path_values < min_path:\n                min_path = current_path_values\n            continue\n        x, y = path[-1]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny):\n                new_path = path + [(nx, ny)]\n                next_value = current_value + grid[nx][ny]\n                heapq.heappush(pq, (next_value, new_path))\n\n    return min_path\n", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    def tribonacci(memo, x):\n        if x in memo:\n            return memo[x]\n        if x == 1:\n            memo[x] = 3\n            return 3\n        if x % 2 == 0:\n            memo[x] = 1 + x / 2\n            return memo[x]\n        else:\n            memo[x] = tribonacci(memo, x - 1) + tribonacci(memo, x - 2) + tribonacci(memo, x + 1)\n            return memo[x]\n    \n    memo = {}\n    result = [tribonacci(memo, i) for i in range(n + 1)]\n    return result", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    depth = 0\n    max_depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ']':\n            depth -= 1\n        if depth < 0:\n            return False\n    return max_depth > 1", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    depth = 0\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            depth -= 1\n        if depth < 0:\n            return False\n        if depth > 1:\n            return True\n    return False", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    depth = 0\n    nested = False\n    for char in string:\n        if char == '[':\n            depth += 1\n        elif char == ']':\n            depth -= 1\n        if depth < 0:\n            return False\n        if depth > 1:\n            nested = True\n    return nested and depth == 0", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    import math\n    return sum(math.ceil(x) ** 2 for x in lst)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()\n    if not txt:\n        return False\n    parts = txt.split()\n    return parts[-1].isalpha() and len(parts[-1]) == 1", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()\n    if not txt:\n        return False\n    parts = txt.split()\n    return len(parts) > 0 and parts[-1].isalpha() and len(parts[-1]) == 1", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    txt = txt.rstrip()\n    if not txt:\n        return False\n    parts = txt.split()\n    if len(parts) == 0:\n        return False\n    last_part = parts[-1]\n    return len(last_part) == 1 and last_part.isalpha()", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    def convert(x):\n        if isinstance(x, str):\n            x = x.replace(',', '.')\n            try:\n                return float(x)\n            except ValueError:\n                return x\n        return x\n\n    def back_to_original(x, original):\n        if isinstance(original, str):\n            return str(x).replace('.', ',') if ',' in original else str(x)\n        return x\n\n    num_a = convert(a)\n    num_b = convert(b)\n\n    if num_a == num_b:\n        return None\n    elif num_a > num_b:\n        return back_to_original(a, a)\n    else:\n        return back_to_original(b, b)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    return n >= 8 and n % 2 == 0", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/139", "completion": "def special_factorial(n):\n    from math import factorial\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    result = []\n    space_count = 0\n    for char in text:\n        if char == ' ':\n            space_count += 1\n        else:\n            if space_count > 2:\n                result.append('-')\n            elif space_count > 0:\n                result.extend(['_'] * space_count)\n            result.append(char)\n            space_count = 0\n    if space_count > 2:\n        result.append('-')\n    elif space_count > 0:\n        result.extend(['_'] * space_count)\n    return ''.join(result)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/141", "completion": "def file_name_check(file_name):\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    name, extension = parts\n    if not name or not name[0].isalpha() or extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    return 'Yes'", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    total = 0\n    for i, x in enumerate(lst):\n        if i % 3 == 0:\n            total += x ** 2\n        elif i % 4 == 0:\n            total += x ** 3\n        else:\n            total += x\n    return total", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    from fractions import Fraction\n    return Fraction(x) * Fraction(n) == int(Fraction(x) * Fraction(n))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    def is_odd_digit(digit):\n        return digit in {'1', '3', '5', '7', '9'}\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if is_odd_digit(str_num[0]) and is_odd_digit(str_num[-1]):\n                count += 1\n    return count", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    mod_counts = [0, 0, 0]\n    for value in a:\n        mod_counts[value % 3] += 1\n    count = (mod_counts[0] * (mod_counts[0] - 1) * (mod_counts[0] - 2) // 6) + \\\n            (mod_counts[1] * mod_counts[1] * (mod_counts[1] - 1) // 2) + \\\n            (mod_counts[2] * mod_counts[2] * (mod_counts[2] - 1) // 2) + \\\n            (mod_counts[0] * mod_counts[1] * mod_counts[2])\n    return count", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    mod_counts = [0, 0, 0]\n    for value in a:\n        mod_counts[value % 3] += 1\n    count = (mod_counts[0] * (mod_counts[0] - 1) * (mod_counts[0] - 2) // 6) + \\\n            (mod_counts[1] * (mod_counts[1] - 1) * (mod_counts[1] - 2) // 6) + \\\n            (mod_counts[2] * (mod_counts[2] - 1) * (mod_counts[2] - 2) // 6) + \\\n            (mod_counts[0] * mod_counts[1] * mod_counts[2]) + \\\n            (mod_counts[1] * (mod_counts[1] - 1) // 2 * mod_counts[0]) + \\\n            (mod_counts[2] * (mod_counts[2] - 1) // 2 * mod_counts[0])\n    return count", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    mod_counts = [0, 0, 0]\n    for value in a:\n        mod_counts[value % 3] += 1\n    count = (mod_counts[0] * (mod_counts[0] - 1) * (mod_counts[0] - 2) // 6) + \\\n            (mod_counts[1] * (mod_counts[1] - 1) * (mod_counts[1] - 2) // 6) + \\\n            (mod_counts[2] * (mod_counts[2] - 1) * (mod_counts[2] - 2) // 6) + \\\n            (mod_counts[0] * mod_counts[1] * mod_counts[2]) + \\\n            (mod_counts[1] * mod_counts[2] * (mod_counts[1] - 1) // 2) + \\\n            (mod_counts[2] * mod_counts[1] * (mod_counts[2] - 1) // 2)\n    return count", "attempt_no": 3, "passed_tests": true}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    i1, i2 = planets.index(planet1), planets.index(planet2)\n    if i1 > i2:\n        i1, i2 = i2, i1\n    return planets[i1+1:i2]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/149", "completion": "def sorted_list_sum(lst):\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    return sorted(even_length_strings, key=lambda x: (len(x), x))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x >= 0 and x % 2 != 0)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    return [abs(g - m) for g, m in zip(game, guess)]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        cap, sm = 0, 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        return cap - sm\n\n    strongest = max(extensions, key=strength)\n    return f\"{class_name}.{strongest}\"", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    return any(b[i:] + b[:i] in a for i in range(len(b)))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syms = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_num", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max(words, key=lambda word: (len(set(word)), -words.index(word)))", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max(words, key=lambda word: (len(set(word)), -words.index(word))) if words else \"\"", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    return max(words, key=lambda word: (len(set(word)), -words.index(word))) if words else \"\"", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]\n    for i, op in enumerate(operator):\n        if op == '+':\n            result += operand[i + 1]\n        elif op == '-':\n            result -= operand[i + 1]\n        elif op == '*':\n            result *= operand[i + 1]\n        elif op == '//':\n            result //= operand[i + 1]\n        elif op == '**':\n            result **= operand[i + 1]\n    return result", "attempt_no": 3, "passed_tests": false}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/162", "completion": "import hashlib\n\ndef string_to_md5(text):\n    if text == \"\":\n        return None\n    return hashlib.md5(text.encode()).hexdigest()", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [x for x in range(start, end + 1) if x % 2 == 0]", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [x for x in range(start, end + 1) if x % 2 == 0 and x > 1]", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    start, end = min(a, b), max(a, b)\n    return [x for x in range(start, end + 1) if x % 2 == 0]", "attempt_no": 3, "passed_tests": false}
