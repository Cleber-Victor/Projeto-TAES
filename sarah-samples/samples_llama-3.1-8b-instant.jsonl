{"task_id": "HumanEval/coin_piles_extended", "completion": "def can_empty_piles(a: int, b: int) -> bool:\n    if a <= b:\n        if a % 3 == 0 or b % 2 == 0 or b % 3 == 0:\n            return True\n    else:\n        if (a - b) % 3 == 0:\n            return True\n    return False\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/coin_piles_extended", "completion": "def can_empty_piles(a: int, b: int) -> bool:\n    while a > 0 and b > 0:\n        if a >= 4 and b >= 1:\n            a -= 4\n            b -= 1\n        elif b >= 4 and a >= 1:\n            a -= 1\n            b -= 4\n        elif a > b and a >= 2:\n            a -= 2\n            b -= 1\n        elif b > a and b >= 2:\n            a -= 1\n            b -= 2\n        elif a >= 2:\n            a -= 2\n            b -= 1\n        elif b >= 2:\n            a -= 1\n            b -= 2\n        elif a >= 1:\n            a -= 1\n            b -= 2\n        else:\n            b -= 1\n            a -= 2\n    return a == 0 and b == 0\n", "attempt_no": 2, "passed_tests": true}
{"task_id": "HumanEval/collatz_sequence", "completion": "def collatz_sequence(n: int) -> str:\n    result = [str(n)]\n    while n != 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = 3 * n + 1\n        result.append(str(n))\n    return ' '.join(result)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/max_movies", "completion": "def max_movies(movies: list[tuple[int, int]]) -> int:\n    movies.sort(key=lambda x: x[1])\n    greed = []\n    for start, end in movies:\n        if not greed or start >= greed[-1][1]:\n            greed.append((start, end))\n    return len(greed)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/smallest_unmakeable_sum", "completion": "def smallest_unmakeable_sum(coins: list[int]) -> int:\n    coins.sort()\n    unmakeable_sum = 0\n    for i in range(len(coins)):\n        max_sum = (1<<i) * coins[i]\n        if all(max_sum % coin == 0 for coin in coins[i+1:]): \n            unmakeable_sum = max_sum\n            break\n    for coin in coins:\n        if unmakeable_sum // coin > 0:\n            unmakeable_sum += coin\n    return unmakeable_sum", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/smallest_unmakeable_sum", "completion": "def smallest_unmakeable_sum(coins: list[int]) -> int:\n    coins.sort()\n    unmakeable_sum = 0\n    num_coins = 1\n    for coin in coins:\n        unmakeable_sum += (coin * num_coins)\n        num_coins += 1\n    return unmakeable_sum\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/smallest_unmakeable_sum", "completion": "def smallest_unmakeable_sum(coins: list[int]) -> int:\n    coins.sort()\n    max_sum = 0\n    for i in range(len(coins)):\n        if max_sum < coins[i]:\n            max_sum = coins[i]\n    for i in range(1, (max(coins) + 1) // 2 + 1):\n        k = max_sum\n        while k > 0:\n            if k - coins[len(coins) - i] >= 0:\n                k -= coins[len(coins) - i]\n            else: break\n            i += 1\n        if k > 0:\n            return max_sum + k\n        max_sum += 1\n    return min(coins) + 1\n", "attempt_no": 3, "passed_tests": false}
