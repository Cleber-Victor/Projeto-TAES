{"task_id": "HumanEval/coin_piles_extended", "completion": "def can_empty_piles(a: int, b: int) -> bool:\n    while a > 0 and b > 0:\n        if a > b:\n            a -= 2\n            b -= 1\n        else:\n            a -= 1\n            b -= 2\n    return a == 0 and b == 0\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/collatz_sequence", "completion": "def collatz_sequence(n: int) -> str:\n    sequence = [str(n)]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        sequence.append(str(n))\n    return ' '.join(sequence)\n\nprint(collatz_sequence(6))\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/max_movies", "completion": "def max_movies(movies: list[tuple[int, int]]) -> int:\n    movies.sort(key=lambda x: x[1])\n    end_time = -1\n    count = 0\n    for start, end in movies:\n        if start >= end_time:\n            count += 1\n            end_time = end\n    return count\n\nprint(max_movies([(1, 3), (2, 4), (3, 5), (5, 7)]))  # Output: 3\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/smallest_unmakeable_sum", "completion": "def smallest_unmakeable_sum(coins: list[int]) -> int:\n    coins.sort()\n    res = 1\n    for coin in coins:\n        if coin > res:\n            break\n        res += coin\n    return res\n", "attempt_no": 1, "passed_tests": true}
