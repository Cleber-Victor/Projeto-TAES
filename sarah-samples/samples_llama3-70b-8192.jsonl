{"task_id": "HumanEval/coin_piles_extended", "completion": "def can_empty_piles(a: int, b: int) -> bool:\n    return (a + b) % 3 == 0 and min(a, b) * 2 <= max(a, b)\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/collatz_sequence", "completion": "def collatz_sequence(n: int) -> str:\n    seq = [str(n)]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        seq.append(str(n))\n    return ' '.join(seq)", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/max_movies", "completion": "def max_movies(movies: list[tuple[int, int]]) -> int:\n    movies.sort(key=lambda x: x[1])\n    end, count = -1, 0\n    for start, end_time in movies:\n        if start >= end:\n            end = end_time\n            count += 1\n    return count\n", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/smallest_unmakeable_sum", "completion": "def smallest_unmakeable_sum(coins):\n    dp = [0] + [float('inf')] * (max(coins) * len(coins) + 1)\n    for coin in coins:\n        for i in range(coin, len(dp)):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    for i in range(1, len(dp)):\n        if dp[i] == float('inf'):\n            return i\n", "attempt_no": 1, "passed_tests": false}
{"task_id": "HumanEval/smallest_unmakeable_sum", "completion": "def smallest_unmakeable_sum(coins):\n    dp = [False] * (sum(coins) + 1)\n    dp[0] = True\n    for coin in coins:\n        for i in range(coin, len(dp)):\n            dp[i] = dp[i] or dp[i - coin]\n    for i in range(1, len(dp)):\n        if not dp[i]:\n            return i\n", "attempt_no": 2, "passed_tests": false}
{"task_id": "HumanEval/smallest_unmakeable_sum", "completion": "def smallest_unmakeable_sum(coins):\n    dp = [False] * (sum(set(coins)) + 1)\n    dp[0] = True\n    for coin in set(coins):\n        for i in range(coin, len(dp)):\n            dp[i] = dp[i] or dp[i - coin]\n    for i in range(1, len(dp)):\n        if not dp[i]:\n            return i", "attempt_no": 3, "passed_tests": false}
