{"task_id": "HumanEval/coin_piles_extended", "completion": "def can_empty_piles(a: int, b: int) -> bool:\n    if a < 0 or b < 0:\n        return False\n    if a % 3 == 0 and b % 3 == 0:\n        return True\n    return False", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/collatz_sequence", "completion": "def collatz_sequence(n: int) -> str:\n    sequence = []\n    while n != 1:\n        sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)\n    return ' '.join(map(str, sequence))", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/max_movies", "completion": "def max_movies(movies: list[tuple[int, int]]) -> int:\n    if not movies:\n        return 0\n    movies.sort(key=lambda x: x[1])\n    last_end = float('-inf')\n    count = 0\n    for start, end in movies:\n        if start >= last_end:\n            count += 1\n            last_end = end\n    return count", "attempt_no": 1, "passed_tests": true}
{"task_id": "HumanEval/smallest_unmakeable_sum", "completion": "def smallest_unmakeable_sum(coins: list[int]) -> int:\n    coins.sort()\n    unmakeable_sum = 1\n    for coin in coins:\n        if coin > unmakeable_sum:\n            break\n        unmakeable_sum += coin\n    return unmakeable_sum", "attempt_no": 1, "passed_tests": true}
